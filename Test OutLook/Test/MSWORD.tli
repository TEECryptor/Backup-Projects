// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (ebc03d6c).
//
// MSWORD.tli
//
// Wrapper implementations for Win32 type library C:\\Program Files\\Microsoft Office\\Office10\\MSWORD.OLB
// compiler-generated file created 07/06/06 at 19:24:02 - DO NOT EDIT!


//
// interface _Application wrapper method implementations
//

#pragma implementation_key(1)
inline Word::_ApplicationPtr Word::_Application::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2)
inline long Word::_Application::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3)
inline IDispatchPtr Word::_Application::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4)
inline _bstr_t Word::_Application::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5)
inline Word::DocumentsPtr Word::_Application::GetDocuments ( ) {
    struct Documents * _result;
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentsPtr(_result, false);
}

#pragma implementation_key(6)
inline Word::WindowsPtr Word::_Application::GetWindows ( ) {
    struct Windows * _result;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowsPtr(_result, false);
}

#pragma implementation_key(7)
inline Word::_DocumentPtr Word::_Application::GetActiveDocument ( ) {
    struct _Document * _result;
    HRESULT _hr = get_ActiveDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(8)
inline Word::WindowPtr Word::_Application::GetActiveWindow ( ) {
    struct Window * _result;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(9)
inline Word::SelectionPtr Word::_Application::GetSelection ( ) {
    struct Selection * _result;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SelectionPtr(_result, false);
}

#pragma implementation_key(10)
inline IDispatchPtr Word::_Application::GetWordBasic ( ) {
    IDispatch * _result;
    HRESULT _hr = get_WordBasic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(11)
inline Word::RecentFilesPtr Word::_Application::GetRecentFiles ( ) {
    struct RecentFiles * _result;
    HRESULT _hr = get_RecentFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecentFilesPtr(_result, false);
}

#pragma implementation_key(12)
inline Word::TemplatePtr Word::_Application::GetNormalTemplate ( ) {
    struct Template * _result;
    HRESULT _hr = get_NormalTemplate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TemplatePtr(_result, false);
}

#pragma implementation_key(13)
inline Word::SystemPtr Word::_Application::GetSystem ( ) {
    struct System * _result;
    HRESULT _hr = get_System(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SystemPtr(_result, false);
}

#pragma implementation_key(14)
inline Word::AutoCorrectPtr Word::_Application::GetAutoCorrect ( ) {
    struct AutoCorrect * _result;
    HRESULT _hr = get_AutoCorrect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectPtr(_result, false);
}

#pragma implementation_key(15)
inline Word::FontNamesPtr Word::_Application::GetFontNames ( ) {
    struct FontNames * _result;
    HRESULT _hr = get_FontNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontNamesPtr(_result, false);
}

#pragma implementation_key(16)
inline Word::FontNamesPtr Word::_Application::GetLandscapeFontNames ( ) {
    struct FontNames * _result;
    HRESULT _hr = get_LandscapeFontNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontNamesPtr(_result, false);
}

#pragma implementation_key(17)
inline Word::FontNamesPtr Word::_Application::GetPortraitFontNames ( ) {
    struct FontNames * _result;
    HRESULT _hr = get_PortraitFontNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontNamesPtr(_result, false);
}

#pragma implementation_key(18)
inline Word::LanguagesPtr Word::_Application::GetLanguages ( ) {
    struct Languages * _result;
    HRESULT _hr = get_Languages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LanguagesPtr(_result, false);
}

#pragma implementation_key(19)
inline Office::AssistantPtr Word::_Application::GetAssistant ( ) {
    struct Office::Assistant * _result;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

#pragma implementation_key(20)
inline Word::BrowserPtr Word::_Application::GetBrowser ( ) {
    struct Browser * _result;
    HRESULT _hr = get_Browser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BrowserPtr(_result, false);
}

#pragma implementation_key(21)
inline Word::FileConvertersPtr Word::_Application::GetFileConverters ( ) {
    struct FileConverters * _result;
    HRESULT _hr = get_FileConverters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConvertersPtr(_result, false);
}

#pragma implementation_key(22)
inline Word::MailingLabelPtr Word::_Application::GetMailingLabel ( ) {
    struct MailingLabel * _result;
    HRESULT _hr = get_MailingLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailingLabelPtr(_result, false);
}

#pragma implementation_key(23)
inline Word::DialogsPtr Word::_Application::GetDialogs ( ) {
    struct Dialogs * _result;
    HRESULT _hr = get_Dialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogsPtr(_result, false);
}

#pragma implementation_key(24)
inline Word::CaptionLabelsPtr Word::_Application::GetCaptionLabels ( ) {
    struct CaptionLabels * _result;
    HRESULT _hr = get_CaptionLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CaptionLabelsPtr(_result, false);
}

#pragma implementation_key(25)
inline Word::AutoCaptionsPtr Word::_Application::GetAutoCaptions ( ) {
    struct AutoCaptions * _result;
    HRESULT _hr = get_AutoCaptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCaptionsPtr(_result, false);
}

#pragma implementation_key(26)
inline Word::AddInsPtr Word::_Application::GetAddIns ( ) {
    struct AddIns * _result;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

#pragma implementation_key(27)
inline VARIANT_BOOL Word::_Application::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(28)
inline void Word::_Application::PutVisible ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(29)
inline _bstr_t Word::_Application::GetVersion ( ) {
    BSTR _result;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(30)
inline VARIANT_BOOL Word::_Application::GetScreenUpdating ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ScreenUpdating(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(31)
inline void Word::_Application::PutScreenUpdating ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ScreenUpdating(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(32)
inline VARIANT_BOOL Word::_Application::GetPrintPreview ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintPreview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(33)
inline void Word::_Application::PutPrintPreview ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintPreview(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(34)
inline Word::TasksPtr Word::_Application::GetTasks ( ) {
    struct Tasks * _result;
    HRESULT _hr = get_Tasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TasksPtr(_result, false);
}

#pragma implementation_key(35)
inline VARIANT_BOOL Word::_Application::GetDisplayStatusBar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayStatusBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(36)
inline void Word::_Application::PutDisplayStatusBar ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayStatusBar(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(37)
inline VARIANT_BOOL Word::_Application::GetSpecialMode ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SpecialMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(38)
inline long Word::_Application::GetUsableWidth ( ) {
    long _result;
    HRESULT _hr = get_UsableWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(39)
inline long Word::_Application::GetUsableHeight ( ) {
    long _result;
    HRESULT _hr = get_UsableHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(40)
inline VARIANT_BOOL Word::_Application::GetMathCoprocessorAvailable ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MathCoprocessorAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(41)
inline VARIANT_BOOL Word::_Application::GetMouseAvailable ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MouseAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(42)
inline _variant_t Word::_Application::GetInternational ( enum WdInternationalIndex Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_International(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(43)
inline _bstr_t Word::_Application::GetBuild ( ) {
    BSTR _result;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(44)
inline VARIANT_BOOL Word::_Application::GetCapsLock ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CapsLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(45)
inline VARIANT_BOOL Word::_Application::GetNumLock ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NumLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline _bstr_t Word::_Application::GetUserName ( ) {
    BSTR _result;
    HRESULT _hr = get_UserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(47)
inline void Word::_Application::PutUserName ( _bstr_t prop ) {
    HRESULT _hr = put_UserName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(48)
inline _bstr_t Word::_Application::GetUserInitials ( ) {
    BSTR _result;
    HRESULT _hr = get_UserInitials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(49)
inline void Word::_Application::PutUserInitials ( _bstr_t prop ) {
    HRESULT _hr = put_UserInitials(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(50)
inline _bstr_t Word::_Application::GetUserAddress ( ) {
    BSTR _result;
    HRESULT _hr = get_UserAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(51)
inline void Word::_Application::PutUserAddress ( _bstr_t prop ) {
    HRESULT _hr = put_UserAddress(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(52)
inline IDispatchPtr Word::_Application::GetMacroContainer ( ) {
    IDispatch * _result;
    HRESULT _hr = get_MacroContainer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(53)
inline VARIANT_BOOL Word::_Application::GetDisplayRecentFiles ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayRecentFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(54)
inline void Word::_Application::PutDisplayRecentFiles ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayRecentFiles(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(55)
inline Office::_CommandBarsPtr Word::_Application::GetCommandBars ( ) {
    struct Office::_CommandBars * _result;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(56)
inline Word::SynonymInfoPtr Word::_Application::GetSynonymInfo ( _bstr_t Word, VARIANT * LanguageID ) {
    struct SynonymInfo * _result;
    HRESULT _hr = get_SynonymInfo(Word, LanguageID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SynonymInfoPtr(_result, false);
}

#pragma implementation_key(57)
inline VBIDE::VBEPtr Word::_Application::GetVBE ( ) {
    struct VBIDE::VBE * _result;
    HRESULT _hr = get_VBE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBIDE::VBEPtr(_result, false);
}

#pragma implementation_key(58)
inline _bstr_t Word::_Application::GetDefaultSaveFormat ( ) {
    BSTR _result;
    HRESULT _hr = get_DefaultSaveFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(59)
inline void Word::_Application::PutDefaultSaveFormat ( _bstr_t prop ) {
    HRESULT _hr = put_DefaultSaveFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(60)
inline Word::ListGalleriesPtr Word::_Application::GetListGalleries ( ) {
    struct ListGalleries * _result;
    HRESULT _hr = get_ListGalleries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListGalleriesPtr(_result, false);
}

#pragma implementation_key(61)
inline _bstr_t Word::_Application::GetActivePrinter ( ) {
    BSTR _result;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(62)
inline void Word::_Application::PutActivePrinter ( _bstr_t prop ) {
    HRESULT _hr = put_ActivePrinter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(63)
inline Word::TemplatesPtr Word::_Application::GetTemplates ( ) {
    struct Templates * _result;
    HRESULT _hr = get_Templates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TemplatesPtr(_result, false);
}

#pragma implementation_key(64)
inline IDispatchPtr Word::_Application::GetCustomizationContext ( ) {
    IDispatch * _result;
    HRESULT _hr = get_CustomizationContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(65)
inline void Word::_Application::PutCustomizationContext ( IDispatch * prop ) {
    HRESULT _hr = put_CustomizationContext(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(66)
inline Word::KeyBindingsPtr Word::_Application::GetKeyBindings ( ) {
    struct KeyBindings * _result;
    HRESULT _hr = get_KeyBindings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return KeyBindingsPtr(_result, false);
}

#pragma implementation_key(67)
inline Word::KeysBoundToPtr Word::_Application::GetKeysBoundTo ( enum WdKeyCategory KeyCategory, _bstr_t Command, VARIANT * CommandParameter ) {
    struct KeysBoundTo * _result;
    HRESULT _hr = get_KeysBoundTo(KeyCategory, Command, CommandParameter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return KeysBoundToPtr(_result, false);
}

#pragma implementation_key(68)
inline Word::KeyBindingPtr Word::_Application::GetFindKey ( long KeyCode, VARIANT * KeyCode2 ) {
    struct KeyBinding * _result;
    HRESULT _hr = get_FindKey(KeyCode, KeyCode2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return KeyBindingPtr(_result, false);
}

#pragma implementation_key(69)
inline _bstr_t Word::_Application::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(70)
inline void Word::_Application::PutCaption ( _bstr_t prop ) {
    HRESULT _hr = put_Caption(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(71)
inline _bstr_t Word::_Application::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(72)
inline VARIANT_BOOL Word::_Application::GetDisplayScrollBars ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayScrollBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(73)
inline void Word::_Application::PutDisplayScrollBars ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayScrollBars(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(74)
inline _bstr_t Word::_Application::GetStartupPath ( ) {
    BSTR _result;
    HRESULT _hr = get_StartupPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(75)
inline void Word::_Application::PutStartupPath ( _bstr_t prop ) {
    HRESULT _hr = put_StartupPath(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(76)
inline long Word::_Application::GetBackgroundSavingStatus ( ) {
    long _result;
    HRESULT _hr = get_BackgroundSavingStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(77)
inline long Word::_Application::GetBackgroundPrintingStatus ( ) {
    long _result;
    HRESULT _hr = get_BackgroundPrintingStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(78)
inline long Word::_Application::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(79)
inline void Word::_Application::PutLeft ( long prop ) {
    HRESULT _hr = put_Left(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(80)
inline long Word::_Application::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(81)
inline void Word::_Application::PutTop ( long prop ) {
    HRESULT _hr = put_Top(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(82)
inline long Word::_Application::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(83)
inline void Word::_Application::PutWidth ( long prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(84)
inline long Word::_Application::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(85)
inline void Word::_Application::PutHeight ( long prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(86)
inline enum WdWindowState Word::_Application::GetWindowState ( ) {
    enum WdWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(87)
inline void Word::_Application::PutWindowState ( enum WdWindowState prop ) {
    HRESULT _hr = put_WindowState(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(88)
inline VARIANT_BOOL Word::_Application::GetDisplayAutoCompleteTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayAutoCompleteTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(89)
inline void Word::_Application::PutDisplayAutoCompleteTips ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayAutoCompleteTips(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(90)
inline Word::OptionsPtr Word::_Application::GetOptions ( ) {
    struct Options * _result;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OptionsPtr(_result, false);
}

#pragma implementation_key(91)
inline enum WdAlertLevel Word::_Application::GetDisplayAlerts ( ) {
    enum WdAlertLevel _result;
    HRESULT _hr = get_DisplayAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(92)
inline void Word::_Application::PutDisplayAlerts ( enum WdAlertLevel prop ) {
    HRESULT _hr = put_DisplayAlerts(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(93)
inline Word::DictionariesPtr Word::_Application::GetCustomDictionaries ( ) {
    struct Dictionaries * _result;
    HRESULT _hr = get_CustomDictionaries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionariesPtr(_result, false);
}

#pragma implementation_key(94)
inline _bstr_t Word::_Application::GetPathSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_PathSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(95)
inline void Word::_Application::PutStatusBar ( _bstr_t _arg1 ) {
    HRESULT _hr = put_StatusBar(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(96)
inline VARIANT_BOOL Word::_Application::GetMAPIAvailable ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MAPIAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(97)
inline VARIANT_BOOL Word::_Application::GetDisplayScreenTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayScreenTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(98)
inline void Word::_Application::PutDisplayScreenTips ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayScreenTips(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(99)
inline enum WdEnableCancelKey Word::_Application::GetEnableCancelKey ( ) {
    enum WdEnableCancelKey _result;
    HRESULT _hr = get_EnableCancelKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(100)
inline void Word::_Application::PutEnableCancelKey ( enum WdEnableCancelKey prop ) {
    HRESULT _hr = put_EnableCancelKey(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(101)
inline VARIANT_BOOL Word::_Application::GetUserControl ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UserControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(102)
inline Office::FileSearchPtr Word::_Application::GetFileSearch ( ) {
    struct Office::FileSearch * _result;
    HRESULT _hr = get_FileSearch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::FileSearchPtr(_result, false);
}

#pragma implementation_key(103)
inline enum WdMailSystem Word::_Application::GetMailSystem ( ) {
    enum WdMailSystem _result;
    HRESULT _hr = get_MailSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(104)
inline _bstr_t Word::_Application::GetDefaultTableSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_DefaultTableSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(105)
inline void Word::_Application::PutDefaultTableSeparator ( _bstr_t prop ) {
    HRESULT _hr = put_DefaultTableSeparator(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(106)
inline VARIANT_BOOL Word::_Application::GetShowVisualBasicEditor ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowVisualBasicEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(107)
inline void Word::_Application::PutShowVisualBasicEditor ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowVisualBasicEditor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(108)
inline _bstr_t Word::_Application::GetBrowseExtraFileTypes ( ) {
    BSTR _result;
    HRESULT _hr = get_BrowseExtraFileTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(109)
inline void Word::_Application::PutBrowseExtraFileTypes ( _bstr_t prop ) {
    HRESULT _hr = put_BrowseExtraFileTypes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(110)
inline VARIANT_BOOL Word::_Application::GetIsObjectValid ( IDispatch * Object ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsObjectValid(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(111)
inline Word::HangulHanjaConversionDictionariesPtr Word::_Application::GetHangulHanjaDictionaries ( ) {
    struct HangulHanjaConversionDictionaries * _result;
    HRESULT _hr = get_HangulHanjaDictionaries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HangulHanjaConversionDictionariesPtr(_result, false);
}

#pragma implementation_key(112)
inline Word::MailMessagePtr Word::_Application::GetMailMessage ( ) {
    struct MailMessage * _result;
    HRESULT _hr = get_MailMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMessagePtr(_result, false);
}

#pragma implementation_key(113)
inline VARIANT_BOOL Word::_Application::GetFocusInMailHeader ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FocusInMailHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(114)
inline HRESULT Word::_Application::Quit ( VARIANT * SaveChanges, VARIANT * OriginalFormat, VARIANT * RouteDocument ) {
    HRESULT _hr = raw_Quit(SaveChanges, OriginalFormat, RouteDocument);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(115)
inline HRESULT Word::_Application::ScreenRefresh ( ) {
    HRESULT _hr = raw_ScreenRefresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(116)
inline HRESULT Word::_Application::PrintOutOld ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * FileName, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint ) {
    HRESULT _hr = raw_PrintOutOld(Background, Append, Range, OutputFileName, From, To, Item, Copies, Pages, PageType, PrintToFile, Collate, FileName, ActivePrinterMacGX, ManualDuplexPrint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(117)
inline HRESULT Word::_Application::LookupNameProperties ( _bstr_t Name ) {
    HRESULT _hr = raw_LookupNameProperties(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(118)
inline HRESULT Word::_Application::SubstituteFont ( _bstr_t UnavailableFont, _bstr_t SubstituteFont ) {
    HRESULT _hr = raw_SubstituteFont(UnavailableFont, SubstituteFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(119)
inline VARIANT_BOOL Word::_Application::Repeat ( VARIANT * Times ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Repeat(Times, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(120)
inline HRESULT Word::_Application::DDEExecute ( long Channel, _bstr_t Command ) {
    HRESULT _hr = raw_DDEExecute(Channel, Command);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(121)
inline long Word::_Application::DDEInitiate ( _bstr_t App, _bstr_t Topic ) {
    long _result;
    HRESULT _hr = raw_DDEInitiate(App, Topic, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(122)
inline HRESULT Word::_Application::DDEPoke ( long Channel, _bstr_t Item, _bstr_t Data ) {
    HRESULT _hr = raw_DDEPoke(Channel, Item, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(123)
inline _bstr_t Word::_Application::DDERequest ( long Channel, _bstr_t Item ) {
    BSTR _result;
    HRESULT _hr = raw_DDERequest(Channel, Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(124)
inline HRESULT Word::_Application::DDETerminate ( long Channel ) {
    HRESULT _hr = raw_DDETerminate(Channel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(125)
inline HRESULT Word::_Application::DDETerminateAll ( ) {
    HRESULT _hr = raw_DDETerminateAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(126)
inline long Word::_Application::BuildKeyCode ( enum WdKey Arg1, VARIANT * Arg2, VARIANT * Arg3, VARIANT * Arg4 ) {
    long _result;
    HRESULT _hr = raw_BuildKeyCode(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline _bstr_t Word::_Application::KeyString ( long KeyCode, VARIANT * KeyCode2 ) {
    BSTR _result;
    HRESULT _hr = raw_KeyString(KeyCode, KeyCode2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(128)
inline HRESULT Word::_Application::OrganizerCopy ( _bstr_t Source, _bstr_t Destination, _bstr_t Name, enum WdOrganizerObject Object ) {
    HRESULT _hr = raw_OrganizerCopy(Source, Destination, Name, Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(129)
inline HRESULT Word::_Application::OrganizerDelete ( _bstr_t Source, _bstr_t Name, enum WdOrganizerObject Object ) {
    HRESULT _hr = raw_OrganizerDelete(Source, Name, Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(130)
inline HRESULT Word::_Application::OrganizerRename ( _bstr_t Source, _bstr_t Name, _bstr_t NewName, enum WdOrganizerObject Object ) {
    HRESULT _hr = raw_OrganizerRename(Source, Name, NewName, Object);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(131)
inline HRESULT Word::_Application::AddAddress ( SAFEARRAY * * TagID, SAFEARRAY * * Value ) {
    HRESULT _hr = raw_AddAddress(TagID, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(132)
inline _bstr_t Word::_Application::GetAddress ( VARIANT * Name, VARIANT * AddressProperties, VARIANT * UseAutoText, VARIANT * DisplaySelectDialog, VARIANT * SelectDialog, VARIANT * CheckNamesDialog, VARIANT * RecentAddressesChoice, VARIANT * UpdateRecentAddresses ) {
    BSTR _result;
    HRESULT _hr = raw_GetAddress(Name, AddressProperties, UseAutoText, DisplaySelectDialog, SelectDialog, CheckNamesDialog, RecentAddressesChoice, UpdateRecentAddresses, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(133)
inline VARIANT_BOOL Word::_Application::CheckGrammar ( _bstr_t String ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_CheckGrammar(String, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(134)
inline VARIANT_BOOL Word::_Application::CheckSpelling ( _bstr_t Word, VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * MainDictionary, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_CheckSpelling(Word, CustomDictionary, IgnoreUppercase, MainDictionary, CustomDictionary2, CustomDictionary3, CustomDictionary4, CustomDictionary5, CustomDictionary6, CustomDictionary7, CustomDictionary8, CustomDictionary9, CustomDictionary10, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline HRESULT Word::_Application::ResetIgnoreAll ( ) {
    HRESULT _hr = raw_ResetIgnoreAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(136)
inline Word::SpellingSuggestionsPtr Word::_Application::GetSpellingSuggestions ( _bstr_t Word, VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * MainDictionary, VARIANT * SuggestionMode, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 ) {
    struct SpellingSuggestions * _result;
    HRESULT _hr = raw_GetSpellingSuggestions(Word, CustomDictionary, IgnoreUppercase, MainDictionary, SuggestionMode, CustomDictionary2, CustomDictionary3, CustomDictionary4, CustomDictionary5, CustomDictionary6, CustomDictionary7, CustomDictionary8, CustomDictionary9, CustomDictionary10, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SpellingSuggestionsPtr(_result, false);
}

#pragma implementation_key(137)
inline HRESULT Word::_Application::GoBack ( ) {
    HRESULT _hr = raw_GoBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(138)
inline HRESULT Word::_Application::Help ( VARIANT * HelpType ) {
    HRESULT _hr = raw_Help(HelpType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(139)
inline HRESULT Word::_Application::AutomaticChange ( ) {
    HRESULT _hr = raw_AutomaticChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(140)
inline HRESULT Word::_Application::ShowMe ( ) {
    HRESULT _hr = raw_ShowMe();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(141)
inline HRESULT Word::_Application::HelpTool ( ) {
    HRESULT _hr = raw_HelpTool();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(142)
inline Word::WindowPtr Word::_Application::NewWindow ( ) {
    struct Window * _result;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(143)
inline HRESULT Word::_Application::ListCommands ( VARIANT_BOOL ListAllCommands ) {
    HRESULT _hr = raw_ListCommands(ListAllCommands);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(144)
inline HRESULT Word::_Application::ShowClipboard ( ) {
    HRESULT _hr = raw_ShowClipboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(145)
inline HRESULT Word::_Application::OnTime ( VARIANT * When, _bstr_t Name, VARIANT * Tolerance ) {
    HRESULT _hr = raw_OnTime(When, Name, Tolerance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(146)
inline HRESULT Word::_Application::NextLetter ( ) {
    HRESULT _hr = raw_NextLetter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(147)
inline short Word::_Application::MountVolume ( _bstr_t Zone, _bstr_t Server, _bstr_t Volume, VARIANT * User, VARIANT * UserPassword, VARIANT * VolumePassword ) {
    short _result;
    HRESULT _hr = raw_MountVolume(Zone, Server, Volume, User, UserPassword, VolumePassword, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(148)
inline _bstr_t Word::_Application::CleanString ( _bstr_t String ) {
    BSTR _result;
    HRESULT _hr = raw_CleanString(String, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(149)
inline HRESULT Word::_Application::SendFax ( ) {
    HRESULT _hr = raw_SendFax();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(150)
inline HRESULT Word::_Application::ChangeFileOpenDirectory ( _bstr_t Path ) {
    HRESULT _hr = raw_ChangeFileOpenDirectory(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(151)
inline HRESULT Word::_Application::RunOld ( _bstr_t MacroName ) {
    HRESULT _hr = raw_RunOld(MacroName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(152)
inline HRESULT Word::_Application::GoForward ( ) {
    HRESULT _hr = raw_GoForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(153)
inline HRESULT Word::_Application::Move ( long Left, long Top ) {
    HRESULT _hr = raw_Move(Left, Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(154)
inline HRESULT Word::_Application::Resize ( long Width, long Height ) {
    HRESULT _hr = raw_Resize(Width, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(155)
inline float Word::_Application::InchesToPoints ( float Inches ) {
    float _result;
    HRESULT _hr = raw_InchesToPoints(Inches, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(156)
inline float Word::_Application::CentimetersToPoints ( float Centimeters ) {
    float _result;
    HRESULT _hr = raw_CentimetersToPoints(Centimeters, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(157)
inline float Word::_Application::MillimetersToPoints ( float Millimeters ) {
    float _result;
    HRESULT _hr = raw_MillimetersToPoints(Millimeters, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(158)
inline float Word::_Application::PicasToPoints ( float Picas ) {
    float _result;
    HRESULT _hr = raw_PicasToPoints(Picas, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(159)
inline float Word::_Application::LinesToPoints ( float Lines ) {
    float _result;
    HRESULT _hr = raw_LinesToPoints(Lines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(160)
inline float Word::_Application::PointsToInches ( float Points ) {
    float _result;
    HRESULT _hr = raw_PointsToInches(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(161)
inline float Word::_Application::PointsToCentimeters ( float Points ) {
    float _result;
    HRESULT _hr = raw_PointsToCentimeters(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(162)
inline float Word::_Application::PointsToMillimeters ( float Points ) {
    float _result;
    HRESULT _hr = raw_PointsToMillimeters(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline float Word::_Application::PointsToPicas ( float Points ) {
    float _result;
    HRESULT _hr = raw_PointsToPicas(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(164)
inline float Word::_Application::PointsToLines ( float Points ) {
    float _result;
    HRESULT _hr = raw_PointsToLines(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline HRESULT Word::_Application::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(166)
inline float Word::_Application::PointsToPixels ( float Points, VARIANT * fVertical ) {
    float _result;
    HRESULT _hr = raw_PointsToPixels(Points, fVertical, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline float Word::_Application::PixelsToPoints ( float Pixels, VARIANT * fVertical ) {
    float _result;
    HRESULT _hr = raw_PixelsToPoints(Pixels, fVertical, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(168)
inline HRESULT Word::_Application::KeyboardLatin ( ) {
    HRESULT _hr = raw_KeyboardLatin();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(169)
inline HRESULT Word::_Application::KeyboardBidi ( ) {
    HRESULT _hr = raw_KeyboardBidi();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(170)
inline HRESULT Word::_Application::ToggleKeyboard ( ) {
    HRESULT _hr = raw_ToggleKeyboard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(171)
inline long Word::_Application::Keyboard ( long LangId ) {
    long _result;
    HRESULT _hr = raw_Keyboard(LangId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(172)
inline _bstr_t Word::_Application::ProductCode ( ) {
    BSTR _result;
    HRESULT _hr = raw_ProductCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(173)
inline Word::DefaultWebOptionsPtr Word::_Application::DefaultWebOptions ( ) {
    struct DefaultWebOptions * _result;
    HRESULT _hr = raw_DefaultWebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DefaultWebOptionsPtr(_result, false);
}

#pragma implementation_key(174)
inline HRESULT Word::_Application::DiscussionSupport ( VARIANT * Range, VARIANT * cid, VARIANT * piCSE ) {
    HRESULT _hr = raw_DiscussionSupport(Range, cid, piCSE);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(175)
inline HRESULT Word::_Application::SetDefaultTheme ( _bstr_t Name, enum WdDocumentMedium DocumentType ) {
    HRESULT _hr = raw_SetDefaultTheme(Name, DocumentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(176)
inline _bstr_t Word::_Application::GetDefaultTheme ( enum WdDocumentMedium DocumentType ) {
    BSTR _result;
    HRESULT _hr = raw_GetDefaultTheme(DocumentType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(177)
inline Word::EmailOptionsPtr Word::_Application::GetEmailOptions ( ) {
    struct EmailOptions * _result;
    HRESULT _hr = get_EmailOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EmailOptionsPtr(_result, false);
}

#pragma implementation_key(178)
inline enum Office::MsoLanguageID Word::_Application::GetLanguage ( ) {
    enum Office::MsoLanguageID _result;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(179)
inline Office::COMAddInsPtr Word::_Application::GetCOMAddIns ( ) {
    struct Office::COMAddIns * _result;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::COMAddInsPtr(_result, false);
}

#pragma implementation_key(180)
inline VARIANT_BOOL Word::_Application::GetCheckLanguage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CheckLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(181)
inline void Word::_Application::PutCheckLanguage ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CheckLanguage(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(182)
inline Office::LanguageSettingsPtr Word::_Application::GetLanguageSettings ( ) {
    struct Office::LanguageSettings * _result;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::LanguageSettingsPtr(_result, false);
}

#pragma implementation_key(183)
inline VARIANT_BOOL Word::_Application::GetDummy1 ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Dummy1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(184)
inline Office::AnswerWizardPtr Word::_Application::GetAnswerWizard ( ) {
    struct Office::AnswerWizard * _result;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AnswerWizardPtr(_result, false);
}

#pragma implementation_key(185)
inline enum Office::MsoFeatureInstall Word::_Application::GetFeatureInstall ( ) {
    enum Office::MsoFeatureInstall _result;
    HRESULT _hr = get_FeatureInstall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(186)
inline void Word::_Application::PutFeatureInstall ( enum Office::MsoFeatureInstall prop ) {
    HRESULT _hr = put_FeatureInstall(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(187)
inline HRESULT Word::_Application::PrintOut2000 ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * FileName, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint, VARIANT * PrintZoomColumn, VARIANT * PrintZoomRow, VARIANT * PrintZoomPaperWidth, VARIANT * PrintZoomPaperHeight ) {
    HRESULT _hr = raw_PrintOut2000(Background, Append, Range, OutputFileName, From, To, Item, Copies, Pages, PageType, PrintToFile, Collate, FileName, ActivePrinterMacGX, ManualDuplexPrint, PrintZoomColumn, PrintZoomRow, PrintZoomPaperWidth, PrintZoomPaperHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(188)
inline _variant_t Word::_Application::Run ( _bstr_t MacroName, VARIANT * varg1, VARIANT * varg2, VARIANT * varg3, VARIANT * varg4, VARIANT * varg5, VARIANT * varg6, VARIANT * varg7, VARIANT * varg8, VARIANT * varg9, VARIANT * varg10, VARIANT * varg11, VARIANT * varg12, VARIANT * varg13, VARIANT * varg14, VARIANT * varg15, VARIANT * varg16, VARIANT * varg17, VARIANT * varg18, VARIANT * varg19, VARIANT * varg20, VARIANT * varg21, VARIANT * varg22, VARIANT * varg23, VARIANT * varg24, VARIANT * varg25, VARIANT * varg26, VARIANT * varg27, VARIANT * varg28, VARIANT * varg29, VARIANT * varg30 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Run(MacroName, varg1, varg2, varg3, varg4, varg5, varg6, varg7, varg8, varg9, varg10, varg11, varg12, varg13, varg14, varg15, varg16, varg17, varg18, varg19, varg20, varg21, varg22, varg23, varg24, varg25, varg26, varg27, varg28, varg29, varg30, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(189)
inline HRESULT Word::_Application::PrintOut ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * FileName, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint, VARIANT * PrintZoomColumn, VARIANT * PrintZoomRow, VARIANT * PrintZoomPaperWidth, VARIANT * PrintZoomPaperHeight ) {
    HRESULT _hr = raw_PrintOut(Background, Append, Range, OutputFileName, From, To, Item, Copies, Pages, PageType, PrintToFile, Collate, FileName, ActivePrinterMacGX, ManualDuplexPrint, PrintZoomColumn, PrintZoomRow, PrintZoomPaperWidth, PrintZoomPaperHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(190)
inline enum Office::MsoAutomationSecurity Word::_Application::GetAutomationSecurity ( ) {
    enum Office::MsoAutomationSecurity _result;
    HRESULT _hr = get_AutomationSecurity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(191)
inline void Word::_Application::PutAutomationSecurity ( enum Office::MsoAutomationSecurity prop ) {
    HRESULT _hr = put_AutomationSecurity(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(192)
inline Office::FileDialogPtr Word::_Application::GetFileDialog ( enum Office::MsoFileDialogType FileDialogType ) {
    struct Office::FileDialog * _result;
    HRESULT _hr = get_FileDialog(FileDialogType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::FileDialogPtr(_result, false);
}

#pragma implementation_key(193)
inline _bstr_t Word::_Application::GetEmailTemplate ( ) {
    BSTR _result;
    HRESULT _hr = get_EmailTemplate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(194)
inline void Word::_Application::PutEmailTemplate ( _bstr_t prop ) {
    HRESULT _hr = put_EmailTemplate(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(195)
inline VARIANT_BOOL Word::_Application::GetShowWindowsInTaskbar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowWindowsInTaskbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(196)
inline void Word::_Application::PutShowWindowsInTaskbar ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowWindowsInTaskbar(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(197)
inline Office::NewFilePtr Word::_Application::GetNewDocument ( ) {
    struct Office::NewFile * _result;
    HRESULT _hr = get_NewDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::NewFilePtr(_result, false);
}

#pragma implementation_key(198)
inline VARIANT_BOOL Word::_Application::GetShowStartupDialog ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowStartupDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline void Word::_Application::PutShowStartupDialog ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowStartupDialog(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(200)
inline Word::AutoCorrectPtr Word::_Application::GetAutoCorrectEmail ( ) {
    struct AutoCorrect * _result;
    HRESULT _hr = get_AutoCorrectEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectPtr(_result, false);
}

#pragma implementation_key(201)
inline Word::TaskPanesPtr Word::_Application::GetTaskPanes ( ) {
    struct TaskPanes * _result;
    HRESULT _hr = get_TaskPanes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TaskPanesPtr(_result, false);
}

#pragma implementation_key(202)
inline VARIANT_BOOL Word::_Application::GetDefaultLegalBlackline ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DefaultLegalBlackline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(203)
inline void Word::_Application::PutDefaultLegalBlackline ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DefaultLegalBlackline(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(204)
inline VARIANT_BOOL Word::_Application::Dummy2 ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Dummy2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _Global wrapper method implementations
//

#pragma implementation_key(205)
inline Word::_ApplicationPtr Word::_Global::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(206)
inline long Word::_Global::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline IDispatchPtr Word::_Global::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(208)
inline _bstr_t Word::_Global::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(209)
inline Word::DocumentsPtr Word::_Global::GetDocuments ( ) {
    struct Documents * _result;
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentsPtr(_result, false);
}

#pragma implementation_key(210)
inline Word::WindowsPtr Word::_Global::GetWindows ( ) {
    struct Windows * _result;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowsPtr(_result, false);
}

#pragma implementation_key(211)
inline Word::_DocumentPtr Word::_Global::GetActiveDocument ( ) {
    struct _Document * _result;
    HRESULT _hr = get_ActiveDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(212)
inline Word::WindowPtr Word::_Global::GetActiveWindow ( ) {
    struct Window * _result;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(213)
inline Word::SelectionPtr Word::_Global::GetSelection ( ) {
    struct Selection * _result;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SelectionPtr(_result, false);
}

#pragma implementation_key(214)
inline IDispatchPtr Word::_Global::GetWordBasic ( ) {
    IDispatch * _result;
    HRESULT _hr = get_WordBasic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(215)
inline VARIANT_BOOL Word::_Global::GetPrintPreview ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintPreview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(216)
inline void Word::_Global::PutPrintPreview ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintPreview(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(217)
inline Word::RecentFilesPtr Word::_Global::GetRecentFiles ( ) {
    struct RecentFiles * _result;
    HRESULT _hr = get_RecentFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecentFilesPtr(_result, false);
}

#pragma implementation_key(218)
inline Word::TemplatePtr Word::_Global::GetNormalTemplate ( ) {
    struct Template * _result;
    HRESULT _hr = get_NormalTemplate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TemplatePtr(_result, false);
}

#pragma implementation_key(219)
inline Word::SystemPtr Word::_Global::GetSystem ( ) {
    struct System * _result;
    HRESULT _hr = get_System(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SystemPtr(_result, false);
}

#pragma implementation_key(220)
inline Word::AutoCorrectPtr Word::_Global::GetAutoCorrect ( ) {
    struct AutoCorrect * _result;
    HRESULT _hr = get_AutoCorrect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectPtr(_result, false);
}

#pragma implementation_key(221)
inline Word::FontNamesPtr Word::_Global::GetFontNames ( ) {
    struct FontNames * _result;
    HRESULT _hr = get_FontNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontNamesPtr(_result, false);
}

#pragma implementation_key(222)
inline Word::FontNamesPtr Word::_Global::GetLandscapeFontNames ( ) {
    struct FontNames * _result;
    HRESULT _hr = get_LandscapeFontNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontNamesPtr(_result, false);
}

#pragma implementation_key(223)
inline Word::FontNamesPtr Word::_Global::GetPortraitFontNames ( ) {
    struct FontNames * _result;
    HRESULT _hr = get_PortraitFontNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontNamesPtr(_result, false);
}

#pragma implementation_key(224)
inline Word::LanguagesPtr Word::_Global::GetLanguages ( ) {
    struct Languages * _result;
    HRESULT _hr = get_Languages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LanguagesPtr(_result, false);
}

#pragma implementation_key(225)
inline Office::AssistantPtr Word::_Global::GetAssistant ( ) {
    struct Office::Assistant * _result;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

#pragma implementation_key(226)
inline Word::FileConvertersPtr Word::_Global::GetFileConverters ( ) {
    struct FileConverters * _result;
    HRESULT _hr = get_FileConverters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConvertersPtr(_result, false);
}

#pragma implementation_key(227)
inline Word::DialogsPtr Word::_Global::GetDialogs ( ) {
    struct Dialogs * _result;
    HRESULT _hr = get_Dialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogsPtr(_result, false);
}

#pragma implementation_key(228)
inline Word::CaptionLabelsPtr Word::_Global::GetCaptionLabels ( ) {
    struct CaptionLabels * _result;
    HRESULT _hr = get_CaptionLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CaptionLabelsPtr(_result, false);
}

#pragma implementation_key(229)
inline Word::AutoCaptionsPtr Word::_Global::GetAutoCaptions ( ) {
    struct AutoCaptions * _result;
    HRESULT _hr = get_AutoCaptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCaptionsPtr(_result, false);
}

#pragma implementation_key(230)
inline Word::AddInsPtr Word::_Global::GetAddIns ( ) {
    struct AddIns * _result;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

#pragma implementation_key(231)
inline Word::TasksPtr Word::_Global::GetTasks ( ) {
    struct Tasks * _result;
    HRESULT _hr = get_Tasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TasksPtr(_result, false);
}

#pragma implementation_key(232)
inline IDispatchPtr Word::_Global::GetMacroContainer ( ) {
    IDispatch * _result;
    HRESULT _hr = get_MacroContainer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(233)
inline Office::_CommandBarsPtr Word::_Global::GetCommandBars ( ) {
    struct Office::_CommandBars * _result;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(234)
inline Word::SynonymInfoPtr Word::_Global::GetSynonymInfo ( _bstr_t Word, VARIANT * LanguageID ) {
    struct SynonymInfo * _result;
    HRESULT _hr = get_SynonymInfo(Word, LanguageID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SynonymInfoPtr(_result, false);
}

#pragma implementation_key(235)
inline VBIDE::VBEPtr Word::_Global::GetVBE ( ) {
    struct VBIDE::VBE * _result;
    HRESULT _hr = get_VBE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBIDE::VBEPtr(_result, false);
}

#pragma implementation_key(236)
inline Word::ListGalleriesPtr Word::_Global::GetListGalleries ( ) {
    struct ListGalleries * _result;
    HRESULT _hr = get_ListGalleries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListGalleriesPtr(_result, false);
}

#pragma implementation_key(237)
inline _bstr_t Word::_Global::GetActivePrinter ( ) {
    BSTR _result;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(238)
inline void Word::_Global::PutActivePrinter ( _bstr_t prop ) {
    HRESULT _hr = put_ActivePrinter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(239)
inline Word::TemplatesPtr Word::_Global::GetTemplates ( ) {
    struct Templates * _result;
    HRESULT _hr = get_Templates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TemplatesPtr(_result, false);
}

#pragma implementation_key(240)
inline IDispatchPtr Word::_Global::GetCustomizationContext ( ) {
    IDispatch * _result;
    HRESULT _hr = get_CustomizationContext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(241)
inline void Word::_Global::PutCustomizationContext ( IDispatch * prop ) {
    HRESULT _hr = put_CustomizationContext(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(242)
inline Word::KeyBindingsPtr Word::_Global::GetKeyBindings ( ) {
    struct KeyBindings * _result;
    HRESULT _hr = get_KeyBindings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return KeyBindingsPtr(_result, false);
}

#pragma implementation_key(243)
inline Word::KeysBoundToPtr Word::_Global::GetKeysBoundTo ( enum WdKeyCategory KeyCategory, _bstr_t Command, VARIANT * CommandParameter ) {
    struct KeysBoundTo * _result;
    HRESULT _hr = get_KeysBoundTo(KeyCategory, Command, CommandParameter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return KeysBoundToPtr(_result, false);
}

#pragma implementation_key(244)
inline Word::KeyBindingPtr Word::_Global::GetFindKey ( long KeyCode, VARIANT * KeyCode2 ) {
    struct KeyBinding * _result;
    HRESULT _hr = get_FindKey(KeyCode, KeyCode2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return KeyBindingPtr(_result, false);
}

#pragma implementation_key(245)
inline Word::OptionsPtr Word::_Global::GetOptions ( ) {
    struct Options * _result;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OptionsPtr(_result, false);
}

#pragma implementation_key(246)
inline Word::DictionariesPtr Word::_Global::GetCustomDictionaries ( ) {
    struct Dictionaries * _result;
    HRESULT _hr = get_CustomDictionaries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionariesPtr(_result, false);
}

#pragma implementation_key(247)
inline void Word::_Global::PutStatusBar ( _bstr_t _arg1 ) {
    HRESULT _hr = put_StatusBar(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(248)
inline VARIANT_BOOL Word::_Global::GetShowVisualBasicEditor ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowVisualBasicEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(249)
inline void Word::_Global::PutShowVisualBasicEditor ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowVisualBasicEditor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(250)
inline VARIANT_BOOL Word::_Global::GetIsObjectValid ( IDispatch * Object ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsObjectValid(Object, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(251)
inline Word::HangulHanjaConversionDictionariesPtr Word::_Global::GetHangulHanjaDictionaries ( ) {
    struct HangulHanjaConversionDictionaries * _result;
    HRESULT _hr = get_HangulHanjaDictionaries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HangulHanjaConversionDictionariesPtr(_result, false);
}

#pragma implementation_key(252)
inline VARIANT_BOOL Word::_Global::Repeat ( VARIANT * Times ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Repeat(Times, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline HRESULT Word::_Global::DDEExecute ( long Channel, _bstr_t Command ) {
    HRESULT _hr = raw_DDEExecute(Channel, Command);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(254)
inline long Word::_Global::DDEInitiate ( _bstr_t App, _bstr_t Topic ) {
    long _result;
    HRESULT _hr = raw_DDEInitiate(App, Topic, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline HRESULT Word::_Global::DDEPoke ( long Channel, _bstr_t Item, _bstr_t Data ) {
    HRESULT _hr = raw_DDEPoke(Channel, Item, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(256)
inline _bstr_t Word::_Global::DDERequest ( long Channel, _bstr_t Item ) {
    BSTR _result;
    HRESULT _hr = raw_DDERequest(Channel, Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(257)
inline HRESULT Word::_Global::DDETerminate ( long Channel ) {
    HRESULT _hr = raw_DDETerminate(Channel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(258)
inline HRESULT Word::_Global::DDETerminateAll ( ) {
    HRESULT _hr = raw_DDETerminateAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(259)
inline long Word::_Global::BuildKeyCode ( enum WdKey Arg1, VARIANT * Arg2, VARIANT * Arg3, VARIANT * Arg4 ) {
    long _result;
    HRESULT _hr = raw_BuildKeyCode(Arg1, Arg2, Arg3, Arg4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(260)
inline _bstr_t Word::_Global::KeyString ( long KeyCode, VARIANT * KeyCode2 ) {
    BSTR _result;
    HRESULT _hr = raw_KeyString(KeyCode, KeyCode2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(261)
inline VARIANT_BOOL Word::_Global::CheckSpelling ( _bstr_t Word, VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * MainDictionary, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_CheckSpelling(Word, CustomDictionary, IgnoreUppercase, MainDictionary, CustomDictionary2, CustomDictionary3, CustomDictionary4, CustomDictionary5, CustomDictionary6, CustomDictionary7, CustomDictionary8, CustomDictionary9, CustomDictionary10, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(262)
inline Word::SpellingSuggestionsPtr Word::_Global::GetSpellingSuggestions ( _bstr_t Word, VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * MainDictionary, VARIANT * SuggestionMode, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 ) {
    struct SpellingSuggestions * _result;
    HRESULT _hr = raw_GetSpellingSuggestions(Word, CustomDictionary, IgnoreUppercase, MainDictionary, SuggestionMode, CustomDictionary2, CustomDictionary3, CustomDictionary4, CustomDictionary5, CustomDictionary6, CustomDictionary7, CustomDictionary8, CustomDictionary9, CustomDictionary10, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SpellingSuggestionsPtr(_result, false);
}

#pragma implementation_key(263)
inline HRESULT Word::_Global::Help ( VARIANT * HelpType ) {
    HRESULT _hr = raw_Help(HelpType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(264)
inline Word::WindowPtr Word::_Global::NewWindow ( ) {
    struct Window * _result;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(265)
inline _bstr_t Word::_Global::CleanString ( _bstr_t String ) {
    BSTR _result;
    HRESULT _hr = raw_CleanString(String, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(266)
inline HRESULT Word::_Global::ChangeFileOpenDirectory ( _bstr_t Path ) {
    HRESULT _hr = raw_ChangeFileOpenDirectory(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(267)
inline float Word::_Global::InchesToPoints ( float Inches ) {
    float _result;
    HRESULT _hr = raw_InchesToPoints(Inches, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(268)
inline float Word::_Global::CentimetersToPoints ( float Centimeters ) {
    float _result;
    HRESULT _hr = raw_CentimetersToPoints(Centimeters, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(269)
inline float Word::_Global::MillimetersToPoints ( float Millimeters ) {
    float _result;
    HRESULT _hr = raw_MillimetersToPoints(Millimeters, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(270)
inline float Word::_Global::PicasToPoints ( float Picas ) {
    float _result;
    HRESULT _hr = raw_PicasToPoints(Picas, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(271)
inline float Word::_Global::LinesToPoints ( float Lines ) {
    float _result;
    HRESULT _hr = raw_LinesToPoints(Lines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(272)
inline float Word::_Global::PointsToInches ( float Points ) {
    float _result;
    HRESULT _hr = raw_PointsToInches(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(273)
inline float Word::_Global::PointsToCentimeters ( float Points ) {
    float _result;
    HRESULT _hr = raw_PointsToCentimeters(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(274)
inline float Word::_Global::PointsToMillimeters ( float Points ) {
    float _result;
    HRESULT _hr = raw_PointsToMillimeters(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(275)
inline float Word::_Global::PointsToPicas ( float Points ) {
    float _result;
    HRESULT _hr = raw_PointsToPicas(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(276)
inline float Word::_Global::PointsToLines ( float Points ) {
    float _result;
    HRESULT _hr = raw_PointsToLines(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(277)
inline float Word::_Global::PointsToPixels ( float Points, VARIANT * fVertical ) {
    float _result;
    HRESULT _hr = raw_PointsToPixels(Points, fVertical, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(278)
inline float Word::_Global::PixelsToPoints ( float Pixels, VARIANT * fVertical ) {
    float _result;
    HRESULT _hr = raw_PixelsToPoints(Pixels, fVertical, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline Office::LanguageSettingsPtr Word::_Global::GetLanguageSettings ( ) {
    struct Office::LanguageSettings * _result;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::LanguageSettingsPtr(_result, false);
}

#pragma implementation_key(280)
inline Office::AnswerWizardPtr Word::_Global::GetAnswerWizard ( ) {
    struct Office::AnswerWizard * _result;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AnswerWizardPtr(_result, false);
}

#pragma implementation_key(281)
inline Word::AutoCorrectPtr Word::_Global::GetAutoCorrectEmail ( ) {
    struct AutoCorrect * _result;
    HRESULT _hr = get_AutoCorrectEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectPtr(_result, false);
}

//
// interface FontNames wrapper method implementations
//

#pragma implementation_key(282)
inline IUnknownPtr Word::FontNames::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(283)
inline long Word::FontNames::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(284)
inline Word::_ApplicationPtr Word::FontNames::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(285)
inline long Word::FontNames::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(286)
inline IDispatchPtr Word::FontNames::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(287)
inline _bstr_t Word::FontNames::Item ( long Index ) {
    BSTR _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Languages wrapper method implementations
//

#pragma implementation_key(288)
inline IUnknownPtr Word::Languages::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(289)
inline long Word::Languages::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(290)
inline Word::_ApplicationPtr Word::Languages::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(291)
inline long Word::Languages::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(292)
inline IDispatchPtr Word::Languages::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(293)
inline Word::LanguagePtr Word::Languages::Item ( VARIANT * Index ) {
    struct Language * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LanguagePtr(_result, false);
}

//
// interface Language wrapper method implementations
//

#pragma implementation_key(294)
inline Word::_ApplicationPtr Word::Language::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(295)
inline long Word::Language::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(296)
inline IDispatchPtr Word::Language::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(297)
inline enum WdLanguageID Word::Language::GetID ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline _bstr_t Word::Language::GetNameLocal ( ) {
    BSTR _result;
    HRESULT _hr = get_NameLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(299)
inline _bstr_t Word::Language::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(300)
inline Word::DictionaryPtr Word::Language::GetActiveGrammarDictionary ( ) {
    struct Dictionary * _result;
    HRESULT _hr = get_ActiveGrammarDictionary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionaryPtr(_result, false);
}

#pragma implementation_key(301)
inline Word::DictionaryPtr Word::Language::GetActiveHyphenationDictionary ( ) {
    struct Dictionary * _result;
    HRESULT _hr = get_ActiveHyphenationDictionary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionaryPtr(_result, false);
}

#pragma implementation_key(302)
inline Word::DictionaryPtr Word::Language::GetActiveSpellingDictionary ( ) {
    struct Dictionary * _result;
    HRESULT _hr = get_ActiveSpellingDictionary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionaryPtr(_result, false);
}

#pragma implementation_key(303)
inline Word::DictionaryPtr Word::Language::GetActiveThesaurusDictionary ( ) {
    struct Dictionary * _result;
    HRESULT _hr = get_ActiveThesaurusDictionary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionaryPtr(_result, false);
}

#pragma implementation_key(304)
inline _bstr_t Word::Language::GetDefaultWritingStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_DefaultWritingStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(305)
inline void Word::Language::PutDefaultWritingStyle ( _bstr_t prop ) {
    HRESULT _hr = put_DefaultWritingStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(306)
inline _variant_t Word::Language::GetWritingStyleList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_WritingStyleList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(307)
inline enum WdDictionaryType Word::Language::GetSpellingDictionaryType ( ) {
    enum WdDictionaryType _result;
    HRESULT _hr = get_SpellingDictionaryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(308)
inline void Word::Language::PutSpellingDictionaryType ( enum WdDictionaryType prop ) {
    HRESULT _hr = put_SpellingDictionaryType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Documents wrapper method implementations
//

#pragma implementation_key(309)
inline IUnknownPtr Word::Documents::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(310)
inline long Word::Documents::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(311)
inline Word::_ApplicationPtr Word::Documents::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(312)
inline long Word::Documents::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(313)
inline IDispatchPtr Word::Documents::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(314)
inline Word::_DocumentPtr Word::Documents::Item ( VARIANT * Index ) {
    struct _Document * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(315)
inline HRESULT Word::Documents::Close ( VARIANT * SaveChanges, VARIANT * OriginalFormat, VARIANT * RouteDocument ) {
    HRESULT _hr = raw_Close(SaveChanges, OriginalFormat, RouteDocument);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(316)
inline Word::_DocumentPtr Word::Documents::AddOld ( VARIANT * Template, VARIANT * NewTemplate ) {
    struct _Document * _result;
    HRESULT _hr = raw_AddOld(Template, NewTemplate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(317)
inline Word::_DocumentPtr Word::Documents::OpenOld ( VARIANT * FileName, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * AddToRecentFiles, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate, VARIANT * Format ) {
    struct _Document * _result;
    HRESULT _hr = raw_OpenOld(FileName, ConfirmConversions, ReadOnly, AddToRecentFiles, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(318)
inline HRESULT Word::Documents::Save ( VARIANT * NoPrompt, VARIANT * OriginalFormat ) {
    HRESULT _hr = raw_Save(NoPrompt, OriginalFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(319)
inline Word::_DocumentPtr Word::Documents::Add ( VARIANT * Template, VARIANT * NewTemplate, VARIANT * DocumentType, VARIANT * Visible ) {
    struct _Document * _result;
    HRESULT _hr = raw_Add(Template, NewTemplate, DocumentType, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(320)
inline Word::_DocumentPtr Word::Documents::Open2000 ( VARIANT * FileName, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * AddToRecentFiles, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate, VARIANT * Format, VARIANT * Encoding, VARIANT * Visible ) {
    struct _Document * _result;
    HRESULT _hr = raw_Open2000(FileName, ConfirmConversions, ReadOnly, AddToRecentFiles, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate, Format, Encoding, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(321)
inline HRESULT Word::Documents::CheckOut ( _bstr_t FileName ) {
    HRESULT _hr = raw_CheckOut(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(322)
inline VARIANT_BOOL Word::Documents::CanCheckOut ( _bstr_t FileName ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_CanCheckOut(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(323)
inline Word::_DocumentPtr Word::Documents::Open ( VARIANT * FileName, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * AddToRecentFiles, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate, VARIANT * Format, VARIANT * Encoding, VARIANT * Visible, VARIANT * OpenAndRepair, VARIANT * DocumentDirection, VARIANT * NoEncodingDialog ) {
    struct _Document * _result;
    HRESULT _hr = raw_Open(FileName, ConfirmConversions, ReadOnly, AddToRecentFiles, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate, Format, Encoding, Visible, OpenAndRepair, DocumentDirection, NoEncodingDialog, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

//
// interface _Document wrapper method implementations
//

#pragma implementation_key(324)
inline _bstr_t Word::_Document::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(325)
inline Word::_ApplicationPtr Word::_Document::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(326)
inline long Word::_Document::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(327)
inline IDispatchPtr Word::_Document::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(328)
inline IDispatchPtr Word::_Document::GetBuiltInDocumentProperties ( ) {
    IDispatch * _result;
    HRESULT _hr = get_BuiltInDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(329)
inline IDispatchPtr Word::_Document::GetCustomDocumentProperties ( ) {
    IDispatch * _result;
    HRESULT _hr = get_CustomDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(330)
inline _bstr_t Word::_Document::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(331)
inline Word::BookmarksPtr Word::_Document::GetBookmarks ( ) {
    struct Bookmarks * _result;
    HRESULT _hr = get_Bookmarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BookmarksPtr(_result, false);
}

#pragma implementation_key(332)
inline Word::TablesPtr Word::_Document::GetTables ( ) {
    struct Tables * _result;
    HRESULT _hr = get_Tables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablesPtr(_result, false);
}

#pragma implementation_key(333)
inline Word::FootnotesPtr Word::_Document::GetFootnotes ( ) {
    struct Footnotes * _result;
    HRESULT _hr = get_Footnotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FootnotesPtr(_result, false);
}

#pragma implementation_key(334)
inline Word::EndnotesPtr Word::_Document::GetEndnotes ( ) {
    struct Endnotes * _result;
    HRESULT _hr = get_Endnotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EndnotesPtr(_result, false);
}

#pragma implementation_key(335)
inline Word::CommentsPtr Word::_Document::GetComments ( ) {
    struct Comments * _result;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

#pragma implementation_key(336)
inline enum WdDocumentType Word::_Document::GetType ( ) {
    enum WdDocumentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline VARIANT_BOOL Word::_Document::GetAutoHyphenation ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoHyphenation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(338)
inline void Word::_Document::PutAutoHyphenation ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoHyphenation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(339)
inline VARIANT_BOOL Word::_Document::GetHyphenateCaps ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HyphenateCaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(340)
inline void Word::_Document::PutHyphenateCaps ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_HyphenateCaps(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(341)
inline long Word::_Document::GetHyphenationZone ( ) {
    long _result;
    HRESULT _hr = get_HyphenationZone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(342)
inline void Word::_Document::PutHyphenationZone ( long prop ) {
    HRESULT _hr = put_HyphenationZone(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(343)
inline long Word::_Document::GetConsecutiveHyphensLimit ( ) {
    long _result;
    HRESULT _hr = get_ConsecutiveHyphensLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(344)
inline void Word::_Document::PutConsecutiveHyphensLimit ( long prop ) {
    HRESULT _hr = put_ConsecutiveHyphensLimit(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(345)
inline Word::SectionsPtr Word::_Document::GetSections ( ) {
    struct Sections * _result;
    HRESULT _hr = get_Sections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SectionsPtr(_result, false);
}

#pragma implementation_key(346)
inline Word::ParagraphsPtr Word::_Document::GetParagraphs ( ) {
    struct Paragraphs * _result;
    HRESULT _hr = get_Paragraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphsPtr(_result, false);
}

#pragma implementation_key(347)
inline Word::WordsPtr Word::_Document::GetWords ( ) {
    struct Words * _result;
    HRESULT _hr = get_Words(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WordsPtr(_result, false);
}

#pragma implementation_key(348)
inline Word::SentencesPtr Word::_Document::GetSentences ( ) {
    struct Sentences * _result;
    HRESULT _hr = get_Sentences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SentencesPtr(_result, false);
}

#pragma implementation_key(349)
inline Word::CharactersPtr Word::_Document::GetCharacters ( ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(350)
inline Word::FieldsPtr Word::_Document::GetFields ( ) {
    struct Fields * _result;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldsPtr(_result, false);
}

#pragma implementation_key(351)
inline Word::FormFieldsPtr Word::_Document::GetFormFields ( ) {
    struct FormFields * _result;
    HRESULT _hr = get_FormFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormFieldsPtr(_result, false);
}

#pragma implementation_key(352)
inline Word::StylesPtr Word::_Document::GetStyles ( ) {
    struct Styles * _result;
    HRESULT _hr = get_Styles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylesPtr(_result, false);
}

#pragma implementation_key(353)
inline Word::FramesPtr Word::_Document::GetFrames ( ) {
    struct Frames * _result;
    HRESULT _hr = get_Frames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramesPtr(_result, false);
}

#pragma implementation_key(354)
inline Word::TablesOfFiguresPtr Word::_Document::GetTablesOfFigures ( ) {
    struct TablesOfFigures * _result;
    HRESULT _hr = get_TablesOfFigures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablesOfFiguresPtr(_result, false);
}

#pragma implementation_key(355)
inline Word::VariablesPtr Word::_Document::GetVariables ( ) {
    struct Variables * _result;
    HRESULT _hr = get_Variables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VariablesPtr(_result, false);
}

#pragma implementation_key(356)
inline Word::MailMergePtr Word::_Document::GetMailMerge ( ) {
    struct MailMerge * _result;
    HRESULT _hr = get_MailMerge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergePtr(_result, false);
}

#pragma implementation_key(357)
inline Word::EnvelopePtr Word::_Document::GetEnvelope ( ) {
    struct Envelope * _result;
    HRESULT _hr = get_Envelope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EnvelopePtr(_result, false);
}

#pragma implementation_key(358)
inline _bstr_t Word::_Document::GetFullName ( ) {
    BSTR _result;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(359)
inline Word::RevisionsPtr Word::_Document::GetRevisions ( ) {
    struct Revisions * _result;
    HRESULT _hr = get_Revisions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RevisionsPtr(_result, false);
}

#pragma implementation_key(360)
inline Word::TablesOfContentsPtr Word::_Document::GetTablesOfContents ( ) {
    struct TablesOfContents * _result;
    HRESULT _hr = get_TablesOfContents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablesOfContentsPtr(_result, false);
}

#pragma implementation_key(361)
inline Word::TablesOfAuthoritiesPtr Word::_Document::GetTablesOfAuthorities ( ) {
    struct TablesOfAuthorities * _result;
    HRESULT _hr = get_TablesOfAuthorities(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablesOfAuthoritiesPtr(_result, false);
}

#pragma implementation_key(362)
inline Word::PageSetupPtr Word::_Document::GetPageSetup ( ) {
    struct PageSetup * _result;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(363)
inline void Word::_Document::PutPageSetup ( struct PageSetup * prop ) {
    HRESULT _hr = put_PageSetup(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(364)
inline Word::WindowsPtr Word::_Document::GetWindows ( ) {
    struct Windows * _result;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowsPtr(_result, false);
}

#pragma implementation_key(365)
inline VARIANT_BOOL Word::_Document::GetHasRoutingSlip ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasRoutingSlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(366)
inline void Word::_Document::PutHasRoutingSlip ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_HasRoutingSlip(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(367)
inline Word::RoutingSlipPtr Word::_Document::GetRoutingSlip ( ) {
    struct RoutingSlip * _result;
    HRESULT _hr = get_RoutingSlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RoutingSlipPtr(_result, false);
}

#pragma implementation_key(368)
inline VARIANT_BOOL Word::_Document::GetRouted ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Routed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(369)
inline Word::TablesOfAuthoritiesCategoriesPtr Word::_Document::GetTablesOfAuthoritiesCategories ( ) {
    struct TablesOfAuthoritiesCategories * _result;
    HRESULT _hr = get_TablesOfAuthoritiesCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablesOfAuthoritiesCategoriesPtr(_result, false);
}

#pragma implementation_key(370)
inline Word::IndexesPtr Word::_Document::GetIndexes ( ) {
    struct Indexes * _result;
    HRESULT _hr = get_Indexes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IndexesPtr(_result, false);
}

#pragma implementation_key(371)
inline VARIANT_BOOL Word::_Document::GetSaved ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(372)
inline void Word::_Document::PutSaved ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Saved(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(373)
inline Word::RangePtr Word::_Document::GetContent ( ) {
    struct Range * _result;
    HRESULT _hr = get_Content(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(374)
inline Word::WindowPtr Word::_Document::GetActiveWindow ( ) {
    struct Window * _result;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(375)
inline enum WdDocumentKind Word::_Document::GetKind ( ) {
    enum WdDocumentKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(376)
inline void Word::_Document::PutKind ( enum WdDocumentKind prop ) {
    HRESULT _hr = put_Kind(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(377)
inline VARIANT_BOOL Word::_Document::GetReadOnly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(378)
inline Word::SubdocumentsPtr Word::_Document::GetSubdocuments ( ) {
    struct Subdocuments * _result;
    HRESULT _hr = get_Subdocuments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SubdocumentsPtr(_result, false);
}

#pragma implementation_key(379)
inline VARIANT_BOOL Word::_Document::GetIsMasterDocument ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsMasterDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(380)
inline float Word::_Document::GetDefaultTabStop ( ) {
    float _result;
    HRESULT _hr = get_DefaultTabStop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(381)
inline void Word::_Document::PutDefaultTabStop ( float prop ) {
    HRESULT _hr = put_DefaultTabStop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(382)
inline VARIANT_BOOL Word::_Document::GetEmbedTrueTypeFonts ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EmbedTrueTypeFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(383)
inline void Word::_Document::PutEmbedTrueTypeFonts ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_EmbedTrueTypeFonts(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(384)
inline VARIANT_BOOL Word::_Document::GetSaveFormsData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SaveFormsData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(385)
inline void Word::_Document::PutSaveFormsData ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SaveFormsData(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(386)
inline VARIANT_BOOL Word::_Document::GetReadOnlyRecommended ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReadOnlyRecommended(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(387)
inline void Word::_Document::PutReadOnlyRecommended ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ReadOnlyRecommended(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(388)
inline VARIANT_BOOL Word::_Document::GetSaveSubsetFonts ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SaveSubsetFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(389)
inline void Word::_Document::PutSaveSubsetFonts ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SaveSubsetFonts(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(390)
inline VARIANT_BOOL Word::_Document::GetCompatibility ( enum WdCompatibility Type ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Compatibility(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(391)
inline void Word::_Document::PutCompatibility ( enum WdCompatibility Type, VARIANT_BOOL prop ) {
    HRESULT _hr = put_Compatibility(Type, prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(392)
inline Word::StoryRangesPtr Word::_Document::GetStoryRanges ( ) {
    struct StoryRanges * _result;
    HRESULT _hr = get_StoryRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StoryRangesPtr(_result, false);
}

#pragma implementation_key(393)
inline Office::_CommandBarsPtr Word::_Document::GetCommandBars ( ) {
    struct Office::_CommandBars * _result;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(394)
inline VARIANT_BOOL Word::_Document::GetIsSubdocument ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsSubdocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(395)
inline long Word::_Document::GetSaveFormat ( ) {
    long _result;
    HRESULT _hr = get_SaveFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(396)
inline enum WdProtectionType Word::_Document::GetProtectionType ( ) {
    enum WdProtectionType _result;
    HRESULT _hr = get_ProtectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(397)
inline Word::HyperlinksPtr Word::_Document::GetHyperlinks ( ) {
    struct Hyperlinks * _result;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(398)
inline Word::ShapesPtr Word::_Document::GetShapes ( ) {
    struct Shapes * _result;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(399)
inline Word::ListTemplatesPtr Word::_Document::GetListTemplates ( ) {
    struct ListTemplates * _result;
    HRESULT _hr = get_ListTemplates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListTemplatesPtr(_result, false);
}

#pragma implementation_key(400)
inline Word::ListsPtr Word::_Document::GetLists ( ) {
    struct Lists * _result;
    HRESULT _hr = get_Lists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListsPtr(_result, false);
}

#pragma implementation_key(401)
inline VARIANT_BOOL Word::_Document::GetUpdateStylesOnOpen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UpdateStylesOnOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(402)
inline void Word::_Document::PutUpdateStylesOnOpen ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UpdateStylesOnOpen(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(403)
inline _variant_t Word::_Document::GetAttachedTemplate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AttachedTemplate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(404)
inline void Word::_Document::PutAttachedTemplate ( VARIANT * prop ) {
    HRESULT _hr = put_AttachedTemplate(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(405)
inline Word::InlineShapesPtr Word::_Document::GetInlineShapes ( ) {
    struct InlineShapes * _result;
    HRESULT _hr = get_InlineShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapesPtr(_result, false);
}

#pragma implementation_key(406)
inline Word::ShapePtr Word::_Document::GetBackground ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(407)
inline void Word::_Document::PutBackground ( struct Shape * prop ) {
    HRESULT _hr = put_Background(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(408)
inline VARIANT_BOOL Word::_Document::GetGrammarChecked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_GrammarChecked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(409)
inline void Word::_Document::PutGrammarChecked ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_GrammarChecked(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(410)
inline VARIANT_BOOL Word::_Document::GetSpellingChecked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SpellingChecked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(411)
inline void Word::_Document::PutSpellingChecked ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SpellingChecked(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(412)
inline VARIANT_BOOL Word::_Document::GetShowGrammaticalErrors ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowGrammaticalErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline void Word::_Document::PutShowGrammaticalErrors ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowGrammaticalErrors(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(414)
inline VARIANT_BOOL Word::_Document::GetShowSpellingErrors ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowSpellingErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline void Word::_Document::PutShowSpellingErrors ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowSpellingErrors(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline Word::VersionsPtr Word::_Document::GetVersions ( ) {
    struct Versions * _result;
    HRESULT _hr = get_Versions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VersionsPtr(_result, false);
}

#pragma implementation_key(417)
inline VARIANT_BOOL Word::_Document::GetShowSummary ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(418)
inline void Word::_Document::PutShowSummary ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowSummary(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(419)
inline enum WdSummaryMode Word::_Document::GetSummaryViewMode ( ) {
    enum WdSummaryMode _result;
    HRESULT _hr = get_SummaryViewMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(420)
inline void Word::_Document::PutSummaryViewMode ( enum WdSummaryMode prop ) {
    HRESULT _hr = put_SummaryViewMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(421)
inline long Word::_Document::GetSummaryLength ( ) {
    long _result;
    HRESULT _hr = get_SummaryLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(422)
inline void Word::_Document::PutSummaryLength ( long prop ) {
    HRESULT _hr = put_SummaryLength(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(423)
inline VARIANT_BOOL Word::_Document::GetPrintFractionalWidths ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintFractionalWidths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(424)
inline void Word::_Document::PutPrintFractionalWidths ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintFractionalWidths(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(425)
inline VARIANT_BOOL Word::_Document::GetPrintPostScriptOverText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintPostScriptOverText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(426)
inline void Word::_Document::PutPrintPostScriptOverText ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintPostScriptOverText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(427)
inline IDispatchPtr Word::_Document::GetContainer ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Container(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(428)
inline VARIANT_BOOL Word::_Document::GetPrintFormsData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintFormsData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(429)
inline void Word::_Document::PutPrintFormsData ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintFormsData(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(430)
inline Word::ListParagraphsPtr Word::_Document::GetListParagraphs ( ) {
    struct ListParagraphs * _result;
    HRESULT _hr = get_ListParagraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListParagraphsPtr(_result, false);
}

#pragma implementation_key(431)
inline void Word::_Document::PutPassword ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Password(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(432)
inline void Word::_Document::PutWritePassword ( _bstr_t _arg1 ) {
    HRESULT _hr = put_WritePassword(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(433)
inline VARIANT_BOOL Word::_Document::GetHasPassword ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline VARIANT_BOOL Word::_Document::GetWriteReserved ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WriteReserved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(435)
inline _bstr_t Word::_Document::GetActiveWritingStyle ( VARIANT * LanguageID ) {
    BSTR _result;
    HRESULT _hr = get_ActiveWritingStyle(LanguageID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(436)
inline void Word::_Document::PutActiveWritingStyle ( VARIANT * LanguageID, _bstr_t prop ) {
    HRESULT _hr = put_ActiveWritingStyle(LanguageID, prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(437)
inline VARIANT_BOOL Word::_Document::GetUserControl ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UserControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline void Word::_Document::PutUserControl ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UserControl(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(439)
inline VARIANT_BOOL Word::_Document::GetHasMailer ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasMailer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(440)
inline void Word::_Document::PutHasMailer ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_HasMailer(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(441)
inline Word::MailerPtr Word::_Document::GetMailer ( ) {
    struct Mailer * _result;
    HRESULT _hr = get_Mailer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailerPtr(_result, false);
}

#pragma implementation_key(442)
inline Word::ReadabilityStatisticsPtr Word::_Document::GetReadabilityStatistics ( ) {
    struct ReadabilityStatistics * _result;
    HRESULT _hr = get_ReadabilityStatistics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ReadabilityStatisticsPtr(_result, false);
}

#pragma implementation_key(443)
inline Word::ProofreadingErrorsPtr Word::_Document::GetGrammaticalErrors ( ) {
    struct ProofreadingErrors * _result;
    HRESULT _hr = get_GrammaticalErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProofreadingErrorsPtr(_result, false);
}

#pragma implementation_key(444)
inline Word::ProofreadingErrorsPtr Word::_Document::GetSpellingErrors ( ) {
    struct ProofreadingErrors * _result;
    HRESULT _hr = get_SpellingErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProofreadingErrorsPtr(_result, false);
}

#pragma implementation_key(445)
inline VBIDE::_VBProjectPtr Word::_Document::GetVBProject ( ) {
    struct VBIDE::_VBProject * _result;
    HRESULT _hr = get_VBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBIDE::_VBProjectPtr(_result, false);
}

#pragma implementation_key(446)
inline VARIANT_BOOL Word::_Document::GetFormsDesign ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FormsDesign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(447)
inline _bstr_t Word::_Document::Get_CodeName ( ) {
    BSTR _result;
    HRESULT _hr = get__CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(448)
inline void Word::_Document::Put_CodeName ( _bstr_t prop ) {
    HRESULT _hr = put__CodeName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(449)
inline _bstr_t Word::_Document::GetCodeName ( ) {
    BSTR _result;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(450)
inline VARIANT_BOOL Word::_Document::GetSnapToGrid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SnapToGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(451)
inline void Word::_Document::PutSnapToGrid ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SnapToGrid(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(452)
inline VARIANT_BOOL Word::_Document::GetSnapToShapes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SnapToShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(453)
inline void Word::_Document::PutSnapToShapes ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SnapToShapes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(454)
inline float Word::_Document::GetGridDistanceHorizontal ( ) {
    float _result;
    HRESULT _hr = get_GridDistanceHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(455)
inline void Word::_Document::PutGridDistanceHorizontal ( float prop ) {
    HRESULT _hr = put_GridDistanceHorizontal(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(456)
inline float Word::_Document::GetGridDistanceVertical ( ) {
    float _result;
    HRESULT _hr = get_GridDistanceVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(457)
inline void Word::_Document::PutGridDistanceVertical ( float prop ) {
    HRESULT _hr = put_GridDistanceVertical(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(458)
inline float Word::_Document::GetGridOriginHorizontal ( ) {
    float _result;
    HRESULT _hr = get_GridOriginHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(459)
inline void Word::_Document::PutGridOriginHorizontal ( float prop ) {
    HRESULT _hr = put_GridOriginHorizontal(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(460)
inline float Word::_Document::GetGridOriginVertical ( ) {
    float _result;
    HRESULT _hr = get_GridOriginVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(461)
inline void Word::_Document::PutGridOriginVertical ( float prop ) {
    HRESULT _hr = put_GridOriginVertical(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(462)
inline long Word::_Document::GetGridSpaceBetweenHorizontalLines ( ) {
    long _result;
    HRESULT _hr = get_GridSpaceBetweenHorizontalLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(463)
inline void Word::_Document::PutGridSpaceBetweenHorizontalLines ( long prop ) {
    HRESULT _hr = put_GridSpaceBetweenHorizontalLines(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(464)
inline long Word::_Document::GetGridSpaceBetweenVerticalLines ( ) {
    long _result;
    HRESULT _hr = get_GridSpaceBetweenVerticalLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(465)
inline void Word::_Document::PutGridSpaceBetweenVerticalLines ( long prop ) {
    HRESULT _hr = put_GridSpaceBetweenVerticalLines(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(466)
inline VARIANT_BOOL Word::_Document::GetGridOriginFromMargin ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_GridOriginFromMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(467)
inline void Word::_Document::PutGridOriginFromMargin ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_GridOriginFromMargin(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(468)
inline VARIANT_BOOL Word::_Document::GetKerningByAlgorithm ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KerningByAlgorithm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(469)
inline void Word::_Document::PutKerningByAlgorithm ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_KerningByAlgorithm(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(470)
inline enum WdJustificationMode Word::_Document::GetJustificationMode ( ) {
    enum WdJustificationMode _result;
    HRESULT _hr = get_JustificationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(471)
inline void Word::_Document::PutJustificationMode ( enum WdJustificationMode prop ) {
    HRESULT _hr = put_JustificationMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(472)
inline enum WdFarEastLineBreakLevel Word::_Document::GetFarEastLineBreakLevel ( ) {
    enum WdFarEastLineBreakLevel _result;
    HRESULT _hr = get_FarEastLineBreakLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(473)
inline void Word::_Document::PutFarEastLineBreakLevel ( enum WdFarEastLineBreakLevel prop ) {
    HRESULT _hr = put_FarEastLineBreakLevel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(474)
inline _bstr_t Word::_Document::GetNoLineBreakBefore ( ) {
    BSTR _result;
    HRESULT _hr = get_NoLineBreakBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(475)
inline void Word::_Document::PutNoLineBreakBefore ( _bstr_t prop ) {
    HRESULT _hr = put_NoLineBreakBefore(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(476)
inline _bstr_t Word::_Document::GetNoLineBreakAfter ( ) {
    BSTR _result;
    HRESULT _hr = get_NoLineBreakAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(477)
inline void Word::_Document::PutNoLineBreakAfter ( _bstr_t prop ) {
    HRESULT _hr = put_NoLineBreakAfter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(478)
inline VARIANT_BOOL Word::_Document::GetTrackRevisions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TrackRevisions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(479)
inline void Word::_Document::PutTrackRevisions ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_TrackRevisions(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(480)
inline VARIANT_BOOL Word::_Document::GetPrintRevisions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintRevisions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(481)
inline void Word::_Document::PutPrintRevisions ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintRevisions(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(482)
inline VARIANT_BOOL Word::_Document::GetShowRevisions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowRevisions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(483)
inline void Word::_Document::PutShowRevisions ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowRevisions(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(484)
inline HRESULT Word::_Document::Close ( VARIANT * SaveChanges, VARIANT * OriginalFormat, VARIANT * RouteDocument ) {
    HRESULT _hr = raw_Close(SaveChanges, OriginalFormat, RouteDocument);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(485)
inline HRESULT Word::_Document::SaveAs2000 ( VARIANT * FileName, VARIANT * FileFormat, VARIANT * LockComments, VARIANT * Password, VARIANT * AddToRecentFiles, VARIANT * WritePassword, VARIANT * ReadOnlyRecommended, VARIANT * EmbedTrueTypeFonts, VARIANT * SaveNativePictureFormat, VARIANT * SaveFormsData, VARIANT * SaveAsAOCELetter ) {
    HRESULT _hr = raw_SaveAs2000(FileName, FileFormat, LockComments, Password, AddToRecentFiles, WritePassword, ReadOnlyRecommended, EmbedTrueTypeFonts, SaveNativePictureFormat, SaveFormsData, SaveAsAOCELetter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(486)
inline HRESULT Word::_Document::Repaginate ( ) {
    HRESULT _hr = raw_Repaginate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(487)
inline HRESULT Word::_Document::FitToPages ( ) {
    HRESULT _hr = raw_FitToPages();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(488)
inline HRESULT Word::_Document::ManualHyphenation ( ) {
    HRESULT _hr = raw_ManualHyphenation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(489)
inline HRESULT Word::_Document::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(490)
inline HRESULT Word::_Document::DataForm ( ) {
    HRESULT _hr = raw_DataForm();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(491)
inline HRESULT Word::_Document::Route ( ) {
    HRESULT _hr = raw_Route();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(492)
inline HRESULT Word::_Document::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(493)
inline HRESULT Word::_Document::PrintOutOld ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint ) {
    HRESULT _hr = raw_PrintOutOld(Background, Append, Range, OutputFileName, From, To, Item, Copies, Pages, PageType, PrintToFile, Collate, ActivePrinterMacGX, ManualDuplexPrint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(494)
inline HRESULT Word::_Document::SendMail ( ) {
    HRESULT _hr = raw_SendMail();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(495)
inline Word::RangePtr Word::_Document::Range ( VARIANT * Start, VARIANT * End ) {
    struct Range * _result;
    HRESULT _hr = raw_Range(Start, End, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(496)
inline HRESULT Word::_Document::RunAutoMacro ( enum WdAutoMacros Which ) {
    HRESULT _hr = raw_RunAutoMacro(Which);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(497)
inline HRESULT Word::_Document::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(498)
inline HRESULT Word::_Document::PrintPreview ( ) {
    HRESULT _hr = raw_PrintPreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(499)
inline Word::RangePtr Word::_Document::GoTo ( VARIANT * What, VARIANT * Which, VARIANT * Count, VARIANT * Name ) {
    struct Range * _result;
    HRESULT _hr = raw_GoTo(What, Which, Count, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(500)
inline VARIANT_BOOL Word::_Document::Undo ( VARIANT * Times ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Undo(Times, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(501)
inline VARIANT_BOOL Word::_Document::Redo ( VARIANT * Times ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Redo(Times, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(502)
inline long Word::_Document::ComputeStatistics ( enum WdStatistic Statistic, VARIANT * IncludeFootnotesAndEndnotes ) {
    long _result;
    HRESULT _hr = raw_ComputeStatistics(Statistic, IncludeFootnotesAndEndnotes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(503)
inline HRESULT Word::_Document::MakeCompatibilityDefault ( ) {
    HRESULT _hr = raw_MakeCompatibilityDefault();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(504)
inline HRESULT Word::_Document::Protect ( enum WdProtectionType Type, VARIANT * NoReset, VARIANT * Password ) {
    HRESULT _hr = raw_Protect(Type, NoReset, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(505)
inline HRESULT Word::_Document::Unprotect ( VARIANT * Password ) {
    HRESULT _hr = raw_Unprotect(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(506)
inline HRESULT Word::_Document::EditionOptions ( enum WdEditionType Type, enum WdEditionOption Option, _bstr_t Name, VARIANT * Format ) {
    HRESULT _hr = raw_EditionOptions(Type, Option, Name, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(507)
inline HRESULT Word::_Document::RunLetterWizard ( VARIANT * LetterContent, VARIANT * WizardMode ) {
    HRESULT _hr = raw_RunLetterWizard(LetterContent, WizardMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(508)
inline Word::_LetterContentPtr Word::_Document::GetLetterContent ( ) {
    struct _LetterContent * _result;
    HRESULT _hr = raw_GetLetterContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _LetterContentPtr(_result, false);
}

#pragma implementation_key(509)
inline HRESULT Word::_Document::SetLetterContent ( VARIANT * LetterContent ) {
    HRESULT _hr = raw_SetLetterContent(LetterContent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(510)
inline HRESULT Word::_Document::CopyStylesFromTemplate ( _bstr_t Template ) {
    HRESULT _hr = raw_CopyStylesFromTemplate(Template);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(511)
inline HRESULT Word::_Document::UpdateStyles ( ) {
    HRESULT _hr = raw_UpdateStyles();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(512)
inline HRESULT Word::_Document::CheckGrammar ( ) {
    HRESULT _hr = raw_CheckGrammar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(513)
inline HRESULT Word::_Document::CheckSpelling ( VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * AlwaysSuggest, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 ) {
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, CustomDictionary2, CustomDictionary3, CustomDictionary4, CustomDictionary5, CustomDictionary6, CustomDictionary7, CustomDictionary8, CustomDictionary9, CustomDictionary10);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(514)
inline HRESULT Word::_Document::FollowHyperlink ( VARIANT * Address, VARIANT * SubAddress, VARIANT * NewWindow, VARIANT * AddHistory, VARIANT * ExtraInfo, VARIANT * Method, VARIANT * HeaderInfo ) {
    HRESULT _hr = raw_FollowHyperlink(Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(515)
inline HRESULT Word::_Document::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(516)
inline HRESULT Word::_Document::Reload ( ) {
    HRESULT _hr = raw_Reload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(517)
inline Word::RangePtr Word::_Document::AutoSummarize ( VARIANT * Length, VARIANT * Mode, VARIANT * UpdateProperties ) {
    struct Range * _result;
    HRESULT _hr = raw_AutoSummarize(Length, Mode, UpdateProperties, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(518)
inline HRESULT Word::_Document::RemoveNumbers ( VARIANT * NumberType ) {
    HRESULT _hr = raw_RemoveNumbers(NumberType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(519)
inline HRESULT Word::_Document::ConvertNumbersToText ( VARIANT * NumberType ) {
    HRESULT _hr = raw_ConvertNumbersToText(NumberType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(520)
inline long Word::_Document::CountNumberedItems ( VARIANT * NumberType, VARIANT * Level ) {
    long _result;
    HRESULT _hr = raw_CountNumberedItems(NumberType, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(521)
inline HRESULT Word::_Document::Post ( ) {
    HRESULT _hr = raw_Post();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(522)
inline HRESULT Word::_Document::ToggleFormsDesign ( ) {
    HRESULT _hr = raw_ToggleFormsDesign();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(523)
inline HRESULT Word::_Document::Compare2000 ( _bstr_t Name ) {
    HRESULT _hr = raw_Compare2000(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(524)
inline HRESULT Word::_Document::UpdateSummaryProperties ( ) {
    HRESULT _hr = raw_UpdateSummaryProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(525)
inline _variant_t Word::_Document::GetCrossReferenceItems ( VARIANT * ReferenceType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCrossReferenceItems(ReferenceType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(526)
inline HRESULT Word::_Document::AutoFormat ( ) {
    HRESULT _hr = raw_AutoFormat();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(527)
inline HRESULT Word::_Document::ViewCode ( ) {
    HRESULT _hr = raw_ViewCode();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(528)
inline HRESULT Word::_Document::ViewPropertyBrowser ( ) {
    HRESULT _hr = raw_ViewPropertyBrowser();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(529)
inline HRESULT Word::_Document::ForwardMailer ( ) {
    HRESULT _hr = raw_ForwardMailer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(530)
inline HRESULT Word::_Document::Reply ( ) {
    HRESULT _hr = raw_Reply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(531)
inline HRESULT Word::_Document::ReplyAll ( ) {
    HRESULT _hr = raw_ReplyAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(532)
inline HRESULT Word::_Document::SendMailer ( VARIANT * FileFormat, VARIANT * Priority ) {
    HRESULT _hr = raw_SendMailer(FileFormat, Priority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(533)
inline HRESULT Word::_Document::UndoClear ( ) {
    HRESULT _hr = raw_UndoClear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(534)
inline HRESULT Word::_Document::PresentIt ( ) {
    HRESULT _hr = raw_PresentIt();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(535)
inline HRESULT Word::_Document::SendFax ( _bstr_t Address, VARIANT * Subject ) {
    HRESULT _hr = raw_SendFax(Address, Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(536)
inline HRESULT Word::_Document::Merge2000 ( _bstr_t FileName ) {
    HRESULT _hr = raw_Merge2000(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(537)
inline HRESULT Word::_Document::ClosePrintPreview ( ) {
    HRESULT _hr = raw_ClosePrintPreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(538)
inline HRESULT Word::_Document::CheckConsistency ( ) {
    HRESULT _hr = raw_CheckConsistency();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(539)
inline Word::_LetterContentPtr Word::_Document::CreateLetterContent ( _bstr_t DateFormat, VARIANT_BOOL IncludeHeaderFooter, _bstr_t PageDesign, enum WdLetterStyle LetterStyle, VARIANT_BOOL Letterhead, enum WdLetterheadLocation LetterheadLocation, float LetterheadSize, _bstr_t RecipientName, _bstr_t RecipientAddress, _bstr_t Salutation, enum WdSalutationType SalutationType, _bstr_t RecipientReference, _bstr_t MailingInstructions, _bstr_t AttentionLine, _bstr_t Subject, _bstr_t CCList, _bstr_t ReturnAddress, _bstr_t SenderName, _bstr_t Closing, _bstr_t SenderCompany, _bstr_t SenderJobTitle, _bstr_t SenderInitials, long EnclosureNumber, VARIANT * InfoBlock, VARIANT * RecipientCode, VARIANT * RecipientGender, VARIANT * ReturnAddressShortForm, VARIANT * SenderCity, VARIANT * SenderCode, VARIANT * SenderGender, VARIANT * SenderReference ) {
    struct _LetterContent * _result;
    HRESULT _hr = raw_CreateLetterContent(DateFormat, IncludeHeaderFooter, PageDesign, LetterStyle, Letterhead, LetterheadLocation, LetterheadSize, RecipientName, RecipientAddress, Salutation, SalutationType, RecipientReference, MailingInstructions, AttentionLine, Subject, CCList, ReturnAddress, SenderName, Closing, SenderCompany, SenderJobTitle, SenderInitials, EnclosureNumber, InfoBlock, RecipientCode, RecipientGender, ReturnAddressShortForm, SenderCity, SenderCode, SenderGender, SenderReference, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _LetterContentPtr(_result, false);
}

#pragma implementation_key(540)
inline HRESULT Word::_Document::AcceptAllRevisions ( ) {
    HRESULT _hr = raw_AcceptAllRevisions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(541)
inline HRESULT Word::_Document::RejectAllRevisions ( ) {
    HRESULT _hr = raw_RejectAllRevisions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(542)
inline HRESULT Word::_Document::DetectLanguage ( ) {
    HRESULT _hr = raw_DetectLanguage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(543)
inline HRESULT Word::_Document::ApplyTheme ( _bstr_t Name ) {
    HRESULT _hr = raw_ApplyTheme(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(544)
inline HRESULT Word::_Document::RemoveTheme ( ) {
    HRESULT _hr = raw_RemoveTheme();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(545)
inline HRESULT Word::_Document::WebPagePreview ( ) {
    HRESULT _hr = raw_WebPagePreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(546)
inline HRESULT Word::_Document::ReloadAs ( enum Office::MsoEncoding Encoding ) {
    HRESULT _hr = raw_ReloadAs(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(547)
inline _bstr_t Word::_Document::GetActiveTheme ( ) {
    BSTR _result;
    HRESULT _hr = get_ActiveTheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(548)
inline _bstr_t Word::_Document::GetActiveThemeDisplayName ( ) {
    BSTR _result;
    HRESULT _hr = get_ActiveThemeDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(549)
inline Word::EmailPtr Word::_Document::GetEmail ( ) {
    struct Email * _result;
    HRESULT _hr = get_Email(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EmailPtr(_result, false);
}

#pragma implementation_key(550)
inline Office::ScriptsPtr Word::_Document::GetScripts ( ) {
    struct Office::Scripts * _result;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

#pragma implementation_key(551)
inline VARIANT_BOOL Word::_Document::GetLanguageDetected ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LanguageDetected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(552)
inline void Word::_Document::PutLanguageDetected ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_LanguageDetected(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(553)
inline enum WdFarEastLineBreakLanguageID Word::_Document::GetFarEastLineBreakLanguage ( ) {
    enum WdFarEastLineBreakLanguageID _result;
    HRESULT _hr = get_FarEastLineBreakLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(554)
inline void Word::_Document::PutFarEastLineBreakLanguage ( enum WdFarEastLineBreakLanguageID prop ) {
    HRESULT _hr = put_FarEastLineBreakLanguage(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(555)
inline Word::FramesetPtr Word::_Document::GetFrameset ( ) {
    struct Frameset * _result;
    HRESULT _hr = get_Frameset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramesetPtr(_result, false);
}

#pragma implementation_key(556)
inline _variant_t Word::_Document::GetClickAndTypeParagraphStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ClickAndTypeParagraphStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(557)
inline void Word::_Document::PutClickAndTypeParagraphStyle ( VARIANT * prop ) {
    HRESULT _hr = put_ClickAndTypeParagraphStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(558)
inline Office::HTMLProjectPtr Word::_Document::GetHTMLProject ( ) {
    struct Office::HTMLProject * _result;
    HRESULT _hr = get_HTMLProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::HTMLProjectPtr(_result, false);
}

#pragma implementation_key(559)
inline Word::WebOptionsPtr Word::_Document::GetWebOptions ( ) {
    struct WebOptions * _result;
    HRESULT _hr = get_WebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebOptionsPtr(_result, false);
}

#pragma implementation_key(560)
inline enum Office::MsoEncoding Word::_Document::GetOpenEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_OpenEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(561)
inline enum Office::MsoEncoding Word::_Document::GetSaveEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_SaveEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(562)
inline void Word::_Document::PutSaveEncoding ( enum Office::MsoEncoding prop ) {
    HRESULT _hr = put_SaveEncoding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(563)
inline VARIANT_BOOL Word::_Document::GetOptimizeForWord97 ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OptimizeForWord97(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(564)
inline void Word::_Document::PutOptimizeForWord97 ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_OptimizeForWord97(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(565)
inline VARIANT_BOOL Word::_Document::GetVBASigned ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_VBASigned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(566)
inline HRESULT Word::_Document::PrintOut2000 ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint, VARIANT * PrintZoomColumn, VARIANT * PrintZoomRow, VARIANT * PrintZoomPaperWidth, VARIANT * PrintZoomPaperHeight ) {
    HRESULT _hr = raw_PrintOut2000(Background, Append, Range, OutputFileName, From, To, Item, Copies, Pages, PageType, PrintToFile, Collate, ActivePrinterMacGX, ManualDuplexPrint, PrintZoomColumn, PrintZoomRow, PrintZoomPaperWidth, PrintZoomPaperHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(567)
inline HRESULT Word::_Document::sblt ( _bstr_t s ) {
    HRESULT _hr = raw_sblt(s);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(568)
inline HRESULT Word::_Document::ConvertVietDoc ( long CodePageOrigin ) {
    HRESULT _hr = raw_ConvertVietDoc(CodePageOrigin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(569)
inline HRESULT Word::_Document::PrintOut ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint, VARIANT * PrintZoomColumn, VARIANT * PrintZoomRow, VARIANT * PrintZoomPaperWidth, VARIANT * PrintZoomPaperHeight ) {
    HRESULT _hr = raw_PrintOut(Background, Append, Range, OutputFileName, From, To, Item, Copies, Pages, PageType, PrintToFile, Collate, ActivePrinterMacGX, ManualDuplexPrint, PrintZoomColumn, PrintZoomRow, PrintZoomPaperWidth, PrintZoomPaperHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(570)
inline Office::IMsoEnvelopeVBPtr Word::_Document::GetMailEnvelope ( ) {
    struct Office::IMsoEnvelopeVB * _result;
    HRESULT _hr = get_MailEnvelope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IMsoEnvelopeVBPtr(_result, false);
}

#pragma implementation_key(571)
inline VARIANT_BOOL Word::_Document::GetDisableFeatures ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisableFeatures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(572)
inline void Word::_Document::PutDisableFeatures ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisableFeatures(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(573)
inline VARIANT_BOOL Word::_Document::GetDoNotEmbedSystemFonts ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DoNotEmbedSystemFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(574)
inline void Word::_Document::PutDoNotEmbedSystemFonts ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DoNotEmbedSystemFonts(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(575)
inline Office::SignatureSetPtr Word::_Document::GetSignatures ( ) {
    struct Office::SignatureSet * _result;
    HRESULT _hr = get_Signatures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::SignatureSetPtr(_result, false);
}

#pragma implementation_key(576)
inline _bstr_t Word::_Document::GetDefaultTargetFrame ( ) {
    BSTR _result;
    HRESULT _hr = get_DefaultTargetFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(577)
inline void Word::_Document::PutDefaultTargetFrame ( _bstr_t prop ) {
    HRESULT _hr = put_DefaultTargetFrame(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(578)
inline Word::HTMLDivisionsPtr Word::_Document::GetHTMLDivisions ( ) {
    struct HTMLDivisions * _result;
    HRESULT _hr = get_HTMLDivisions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLDivisionsPtr(_result, false);
}

#pragma implementation_key(579)
inline enum WdDisableFeaturesIntroducedAfter Word::_Document::GetDisableFeaturesIntroducedAfter ( ) {
    enum WdDisableFeaturesIntroducedAfter _result;
    HRESULT _hr = get_DisableFeaturesIntroducedAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(580)
inline void Word::_Document::PutDisableFeaturesIntroducedAfter ( enum WdDisableFeaturesIntroducedAfter prop ) {
    HRESULT _hr = put_DisableFeaturesIntroducedAfter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(581)
inline VARIANT_BOOL Word::_Document::GetRemovePersonalInformation ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RemovePersonalInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(582)
inline void Word::_Document::PutRemovePersonalInformation ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_RemovePersonalInformation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(583)
inline Word::SmartTagsPtr Word::_Document::GetSmartTags ( ) {
    struct SmartTags * _result;
    HRESULT _hr = get_SmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagsPtr(_result, false);
}

#pragma implementation_key(584)
inline HRESULT Word::_Document::Compare ( _bstr_t Name, VARIANT * AuthorName, VARIANT * CompareTarget, VARIANT * DetectFormatChanges, VARIANT * IgnoreAllComparisonWarnings, VARIANT * AddToRecentFiles ) {
    HRESULT _hr = raw_Compare(Name, AuthorName, CompareTarget, DetectFormatChanges, IgnoreAllComparisonWarnings, AddToRecentFiles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(585)
inline HRESULT Word::_Document::CheckIn ( VARIANT_BOOL SaveChanges, VARIANT * Comments, VARIANT_BOOL MakePublic ) {
    HRESULT _hr = raw_CheckIn(SaveChanges, Comments, MakePublic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(586)
inline VARIANT_BOOL Word::_Document::CanCheckin ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_CanCheckin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(587)
inline HRESULT Word::_Document::Merge ( _bstr_t FileName, VARIANT * MergeTarget, VARIANT * DetectFormatChanges, VARIANT * UseFormattingFrom, VARIANT * AddToRecentFiles ) {
    HRESULT _hr = raw_Merge(FileName, MergeTarget, DetectFormatChanges, UseFormattingFrom, AddToRecentFiles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(588)
inline VARIANT_BOOL Word::_Document::GetEmbedSmartTags ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EmbedSmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(589)
inline void Word::_Document::PutEmbedSmartTags ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_EmbedSmartTags(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(590)
inline VARIANT_BOOL Word::_Document::GetSmartTagsAsXMLProps ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SmartTagsAsXMLProps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(591)
inline void Word::_Document::PutSmartTagsAsXMLProps ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SmartTagsAsXMLProps(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(592)
inline enum Office::MsoEncoding Word::_Document::GetTextEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_TextEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(593)
inline void Word::_Document::PutTextEncoding ( enum Office::MsoEncoding prop ) {
    HRESULT _hr = put_TextEncoding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(594)
inline enum WdLineEndingType Word::_Document::GetTextLineEnding ( ) {
    enum WdLineEndingType _result;
    HRESULT _hr = get_TextLineEnding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(595)
inline void Word::_Document::PutTextLineEnding ( enum WdLineEndingType prop ) {
    HRESULT _hr = put_TextLineEnding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(596)
inline HRESULT Word::_Document::SendForReview ( VARIANT * Recipients, VARIANT * Subject, VARIANT * ShowMessage, VARIANT * IncludeAttachment ) {
    HRESULT _hr = raw_SendForReview(Recipients, Subject, ShowMessage, IncludeAttachment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(597)
inline HRESULT Word::_Document::ReplyWithChanges ( VARIANT * ShowMessage ) {
    HRESULT _hr = raw_ReplyWithChanges(ShowMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(598)
inline HRESULT Word::_Document::EndReview ( ) {
    HRESULT _hr = raw_EndReview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(599)
inline Word::StyleSheetsPtr Word::_Document::GetStyleSheets ( ) {
    struct StyleSheets * _result;
    HRESULT _hr = get_StyleSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StyleSheetsPtr(_result, false);
}

#pragma implementation_key(600)
inline _variant_t Word::_Document::GetDefaultTableStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultTableStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(601)
inline _bstr_t Word::_Document::GetPasswordEncryptionProvider ( ) {
    BSTR _result;
    HRESULT _hr = get_PasswordEncryptionProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(602)
inline _bstr_t Word::_Document::GetPasswordEncryptionAlgorithm ( ) {
    BSTR _result;
    HRESULT _hr = get_PasswordEncryptionAlgorithm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(603)
inline long Word::_Document::GetPasswordEncryptionKeyLength ( ) {
    long _result;
    HRESULT _hr = get_PasswordEncryptionKeyLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(604)
inline VARIANT_BOOL Word::_Document::GetPasswordEncryptionFileProperties ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PasswordEncryptionFileProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(605)
inline HRESULT Word::_Document::SetPasswordEncryptionOptions ( _bstr_t PasswordEncryptionProvider, _bstr_t PasswordEncryptionAlgorithm, long PasswordEncryptionKeyLength, VARIANT * PasswordEncryptionFileProperties ) {
    HRESULT _hr = raw_SetPasswordEncryptionOptions(PasswordEncryptionProvider, PasswordEncryptionAlgorithm, PasswordEncryptionKeyLength, PasswordEncryptionFileProperties);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(606)
inline HRESULT Word::_Document::RecheckSmartTags ( ) {
    HRESULT _hr = raw_RecheckSmartTags();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(607)
inline HRESULT Word::_Document::RemoveSmartTags ( ) {
    HRESULT _hr = raw_RemoveSmartTags();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(608)
inline HRESULT Word::_Document::SetDefaultTableStyle ( VARIANT * Style, VARIANT_BOOL SetInTemplate ) {
    HRESULT _hr = raw_SetDefaultTableStyle(Style, SetInTemplate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(609)
inline HRESULT Word::_Document::DeleteAllComments ( ) {
    HRESULT _hr = raw_DeleteAllComments();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(610)
inline HRESULT Word::_Document::AcceptAllRevisionsShown ( ) {
    HRESULT _hr = raw_AcceptAllRevisionsShown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(611)
inline HRESULT Word::_Document::RejectAllRevisionsShown ( ) {
    HRESULT _hr = raw_RejectAllRevisionsShown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(612)
inline HRESULT Word::_Document::DeleteAllCommentsShown ( ) {
    HRESULT _hr = raw_DeleteAllCommentsShown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(613)
inline HRESULT Word::_Document::ResetFormFields ( ) {
    HRESULT _hr = raw_ResetFormFields();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(614)
inline HRESULT Word::_Document::SaveAs ( VARIANT * FileName, VARIANT * FileFormat, VARIANT * LockComments, VARIANT * Password, VARIANT * AddToRecentFiles, VARIANT * WritePassword, VARIANT * ReadOnlyRecommended, VARIANT * EmbedTrueTypeFonts, VARIANT * SaveNativePictureFormat, VARIANT * SaveFormsData, VARIANT * SaveAsAOCELetter, VARIANT * Encoding, VARIANT * InsertLineBreaks, VARIANT * AllowSubstitutions, VARIANT * LineEnding, VARIANT * AddBiDiMarks ) {
    HRESULT _hr = raw_SaveAs(FileName, FileFormat, LockComments, Password, AddToRecentFiles, WritePassword, ReadOnlyRecommended, EmbedTrueTypeFonts, SaveNativePictureFormat, SaveFormsData, SaveAsAOCELetter, Encoding, InsertLineBreaks, AllowSubstitutions, LineEnding, AddBiDiMarks);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(615)
inline VARIANT_BOOL Word::_Document::GetEmbedLinguisticData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EmbedLinguisticData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(616)
inline void Word::_Document::PutEmbedLinguisticData ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_EmbedLinguisticData(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(617)
inline VARIANT_BOOL Word::_Document::GetFormattingShowFont ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FormattingShowFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(618)
inline void Word::_Document::PutFormattingShowFont ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_FormattingShowFont(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(619)
inline VARIANT_BOOL Word::_Document::GetFormattingShowClear ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FormattingShowClear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(620)
inline void Word::_Document::PutFormattingShowClear ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_FormattingShowClear(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(621)
inline VARIANT_BOOL Word::_Document::GetFormattingShowParagraph ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FormattingShowParagraph(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(622)
inline void Word::_Document::PutFormattingShowParagraph ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_FormattingShowParagraph(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(623)
inline VARIANT_BOOL Word::_Document::GetFormattingShowNumbering ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FormattingShowNumbering(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(624)
inline void Word::_Document::PutFormattingShowNumbering ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_FormattingShowNumbering(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(625)
inline enum WdShowFilter Word::_Document::GetFormattingShowFilter ( ) {
    enum WdShowFilter _result;
    HRESULT _hr = get_FormattingShowFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(626)
inline void Word::_Document::PutFormattingShowFilter ( enum WdShowFilter prop ) {
    HRESULT _hr = put_FormattingShowFilter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(627)
inline HRESULT Word::_Document::CheckNewSmartTags ( ) {
    HRESULT _hr = raw_CheckNewSmartTags();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Template wrapper method implementations
//

#pragma implementation_key(628)
inline _bstr_t Word::Template::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(629)
inline Word::_ApplicationPtr Word::Template::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(630)
inline long Word::Template::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(631)
inline IDispatchPtr Word::Template::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(632)
inline _bstr_t Word::Template::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(633)
inline Word::AutoTextEntriesPtr Word::Template::GetAutoTextEntries ( ) {
    struct AutoTextEntries * _result;
    HRESULT _hr = get_AutoTextEntries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoTextEntriesPtr(_result, false);
}

#pragma implementation_key(634)
inline enum WdLanguageID Word::Template::GetLanguageID ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(635)
inline void Word::Template::PutLanguageID ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(636)
inline VARIANT_BOOL Word::Template::GetSaved ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(637)
inline void Word::Template::PutSaved ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Saved(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(638)
inline enum WdTemplateType Word::Template::GetType ( ) {
    enum WdTemplateType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(639)
inline _bstr_t Word::Template::GetFullName ( ) {
    BSTR _result;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(640)
inline IDispatchPtr Word::Template::GetBuiltInDocumentProperties ( ) {
    IDispatch * _result;
    HRESULT _hr = get_BuiltInDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(641)
inline IDispatchPtr Word::Template::GetCustomDocumentProperties ( ) {
    IDispatch * _result;
    HRESULT _hr = get_CustomDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(642)
inline Word::ListTemplatesPtr Word::Template::GetListTemplates ( ) {
    struct ListTemplates * _result;
    HRESULT _hr = get_ListTemplates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListTemplatesPtr(_result, false);
}

#pragma implementation_key(643)
inline enum WdLanguageID Word::Template::GetLanguageIDFarEast ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageIDFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(644)
inline void Word::Template::PutLanguageIDFarEast ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageIDFarEast(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(645)
inline VBIDE::_VBProjectPtr Word::Template::GetVBProject ( ) {
    struct VBIDE::_VBProject * _result;
    HRESULT _hr = get_VBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBIDE::_VBProjectPtr(_result, false);
}

#pragma implementation_key(646)
inline VARIANT_BOOL Word::Template::GetKerningByAlgorithm ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KerningByAlgorithm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(647)
inline void Word::Template::PutKerningByAlgorithm ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_KerningByAlgorithm(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(648)
inline enum WdJustificationMode Word::Template::GetJustificationMode ( ) {
    enum WdJustificationMode _result;
    HRESULT _hr = get_JustificationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(649)
inline void Word::Template::PutJustificationMode ( enum WdJustificationMode prop ) {
    HRESULT _hr = put_JustificationMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(650)
inline enum WdFarEastLineBreakLevel Word::Template::GetFarEastLineBreakLevel ( ) {
    enum WdFarEastLineBreakLevel _result;
    HRESULT _hr = get_FarEastLineBreakLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(651)
inline void Word::Template::PutFarEastLineBreakLevel ( enum WdFarEastLineBreakLevel prop ) {
    HRESULT _hr = put_FarEastLineBreakLevel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(652)
inline _bstr_t Word::Template::GetNoLineBreakBefore ( ) {
    BSTR _result;
    HRESULT _hr = get_NoLineBreakBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(653)
inline void Word::Template::PutNoLineBreakBefore ( _bstr_t prop ) {
    HRESULT _hr = put_NoLineBreakBefore(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(654)
inline _bstr_t Word::Template::GetNoLineBreakAfter ( ) {
    BSTR _result;
    HRESULT _hr = get_NoLineBreakAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(655)
inline void Word::Template::PutNoLineBreakAfter ( _bstr_t prop ) {
    HRESULT _hr = put_NoLineBreakAfter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(656)
inline Word::_DocumentPtr Word::Template::OpenAsDocument ( ) {
    struct _Document * _result;
    HRESULT _hr = raw_OpenAsDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(657)
inline HRESULT Word::Template::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(658)
inline long Word::Template::GetNoProofing ( ) {
    long _result;
    HRESULT _hr = get_NoProofing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(659)
inline void Word::Template::PutNoProofing ( long prop ) {
    HRESULT _hr = put_NoProofing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(660)
inline enum WdFarEastLineBreakLanguageID Word::Template::GetFarEastLineBreakLanguage ( ) {
    enum WdFarEastLineBreakLanguageID _result;
    HRESULT _hr = get_FarEastLineBreakLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(661)
inline void Word::Template::PutFarEastLineBreakLanguage ( enum WdFarEastLineBreakLanguageID prop ) {
    HRESULT _hr = put_FarEastLineBreakLanguage(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Templates wrapper method implementations
//

#pragma implementation_key(662)
inline Word::_ApplicationPtr Word::Templates::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(663)
inline long Word::Templates::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(664)
inline IDispatchPtr Word::Templates::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(665)
inline long Word::Templates::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(666)
inline IUnknownPtr Word::Templates::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(667)
inline Word::TemplatePtr Word::Templates::Item ( VARIANT * Index ) {
    struct Template * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TemplatePtr(_result, false);
}

//
// interface RoutingSlip wrapper method implementations
//

#pragma implementation_key(668)
inline Word::_ApplicationPtr Word::RoutingSlip::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(669)
inline long Word::RoutingSlip::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(670)
inline IDispatchPtr Word::RoutingSlip::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(671)
inline _bstr_t Word::RoutingSlip::GetSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(672)
inline void Word::RoutingSlip::PutSubject ( _bstr_t prop ) {
    HRESULT _hr = put_Subject(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(673)
inline _bstr_t Word::RoutingSlip::GetMessage ( ) {
    BSTR _result;
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(674)
inline void Word::RoutingSlip::PutMessage ( _bstr_t prop ) {
    HRESULT _hr = put_Message(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(675)
inline enum WdRoutingSlipDelivery Word::RoutingSlip::GetDelivery ( ) {
    enum WdRoutingSlipDelivery _result;
    HRESULT _hr = get_Delivery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(676)
inline void Word::RoutingSlip::PutDelivery ( enum WdRoutingSlipDelivery prop ) {
    HRESULT _hr = put_Delivery(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(677)
inline VARIANT_BOOL Word::RoutingSlip::GetTrackStatus ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TrackStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(678)
inline void Word::RoutingSlip::PutTrackStatus ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_TrackStatus(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(679)
inline enum WdProtectionType Word::RoutingSlip::GetProtect ( ) {
    enum WdProtectionType _result;
    HRESULT _hr = get_Protect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(680)
inline void Word::RoutingSlip::PutProtect ( enum WdProtectionType prop ) {
    HRESULT _hr = put_Protect(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(681)
inline VARIANT_BOOL Word::RoutingSlip::GetReturnWhenDone ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReturnWhenDone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(682)
inline void Word::RoutingSlip::PutReturnWhenDone ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ReturnWhenDone(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(683)
inline enum WdRoutingSlipStatus Word::RoutingSlip::GetStatus ( ) {
    enum WdRoutingSlipStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(684)
inline _variant_t Word::RoutingSlip::GetRecipients ( VARIANT * Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Recipients(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(685)
inline HRESULT Word::RoutingSlip::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(686)
inline HRESULT Word::RoutingSlip::AddRecipient ( _bstr_t Recipient ) {
    HRESULT _hr = raw_AddRecipient(Recipient);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Bookmark wrapper method implementations
//

#pragma implementation_key(687)
inline _bstr_t Word::Bookmark::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(688)
inline Word::RangePtr Word::Bookmark::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(689)
inline VARIANT_BOOL Word::Bookmark::GetEmpty ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Empty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(690)
inline long Word::Bookmark::GetStart ( ) {
    long _result;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(691)
inline void Word::Bookmark::PutStart ( long prop ) {
    HRESULT _hr = put_Start(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(692)
inline long Word::Bookmark::GetEnd ( ) {
    long _result;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(693)
inline void Word::Bookmark::PutEnd ( long prop ) {
    HRESULT _hr = put_End(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(694)
inline VARIANT_BOOL Word::Bookmark::GetColumn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(695)
inline enum WdStoryType Word::Bookmark::GetStoryType ( ) {
    enum WdStoryType _result;
    HRESULT _hr = get_StoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(696)
inline Word::_ApplicationPtr Word::Bookmark::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(697)
inline long Word::Bookmark::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(698)
inline IDispatchPtr Word::Bookmark::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(699)
inline HRESULT Word::Bookmark::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(700)
inline HRESULT Word::Bookmark::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(701)
inline Word::BookmarkPtr Word::Bookmark::Copy ( _bstr_t Name ) {
    struct Bookmark * _result;
    HRESULT _hr = raw_Copy(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BookmarkPtr(_result, false);
}

//
// interface Bookmarks wrapper method implementations
//

#pragma implementation_key(702)
inline IUnknownPtr Word::Bookmarks::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(703)
inline long Word::Bookmarks::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(704)
inline enum WdBookmarkSortBy Word::Bookmarks::GetDefaultSorting ( ) {
    enum WdBookmarkSortBy _result;
    HRESULT _hr = get_DefaultSorting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(705)
inline void Word::Bookmarks::PutDefaultSorting ( enum WdBookmarkSortBy prop ) {
    HRESULT _hr = put_DefaultSorting(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(706)
inline VARIANT_BOOL Word::Bookmarks::GetShowHidden ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(707)
inline void Word::Bookmarks::PutShowHidden ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowHidden(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(708)
inline Word::_ApplicationPtr Word::Bookmarks::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(709)
inline long Word::Bookmarks::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(710)
inline IDispatchPtr Word::Bookmarks::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(711)
inline Word::BookmarkPtr Word::Bookmarks::Item ( VARIANT * Index ) {
    struct Bookmark * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BookmarkPtr(_result, false);
}

#pragma implementation_key(712)
inline Word::BookmarkPtr Word::Bookmarks::Add ( _bstr_t Name, VARIANT * Range ) {
    struct Bookmark * _result;
    HRESULT _hr = raw_Add(Name, Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BookmarkPtr(_result, false);
}

#pragma implementation_key(713)
inline VARIANT_BOOL Word::Bookmarks::Exists ( _bstr_t Name ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Exists(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Variable wrapper method implementations
//

#pragma implementation_key(714)
inline Word::_ApplicationPtr Word::Variable::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(715)
inline long Word::Variable::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(716)
inline IDispatchPtr Word::Variable::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(717)
inline _bstr_t Word::Variable::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(718)
inline _bstr_t Word::Variable::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(719)
inline void Word::Variable::PutValue ( _bstr_t prop ) {
    HRESULT _hr = put_Value(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(720)
inline long Word::Variable::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(721)
inline HRESULT Word::Variable::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Variables wrapper method implementations
//

#pragma implementation_key(722)
inline IUnknownPtr Word::Variables::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(723)
inline long Word::Variables::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(724)
inline Word::_ApplicationPtr Word::Variables::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(725)
inline long Word::Variables::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(726)
inline IDispatchPtr Word::Variables::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(727)
inline Word::VariablePtr Word::Variables::Item ( VARIANT * Index ) {
    struct Variable * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VariablePtr(_result, false);
}

#pragma implementation_key(728)
inline Word::VariablePtr Word::Variables::Add ( _bstr_t Name, VARIANT * Value ) {
    struct Variable * _result;
    HRESULT _hr = raw_Add(Name, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VariablePtr(_result, false);
}

//
// interface RecentFile wrapper method implementations
//

#pragma implementation_key(729)
inline Word::_ApplicationPtr Word::RecentFile::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(730)
inline long Word::RecentFile::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(731)
inline IDispatchPtr Word::RecentFile::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(732)
inline _bstr_t Word::RecentFile::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(733)
inline long Word::RecentFile::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(734)
inline VARIANT_BOOL Word::RecentFile::GetReadOnly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(735)
inline void Word::RecentFile::PutReadOnly ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ReadOnly(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(736)
inline _bstr_t Word::RecentFile::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(737)
inline Word::_DocumentPtr Word::RecentFile::Open ( ) {
    struct _Document * _result;
    HRESULT _hr = raw_Open(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(738)
inline HRESULT Word::RecentFile::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface RecentFiles wrapper method implementations
//

#pragma implementation_key(739)
inline Word::_ApplicationPtr Word::RecentFiles::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(740)
inline long Word::RecentFiles::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(741)
inline IDispatchPtr Word::RecentFiles::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(742)
inline IUnknownPtr Word::RecentFiles::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(743)
inline long Word::RecentFiles::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(744)
inline long Word::RecentFiles::GetMaximum ( ) {
    long _result;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(745)
inline void Word::RecentFiles::PutMaximum ( long prop ) {
    HRESULT _hr = put_Maximum(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(746)
inline Word::RecentFilePtr Word::RecentFiles::Item ( long Index ) {
    struct RecentFile * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecentFilePtr(_result, false);
}

#pragma implementation_key(747)
inline Word::RecentFilePtr Word::RecentFiles::Add ( VARIANT * Document, VARIANT * ReadOnly ) {
    struct RecentFile * _result;
    HRESULT _hr = raw_Add(Document, ReadOnly, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecentFilePtr(_result, false);
}

//
// interface Window wrapper method implementations
//

#pragma implementation_key(748)
inline Word::_ApplicationPtr Word::Window::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(749)
inline long Word::Window::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(750)
inline IDispatchPtr Word::Window::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(751)
inline Word::PanePtr Word::Window::GetActivePane ( ) {
    struct Pane * _result;
    HRESULT _hr = get_ActivePane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(752)
inline Word::_DocumentPtr Word::Window::GetDocument ( ) {
    struct _Document * _result;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(753)
inline Word::PanesPtr Word::Window::GetPanes ( ) {
    struct Panes * _result;
    HRESULT _hr = get_Panes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanesPtr(_result, false);
}

#pragma implementation_key(754)
inline Word::SelectionPtr Word::Window::GetSelection ( ) {
    struct Selection * _result;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SelectionPtr(_result, false);
}

#pragma implementation_key(755)
inline long Word::Window::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(756)
inline void Word::Window::PutLeft ( long prop ) {
    HRESULT _hr = put_Left(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(757)
inline long Word::Window::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(758)
inline void Word::Window::PutTop ( long prop ) {
    HRESULT _hr = put_Top(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(759)
inline long Word::Window::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(760)
inline void Word::Window::PutWidth ( long prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(761)
inline long Word::Window::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(762)
inline void Word::Window::PutHeight ( long prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(763)
inline VARIANT_BOOL Word::Window::GetSplit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Split(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(764)
inline void Word::Window::PutSplit ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Split(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(765)
inline long Word::Window::GetSplitVertical ( ) {
    long _result;
    HRESULT _hr = get_SplitVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(766)
inline void Word::Window::PutSplitVertical ( long prop ) {
    HRESULT _hr = put_SplitVertical(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(767)
inline _bstr_t Word::Window::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(768)
inline void Word::Window::PutCaption ( _bstr_t prop ) {
    HRESULT _hr = put_Caption(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(769)
inline enum WdWindowState Word::Window::GetWindowState ( ) {
    enum WdWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(770)
inline void Word::Window::PutWindowState ( enum WdWindowState prop ) {
    HRESULT _hr = put_WindowState(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(771)
inline VARIANT_BOOL Word::Window::GetDisplayRulers ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayRulers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(772)
inline void Word::Window::PutDisplayRulers ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayRulers(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(773)
inline VARIANT_BOOL Word::Window::GetDisplayVerticalRuler ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayVerticalRuler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(774)
inline void Word::Window::PutDisplayVerticalRuler ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayVerticalRuler(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(775)
inline Word::ViewPtr Word::Window::GetView ( ) {
    struct View * _result;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(776)
inline enum WdWindowType Word::Window::GetType ( ) {
    enum WdWindowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(777)
inline Word::WindowPtr Word::Window::GetNext ( ) {
    struct Window * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(778)
inline Word::WindowPtr Word::Window::GetPrevious ( ) {
    struct Window * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(779)
inline long Word::Window::GetWindowNumber ( ) {
    long _result;
    HRESULT _hr = get_WindowNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(780)
inline VARIANT_BOOL Word::Window::GetDisplayVerticalScrollBar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayVerticalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(781)
inline void Word::Window::PutDisplayVerticalScrollBar ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayVerticalScrollBar(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(782)
inline VARIANT_BOOL Word::Window::GetDisplayHorizontalScrollBar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayHorizontalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(783)
inline void Word::Window::PutDisplayHorizontalScrollBar ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayHorizontalScrollBar(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(784)
inline float Word::Window::GetStyleAreaWidth ( ) {
    float _result;
    HRESULT _hr = get_StyleAreaWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(785)
inline void Word::Window::PutStyleAreaWidth ( float prop ) {
    HRESULT _hr = put_StyleAreaWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(786)
inline VARIANT_BOOL Word::Window::GetDisplayScreenTips ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayScreenTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(787)
inline void Word::Window::PutDisplayScreenTips ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayScreenTips(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(788)
inline long Word::Window::GetHorizontalPercentScrolled ( ) {
    long _result;
    HRESULT _hr = get_HorizontalPercentScrolled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(789)
inline void Word::Window::PutHorizontalPercentScrolled ( long prop ) {
    HRESULT _hr = put_HorizontalPercentScrolled(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(790)
inline long Word::Window::GetVerticalPercentScrolled ( ) {
    long _result;
    HRESULT _hr = get_VerticalPercentScrolled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(791)
inline void Word::Window::PutVerticalPercentScrolled ( long prop ) {
    HRESULT _hr = put_VerticalPercentScrolled(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(792)
inline VARIANT_BOOL Word::Window::GetDocumentMap ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DocumentMap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(793)
inline void Word::Window::PutDocumentMap ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DocumentMap(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(794)
inline VARIANT_BOOL Word::Window::GetActive ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(795)
inline long Word::Window::GetDocumentMapPercentWidth ( ) {
    long _result;
    HRESULT _hr = get_DocumentMapPercentWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(796)
inline void Word::Window::PutDocumentMapPercentWidth ( long prop ) {
    HRESULT _hr = put_DocumentMapPercentWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(797)
inline long Word::Window::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(798)
inline enum WdIMEMode Word::Window::GetIMEMode ( ) {
    enum WdIMEMode _result;
    HRESULT _hr = get_IMEMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(799)
inline void Word::Window::PutIMEMode ( enum WdIMEMode prop ) {
    HRESULT _hr = put_IMEMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(800)
inline HRESULT Word::Window::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(801)
inline HRESULT Word::Window::Close ( VARIANT * SaveChanges, VARIANT * RouteDocument ) {
    HRESULT _hr = raw_Close(SaveChanges, RouteDocument);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(802)
inline HRESULT Word::Window::LargeScroll ( VARIANT * Down, VARIANT * Up, VARIANT * ToRight, VARIANT * ToLeft ) {
    HRESULT _hr = raw_LargeScroll(Down, Up, ToRight, ToLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(803)
inline HRESULT Word::Window::SmallScroll ( VARIANT * Down, VARIANT * Up, VARIANT * ToRight, VARIANT * ToLeft ) {
    HRESULT _hr = raw_SmallScroll(Down, Up, ToRight, ToLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(804)
inline Word::WindowPtr Word::Window::NewWindow ( ) {
    struct Window * _result;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(805)
inline HRESULT Word::Window::PrintOutOld ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint ) {
    HRESULT _hr = raw_PrintOutOld(Background, Append, Range, OutputFileName, From, To, Item, Copies, Pages, PageType, PrintToFile, Collate, ActivePrinterMacGX, ManualDuplexPrint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(806)
inline HRESULT Word::Window::PageScroll ( VARIANT * Down, VARIANT * Up ) {
    HRESULT _hr = raw_PageScroll(Down, Up);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(807)
inline HRESULT Word::Window::SetFocus ( ) {
    HRESULT _hr = raw_SetFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(808)
inline IDispatchPtr Word::Window::RangeFromPoint ( long x, long y ) {
    IDispatch * _result;
    HRESULT _hr = raw_RangeFromPoint(x, y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(809)
inline HRESULT Word::Window::ScrollIntoView ( IDispatch * obj, VARIANT * Start ) {
    HRESULT _hr = raw_ScrollIntoView(obj, Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(810)
inline HRESULT Word::Window::GetPoint ( long * ScreenPixelsLeft, long * ScreenPixelsTop, long * ScreenPixelsWidth, long * ScreenPixelsHeight, IDispatch * obj ) {
    HRESULT _hr = raw_GetPoint(ScreenPixelsLeft, ScreenPixelsTop, ScreenPixelsWidth, ScreenPixelsHeight, obj);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(811)
inline HRESULT Word::Window::PrintOut2000 ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint, VARIANT * PrintZoomColumn, VARIANT * PrintZoomRow, VARIANT * PrintZoomPaperWidth, VARIANT * PrintZoomPaperHeight ) {
    HRESULT _hr = raw_PrintOut2000(Background, Append, Range, OutputFileName, From, To, Item, Copies, Pages, PageType, PrintToFile, Collate, ActivePrinterMacGX, ManualDuplexPrint, PrintZoomColumn, PrintZoomRow, PrintZoomPaperWidth, PrintZoomPaperHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(812)
inline long Word::Window::GetUsableWidth ( ) {
    long _result;
    HRESULT _hr = get_UsableWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(813)
inline long Word::Window::GetUsableHeight ( ) {
    long _result;
    HRESULT _hr = get_UsableHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(814)
inline VARIANT_BOOL Word::Window::GetEnvelopeVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnvelopeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(815)
inline void Word::Window::PutEnvelopeVisible ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_EnvelopeVisible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(816)
inline VARIANT_BOOL Word::Window::GetDisplayRightRuler ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayRightRuler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(817)
inline void Word::Window::PutDisplayRightRuler ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayRightRuler(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(818)
inline VARIANT_BOOL Word::Window::GetDisplayLeftScrollBar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayLeftScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(819)
inline void Word::Window::PutDisplayLeftScrollBar ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayLeftScrollBar(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(820)
inline VARIANT_BOOL Word::Window::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(821)
inline void Word::Window::PutVisible ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(822)
inline HRESULT Word::Window::PrintOut ( VARIANT * Background, VARIANT * Append, VARIANT * Range, VARIANT * OutputFileName, VARIANT * From, VARIANT * To, VARIANT * Item, VARIANT * Copies, VARIANT * Pages, VARIANT * PageType, VARIANT * PrintToFile, VARIANT * Collate, VARIANT * ActivePrinterMacGX, VARIANT * ManualDuplexPrint, VARIANT * PrintZoomColumn, VARIANT * PrintZoomRow, VARIANT * PrintZoomPaperWidth, VARIANT * PrintZoomPaperHeight ) {
    HRESULT _hr = raw_PrintOut(Background, Append, Range, OutputFileName, From, To, Item, Copies, Pages, PageType, PrintToFile, Collate, ActivePrinterMacGX, ManualDuplexPrint, PrintZoomColumn, PrintZoomRow, PrintZoomPaperWidth, PrintZoomPaperHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Windows wrapper method implementations
//

#pragma implementation_key(823)
inline IUnknownPtr Word::Windows::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(824)
inline long Word::Windows::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(825)
inline Word::_ApplicationPtr Word::Windows::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(826)
inline long Word::Windows::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(827)
inline IDispatchPtr Word::Windows::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(828)
inline Word::WindowPtr Word::Windows::Item ( VARIANT * Index ) {
    struct Window * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(829)
inline Word::WindowPtr Word::Windows::Add ( VARIANT * Window ) {
    struct Window * _result;
    HRESULT _hr = raw_Add(Window, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WindowPtr(_result, false);
}

#pragma implementation_key(830)
inline HRESULT Word::Windows::Arrange ( VARIANT * ArrangeStyle ) {
    HRESULT _hr = raw_Arrange(ArrangeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Pane wrapper method implementations
//

#pragma implementation_key(831)
inline Word::_ApplicationPtr Word::Pane::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(832)
inline long Word::Pane::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(833)
inline IDispatchPtr Word::Pane::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(834)
inline Word::_DocumentPtr Word::Pane::GetDocument ( ) {
    struct _Document * _result;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(835)
inline Word::SelectionPtr Word::Pane::GetSelection ( ) {
    struct Selection * _result;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SelectionPtr(_result, false);
}

#pragma implementation_key(836)
inline VARIANT_BOOL Word::Pane::GetDisplayRulers ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayRulers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(837)
inline void Word::Pane::PutDisplayRulers ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayRulers(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(838)
inline VARIANT_BOOL Word::Pane::GetDisplayVerticalRuler ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayVerticalRuler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(839)
inline void Word::Pane::PutDisplayVerticalRuler ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayVerticalRuler(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(840)
inline Word::ZoomsPtr Word::Pane::GetZooms ( ) {
    struct Zooms * _result;
    HRESULT _hr = get_Zooms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ZoomsPtr(_result, false);
}

#pragma implementation_key(841)
inline long Word::Pane::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(842)
inline Word::ViewPtr Word::Pane::GetView ( ) {
    struct View * _result;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(843)
inline Word::PanePtr Word::Pane::GetNext ( ) {
    struct Pane * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(844)
inline Word::PanePtr Word::Pane::GetPrevious ( ) {
    struct Pane * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(845)
inline long Word::Pane::GetHorizontalPercentScrolled ( ) {
    long _result;
    HRESULT _hr = get_HorizontalPercentScrolled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(846)
inline void Word::Pane::PutHorizontalPercentScrolled ( long prop ) {
    HRESULT _hr = put_HorizontalPercentScrolled(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(847)
inline long Word::Pane::GetVerticalPercentScrolled ( ) {
    long _result;
    HRESULT _hr = get_VerticalPercentScrolled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(848)
inline void Word::Pane::PutVerticalPercentScrolled ( long prop ) {
    HRESULT _hr = put_VerticalPercentScrolled(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(849)
inline long Word::Pane::GetMinimumFontSize ( ) {
    long _result;
    HRESULT _hr = get_MinimumFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(850)
inline void Word::Pane::PutMinimumFontSize ( long prop ) {
    HRESULT _hr = put_MinimumFontSize(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(851)
inline VARIANT_BOOL Word::Pane::GetBrowseToWindow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BrowseToWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(852)
inline void Word::Pane::PutBrowseToWindow ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_BrowseToWindow(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(853)
inline long Word::Pane::GetBrowseWidth ( ) {
    long _result;
    HRESULT _hr = get_BrowseWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(854)
inline HRESULT Word::Pane::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(855)
inline HRESULT Word::Pane::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(856)
inline HRESULT Word::Pane::LargeScroll ( VARIANT * Down, VARIANT * Up, VARIANT * ToRight, VARIANT * ToLeft ) {
    HRESULT _hr = raw_LargeScroll(Down, Up, ToRight, ToLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(857)
inline HRESULT Word::Pane::SmallScroll ( VARIANT * Down, VARIANT * Up, VARIANT * ToRight, VARIANT * ToLeft ) {
    HRESULT _hr = raw_SmallScroll(Down, Up, ToRight, ToLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(858)
inline HRESULT Word::Pane::AutoScroll ( long Velocity ) {
    HRESULT _hr = raw_AutoScroll(Velocity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(859)
inline HRESULT Word::Pane::PageScroll ( VARIANT * Down, VARIANT * Up ) {
    HRESULT _hr = raw_PageScroll(Down, Up);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(860)
inline HRESULT Word::Pane::NewFrameset ( ) {
    HRESULT _hr = raw_NewFrameset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(861)
inline HRESULT Word::Pane::TOCInFrameset ( ) {
    HRESULT _hr = raw_TOCInFrameset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(862)
inline Word::FramesetPtr Word::Pane::GetFrameset ( ) {
    struct Frameset * _result;
    HRESULT _hr = get_Frameset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramesetPtr(_result, false);
}

//
// interface Panes wrapper method implementations
//

#pragma implementation_key(863)
inline IUnknownPtr Word::Panes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(864)
inline long Word::Panes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(865)
inline Word::_ApplicationPtr Word::Panes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(866)
inline long Word::Panes::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(867)
inline IDispatchPtr Word::Panes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(868)
inline Word::PanePtr Word::Panes::Item ( long Index ) {
    struct Pane * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(869)
inline Word::PanePtr Word::Panes::Add ( VARIANT * SplitVertical ) {
    struct Pane * _result;
    HRESULT _hr = raw_Add(SplitVertical, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

//
// interface Range wrapper method implementations
//

#pragma implementation_key(870)
inline _bstr_t Word::Range::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(871)
inline void Word::Range::PutText ( _bstr_t prop ) {
    HRESULT _hr = put_Text(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(872)
inline Word::RangePtr Word::Range::GetFormattedText ( ) {
    struct Range * _result;
    HRESULT _hr = get_FormattedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(873)
inline void Word::Range::PutFormattedText ( struct Range * prop ) {
    HRESULT _hr = put_FormattedText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(874)
inline long Word::Range::GetStart ( ) {
    long _result;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(875)
inline void Word::Range::PutStart ( long prop ) {
    HRESULT _hr = put_Start(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(876)
inline long Word::Range::GetEnd ( ) {
    long _result;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(877)
inline void Word::Range::PutEnd ( long prop ) {
    HRESULT _hr = put_End(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(878)
inline Word::_FontPtr Word::Range::GetFont ( ) {
    struct _Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FontPtr(_result, false);
}

#pragma implementation_key(879)
inline void Word::Range::PutFont ( struct _Font * prop ) {
    HRESULT _hr = put_Font(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(880)
inline Word::RangePtr Word::Range::GetDuplicate ( ) {
    struct Range * _result;
    HRESULT _hr = get_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(881)
inline enum WdStoryType Word::Range::GetStoryType ( ) {
    enum WdStoryType _result;
    HRESULT _hr = get_StoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline Word::TablesPtr Word::Range::GetTables ( ) {
    struct Tables * _result;
    HRESULT _hr = get_Tables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablesPtr(_result, false);
}

#pragma implementation_key(883)
inline Word::WordsPtr Word::Range::GetWords ( ) {
    struct Words * _result;
    HRESULT _hr = get_Words(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WordsPtr(_result, false);
}

#pragma implementation_key(884)
inline Word::SentencesPtr Word::Range::GetSentences ( ) {
    struct Sentences * _result;
    HRESULT _hr = get_Sentences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SentencesPtr(_result, false);
}

#pragma implementation_key(885)
inline Word::CharactersPtr Word::Range::GetCharacters ( ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(886)
inline Word::FootnotesPtr Word::Range::GetFootnotes ( ) {
    struct Footnotes * _result;
    HRESULT _hr = get_Footnotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FootnotesPtr(_result, false);
}

#pragma implementation_key(887)
inline Word::EndnotesPtr Word::Range::GetEndnotes ( ) {
    struct Endnotes * _result;
    HRESULT _hr = get_Endnotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EndnotesPtr(_result, false);
}

#pragma implementation_key(888)
inline Word::CommentsPtr Word::Range::GetComments ( ) {
    struct Comments * _result;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

#pragma implementation_key(889)
inline Word::CellsPtr Word::Range::GetCells ( ) {
    struct Cells * _result;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellsPtr(_result, false);
}

#pragma implementation_key(890)
inline Word::SectionsPtr Word::Range::GetSections ( ) {
    struct Sections * _result;
    HRESULT _hr = get_Sections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SectionsPtr(_result, false);
}

#pragma implementation_key(891)
inline Word::ParagraphsPtr Word::Range::GetParagraphs ( ) {
    struct Paragraphs * _result;
    HRESULT _hr = get_Paragraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphsPtr(_result, false);
}

#pragma implementation_key(892)
inline Word::BordersPtr Word::Range::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(893)
inline void Word::Range::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(894)
inline Word::ShadingPtr Word::Range::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(895)
inline Word::TextRetrievalModePtr Word::Range::GetTextRetrievalMode ( ) {
    struct TextRetrievalMode * _result;
    HRESULT _hr = get_TextRetrievalMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRetrievalModePtr(_result, false);
}

#pragma implementation_key(896)
inline void Word::Range::PutTextRetrievalMode ( struct TextRetrievalMode * prop ) {
    HRESULT _hr = put_TextRetrievalMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(897)
inline Word::FieldsPtr Word::Range::GetFields ( ) {
    struct Fields * _result;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldsPtr(_result, false);
}

#pragma implementation_key(898)
inline Word::FormFieldsPtr Word::Range::GetFormFields ( ) {
    struct FormFields * _result;
    HRESULT _hr = get_FormFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormFieldsPtr(_result, false);
}

#pragma implementation_key(899)
inline Word::FramesPtr Word::Range::GetFrames ( ) {
    struct Frames * _result;
    HRESULT _hr = get_Frames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramesPtr(_result, false);
}

#pragma implementation_key(900)
inline Word::_ParagraphFormatPtr Word::Range::GetParagraphFormat ( ) {
    struct _ParagraphFormat * _result;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(901)
inline void Word::Range::PutParagraphFormat ( struct _ParagraphFormat * prop ) {
    HRESULT _hr = put_ParagraphFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(902)
inline Word::ListFormatPtr Word::Range::GetListFormat ( ) {
    struct ListFormat * _result;
    HRESULT _hr = get_ListFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListFormatPtr(_result, false);
}

#pragma implementation_key(903)
inline Word::BookmarksPtr Word::Range::GetBookmarks ( ) {
    struct Bookmarks * _result;
    HRESULT _hr = get_Bookmarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BookmarksPtr(_result, false);
}

#pragma implementation_key(904)
inline Word::_ApplicationPtr Word::Range::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(905)
inline long Word::Range::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(906)
inline IDispatchPtr Word::Range::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(907)
inline long Word::Range::GetBold ( ) {
    long _result;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(908)
inline void Word::Range::PutBold ( long prop ) {
    HRESULT _hr = put_Bold(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(909)
inline long Word::Range::GetItalic ( ) {
    long _result;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(910)
inline void Word::Range::PutItalic ( long prop ) {
    HRESULT _hr = put_Italic(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(911)
inline enum WdUnderline Word::Range::GetUnderline ( ) {
    enum WdUnderline _result;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(912)
inline void Word::Range::PutUnderline ( enum WdUnderline prop ) {
    HRESULT _hr = put_Underline(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(913)
inline enum WdEmphasisMark Word::Range::GetEmphasisMark ( ) {
    enum WdEmphasisMark _result;
    HRESULT _hr = get_EmphasisMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(914)
inline void Word::Range::PutEmphasisMark ( enum WdEmphasisMark prop ) {
    HRESULT _hr = put_EmphasisMark(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(915)
inline VARIANT_BOOL Word::Range::GetDisableCharacterSpaceGrid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisableCharacterSpaceGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(916)
inline void Word::Range::PutDisableCharacterSpaceGrid ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisableCharacterSpaceGrid(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(917)
inline Word::RevisionsPtr Word::Range::GetRevisions ( ) {
    struct Revisions * _result;
    HRESULT _hr = get_Revisions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RevisionsPtr(_result, false);
}

#pragma implementation_key(918)
inline _variant_t Word::Range::GetStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(919)
inline void Word::Range::PutStyle ( VARIANT * prop ) {
    HRESULT _hr = put_Style(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(920)
inline long Word::Range::GetStoryLength ( ) {
    long _result;
    HRESULT _hr = get_StoryLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(921)
inline enum WdLanguageID Word::Range::GetLanguageID ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(922)
inline void Word::Range::PutLanguageID ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(923)
inline Word::SynonymInfoPtr Word::Range::GetSynonymInfo ( ) {
    struct SynonymInfo * _result;
    HRESULT _hr = get_SynonymInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SynonymInfoPtr(_result, false);
}

#pragma implementation_key(924)
inline Word::HyperlinksPtr Word::Range::GetHyperlinks ( ) {
    struct Hyperlinks * _result;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(925)
inline Word::ListParagraphsPtr Word::Range::GetListParagraphs ( ) {
    struct ListParagraphs * _result;
    HRESULT _hr = get_ListParagraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListParagraphsPtr(_result, false);
}

#pragma implementation_key(926)
inline Word::SubdocumentsPtr Word::Range::GetSubdocuments ( ) {
    struct Subdocuments * _result;
    HRESULT _hr = get_Subdocuments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SubdocumentsPtr(_result, false);
}

#pragma implementation_key(927)
inline VARIANT_BOOL Word::Range::GetGrammarChecked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_GrammarChecked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(928)
inline void Word::Range::PutGrammarChecked ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_GrammarChecked(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(929)
inline VARIANT_BOOL Word::Range::GetSpellingChecked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SpellingChecked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(930)
inline void Word::Range::PutSpellingChecked ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SpellingChecked(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(931)
inline enum WdColorIndex Word::Range::GetHighlightColorIndex ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_HighlightColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(932)
inline void Word::Range::PutHighlightColorIndex ( enum WdColorIndex prop ) {
    HRESULT _hr = put_HighlightColorIndex(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(933)
inline Word::ColumnsPtr Word::Range::GetColumns ( ) {
    struct Columns * _result;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnsPtr(_result, false);
}

#pragma implementation_key(934)
inline Word::RowsPtr Word::Range::GetRows ( ) {
    struct Rows * _result;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowsPtr(_result, false);
}

#pragma implementation_key(935)
inline long Word::Range::GetCanEdit ( ) {
    long _result;
    HRESULT _hr = get_CanEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(936)
inline long Word::Range::GetCanPaste ( ) {
    long _result;
    HRESULT _hr = get_CanPaste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(937)
inline VARIANT_BOOL Word::Range::GetIsEndOfRowMark ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsEndOfRowMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(938)
inline long Word::Range::GetBookmarkID ( ) {
    long _result;
    HRESULT _hr = get_BookmarkID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(939)
inline long Word::Range::GetPreviousBookmarkID ( ) {
    long _result;
    HRESULT _hr = get_PreviousBookmarkID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(940)
inline Word::FindPtr Word::Range::GetFind ( ) {
    struct Find * _result;
    HRESULT _hr = get_Find(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FindPtr(_result, false);
}

#pragma implementation_key(941)
inline Word::PageSetupPtr Word::Range::GetPageSetup ( ) {
    struct PageSetup * _result;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(942)
inline void Word::Range::PutPageSetup ( struct PageSetup * prop ) {
    HRESULT _hr = put_PageSetup(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(943)
inline Word::ShapeRangePtr Word::Range::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(944)
inline enum WdCharacterCase Word::Range::GetCase ( ) {
    enum WdCharacterCase _result;
    HRESULT _hr = get_Case(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(945)
inline void Word::Range::PutCase ( enum WdCharacterCase prop ) {
    HRESULT _hr = put_Case(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(946)
inline _variant_t Word::Range::GetInformation ( enum WdInformation Type ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Information(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(947)
inline Word::ReadabilityStatisticsPtr Word::Range::GetReadabilityStatistics ( ) {
    struct ReadabilityStatistics * _result;
    HRESULT _hr = get_ReadabilityStatistics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ReadabilityStatisticsPtr(_result, false);
}

#pragma implementation_key(948)
inline Word::ProofreadingErrorsPtr Word::Range::GetGrammaticalErrors ( ) {
    struct ProofreadingErrors * _result;
    HRESULT _hr = get_GrammaticalErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProofreadingErrorsPtr(_result, false);
}

#pragma implementation_key(949)
inline Word::ProofreadingErrorsPtr Word::Range::GetSpellingErrors ( ) {
    struct ProofreadingErrors * _result;
    HRESULT _hr = get_SpellingErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ProofreadingErrorsPtr(_result, false);
}

#pragma implementation_key(950)
inline enum WdTextOrientation Word::Range::GetOrientation ( ) {
    enum WdTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(951)
inline void Word::Range::PutOrientation ( enum WdTextOrientation prop ) {
    HRESULT _hr = put_Orientation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(952)
inline Word::InlineShapesPtr Word::Range::GetInlineShapes ( ) {
    struct InlineShapes * _result;
    HRESULT _hr = get_InlineShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapesPtr(_result, false);
}

#pragma implementation_key(953)
inline Word::RangePtr Word::Range::GetNextStoryRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_NextStoryRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(954)
inline enum WdLanguageID Word::Range::GetLanguageIDFarEast ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageIDFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(955)
inline void Word::Range::PutLanguageIDFarEast ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageIDFarEast(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(956)
inline enum WdLanguageID Word::Range::GetLanguageIDOther ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageIDOther(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(957)
inline void Word::Range::PutLanguageIDOther ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageIDOther(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(958)
inline HRESULT Word::Range::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(959)
inline HRESULT Word::Range::SetRange ( long Start, long End ) {
    HRESULT _hr = raw_SetRange(Start, End);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(960)
inline HRESULT Word::Range::Collapse ( VARIANT * Direction ) {
    HRESULT _hr = raw_Collapse(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(961)
inline HRESULT Word::Range::InsertBefore ( _bstr_t Text ) {
    HRESULT _hr = raw_InsertBefore(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(962)
inline HRESULT Word::Range::InsertAfter ( _bstr_t Text ) {
    HRESULT _hr = raw_InsertAfter(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(963)
inline Word::RangePtr Word::Range::Next ( VARIANT * Unit, VARIANT * Count ) {
    struct Range * _result;
    HRESULT _hr = raw_Next(Unit, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(964)
inline Word::RangePtr Word::Range::Previous ( VARIANT * Unit, VARIANT * Count ) {
    struct Range * _result;
    HRESULT _hr = raw_Previous(Unit, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(965)
inline long Word::Range::StartOf ( VARIANT * Unit, VARIANT * Extend ) {
    long _result;
    HRESULT _hr = raw_StartOf(Unit, Extend, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(966)
inline long Word::Range::EndOf ( VARIANT * Unit, VARIANT * Extend ) {
    long _result;
    HRESULT _hr = raw_EndOf(Unit, Extend, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(967)
inline long Word::Range::Move ( VARIANT * Unit, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_Move(Unit, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(968)
inline long Word::Range::MoveStart ( VARIANT * Unit, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveStart(Unit, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(969)
inline long Word::Range::MoveEnd ( VARIANT * Unit, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveEnd(Unit, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(970)
inline long Word::Range::MoveWhile ( VARIANT * Cset, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveWhile(Cset, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(971)
inline long Word::Range::MoveStartWhile ( VARIANT * Cset, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveStartWhile(Cset, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(972)
inline long Word::Range::MoveEndWhile ( VARIANT * Cset, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveEndWhile(Cset, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(973)
inline long Word::Range::MoveUntil ( VARIANT * Cset, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveUntil(Cset, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(974)
inline long Word::Range::MoveStartUntil ( VARIANT * Cset, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveStartUntil(Cset, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(975)
inline long Word::Range::MoveEndUntil ( VARIANT * Cset, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveEndUntil(Cset, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(976)
inline HRESULT Word::Range::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(977)
inline HRESULT Word::Range::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(978)
inline HRESULT Word::Range::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(979)
inline HRESULT Word::Range::InsertBreak ( VARIANT * Type ) {
    HRESULT _hr = raw_InsertBreak(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(980)
inline HRESULT Word::Range::InsertFile ( _bstr_t FileName, VARIANT * Range, VARIANT * ConfirmConversions, VARIANT * Link, VARIANT * Attachment ) {
    HRESULT _hr = raw_InsertFile(FileName, Range, ConfirmConversions, Link, Attachment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(981)
inline VARIANT_BOOL Word::Range::InStory ( struct Range * Range ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_InStory(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(982)
inline VARIANT_BOOL Word::Range::InRange ( struct Range * Range ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_InRange(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(983)
inline long Word::Range::Delete ( VARIANT * Unit, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_Delete(Unit, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(984)
inline HRESULT Word::Range::WholeStory ( ) {
    HRESULT _hr = raw_WholeStory();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(985)
inline long Word::Range::Expand ( VARIANT * Unit ) {
    long _result;
    HRESULT _hr = raw_Expand(Unit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(986)
inline HRESULT Word::Range::InsertParagraph ( ) {
    HRESULT _hr = raw_InsertParagraph();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(987)
inline HRESULT Word::Range::InsertParagraphAfter ( ) {
    HRESULT _hr = raw_InsertParagraphAfter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(988)
inline Word::TablePtr Word::Range::ConvertToTableOld ( VARIANT * Separator, VARIANT * NumRows, VARIANT * NumColumns, VARIANT * InitialColumnWidth, VARIANT * Format, VARIANT * ApplyBorders, VARIANT * ApplyShading, VARIANT * ApplyFont, VARIANT * ApplyColor, VARIANT * ApplyHeadingRows, VARIANT * ApplyLastRow, VARIANT * ApplyFirstColumn, VARIANT * ApplyLastColumn, VARIANT * AutoFit ) {
    struct Table * _result;
    HRESULT _hr = raw_ConvertToTableOld(Separator, NumRows, NumColumns, InitialColumnWidth, Format, ApplyBorders, ApplyShading, ApplyFont, ApplyColor, ApplyHeadingRows, ApplyLastRow, ApplyFirstColumn, ApplyLastColumn, AutoFit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(989)
inline HRESULT Word::Range::InsertDateTimeOld ( VARIANT * DateTimeFormat, VARIANT * InsertAsField, VARIANT * InsertAsFullWidth ) {
    HRESULT _hr = raw_InsertDateTimeOld(DateTimeFormat, InsertAsField, InsertAsFullWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(990)
inline HRESULT Word::Range::InsertSymbol ( long CharacterNumber, VARIANT * Font, VARIANT * Unicode, VARIANT * Bias ) {
    HRESULT _hr = raw_InsertSymbol(CharacterNumber, Font, Unicode, Bias);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(991)
inline HRESULT Word::Range::InsertCrossReference ( VARIANT * ReferenceType, enum WdReferenceKind ReferenceKind, VARIANT * ReferenceItem, VARIANT * InsertAsHyperlink, VARIANT * IncludePosition ) {
    HRESULT _hr = raw_InsertCrossReference(ReferenceType, ReferenceKind, ReferenceItem, InsertAsHyperlink, IncludePosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(992)
inline HRESULT Word::Range::InsertCaption ( VARIANT * Label, VARIANT * Title, VARIANT * TitleAutoText, VARIANT * Position ) {
    HRESULT _hr = raw_InsertCaption(Label, Title, TitleAutoText, Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(993)
inline HRESULT Word::Range::CopyAsPicture ( ) {
    HRESULT _hr = raw_CopyAsPicture();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(994)
inline HRESULT Word::Range::SortOld ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * SortColumn, VARIANT * Separator, VARIANT * CaseSensitive, VARIANT * LanguageID ) {
    HRESULT _hr = raw_SortOld(ExcludeHeader, FieldNumber, SortFieldType, SortOrder, FieldNumber2, SortFieldType2, SortOrder2, FieldNumber3, SortFieldType3, SortOrder3, SortColumn, Separator, CaseSensitive, LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(995)
inline HRESULT Word::Range::SortAscending ( ) {
    HRESULT _hr = raw_SortAscending();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(996)
inline HRESULT Word::Range::SortDescending ( ) {
    HRESULT _hr = raw_SortDescending();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(997)
inline VARIANT_BOOL Word::Range::IsEqual ( struct Range * Range ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsEqual(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(998)
inline float Word::Range::Calculate ( ) {
    float _result;
    HRESULT _hr = raw_Calculate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(999)
inline Word::RangePtr Word::Range::GoTo ( VARIANT * What, VARIANT * Which, VARIANT * Count, VARIANT * Name ) {
    struct Range * _result;
    HRESULT _hr = raw_GoTo(What, Which, Count, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1000)
inline Word::RangePtr Word::Range::GoToNext ( enum WdGoToItem What ) {
    struct Range * _result;
    HRESULT _hr = raw_GoToNext(What, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1001)
inline Word::RangePtr Word::Range::GoToPrevious ( enum WdGoToItem What ) {
    struct Range * _result;
    HRESULT _hr = raw_GoToPrevious(What, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1002)
inline HRESULT Word::Range::PasteSpecial ( VARIANT * IconIndex, VARIANT * Link, VARIANT * Placement, VARIANT * DisplayAsIcon, VARIANT * DataType, VARIANT * IconFileName, VARIANT * IconLabel ) {
    HRESULT _hr = raw_PasteSpecial(IconIndex, Link, Placement, DisplayAsIcon, DataType, IconFileName, IconLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1003)
inline HRESULT Word::Range::LookupNameProperties ( ) {
    HRESULT _hr = raw_LookupNameProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1004)
inline long Word::Range::ComputeStatistics ( enum WdStatistic Statistic ) {
    long _result;
    HRESULT _hr = raw_ComputeStatistics(Statistic, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1005)
inline HRESULT Word::Range::Relocate ( long Direction ) {
    HRESULT _hr = raw_Relocate(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1006)
inline HRESULT Word::Range::CheckSynonyms ( ) {
    HRESULT _hr = raw_CheckSynonyms();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1007)
inline HRESULT Word::Range::SubscribeTo ( _bstr_t Edition, VARIANT * Format ) {
    HRESULT _hr = raw_SubscribeTo(Edition, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1008)
inline HRESULT Word::Range::CreatePublisher ( VARIANT * Edition, VARIANT * ContainsPICT, VARIANT * ContainsRTF, VARIANT * ContainsText ) {
    HRESULT _hr = raw_CreatePublisher(Edition, ContainsPICT, ContainsRTF, ContainsText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1009)
inline HRESULT Word::Range::InsertAutoText ( ) {
    HRESULT _hr = raw_InsertAutoText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1010)
inline HRESULT Word::Range::InsertDatabase ( VARIANT * Format, VARIANT * Style, VARIANT * LinkToSource, VARIANT * Connection, VARIANT * SQLStatement, VARIANT * SQLStatement1, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate, VARIANT * DataSource, VARIANT * From, VARIANT * To, VARIANT * IncludeFields ) {
    HRESULT _hr = raw_InsertDatabase(Format, Style, LinkToSource, Connection, SQLStatement, SQLStatement1, PasswordDocument, PasswordTemplate, WritePasswordDocument, WritePasswordTemplate, DataSource, From, To, IncludeFields);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1011)
inline HRESULT Word::Range::AutoFormat ( ) {
    HRESULT _hr = raw_AutoFormat();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1012)
inline HRESULT Word::Range::CheckGrammar ( ) {
    HRESULT _hr = raw_CheckGrammar();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1013)
inline HRESULT Word::Range::CheckSpelling ( VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * AlwaysSuggest, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 ) {
    HRESULT _hr = raw_CheckSpelling(CustomDictionary, IgnoreUppercase, AlwaysSuggest, CustomDictionary2, CustomDictionary3, CustomDictionary4, CustomDictionary5, CustomDictionary6, CustomDictionary7, CustomDictionary8, CustomDictionary9, CustomDictionary10);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1014)
inline Word::SpellingSuggestionsPtr Word::Range::GetSpellingSuggestions ( VARIANT * CustomDictionary, VARIANT * IgnoreUppercase, VARIANT * MainDictionary, VARIANT * SuggestionMode, VARIANT * CustomDictionary2, VARIANT * CustomDictionary3, VARIANT * CustomDictionary4, VARIANT * CustomDictionary5, VARIANT * CustomDictionary6, VARIANT * CustomDictionary7, VARIANT * CustomDictionary8, VARIANT * CustomDictionary9, VARIANT * CustomDictionary10 ) {
    struct SpellingSuggestions * _result;
    HRESULT _hr = raw_GetSpellingSuggestions(CustomDictionary, IgnoreUppercase, MainDictionary, SuggestionMode, CustomDictionary2, CustomDictionary3, CustomDictionary4, CustomDictionary5, CustomDictionary6, CustomDictionary7, CustomDictionary8, CustomDictionary9, CustomDictionary10, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SpellingSuggestionsPtr(_result, false);
}

#pragma implementation_key(1015)
inline HRESULT Word::Range::InsertParagraphBefore ( ) {
    HRESULT _hr = raw_InsertParagraphBefore();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1016)
inline HRESULT Word::Range::NextSubdocument ( ) {
    HRESULT _hr = raw_NextSubdocument();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1017)
inline HRESULT Word::Range::PreviousSubdocument ( ) {
    HRESULT _hr = raw_PreviousSubdocument();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1018)
inline HRESULT Word::Range::ConvertHangulAndHanja ( VARIANT * ConversionsMode, VARIANT * FastConversion, VARIANT * CheckHangulEnding, VARIANT * EnableRecentOrdering, VARIANT * CustomDictionary ) {
    HRESULT _hr = raw_ConvertHangulAndHanja(ConversionsMode, FastConversion, CheckHangulEnding, EnableRecentOrdering, CustomDictionary);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1019)
inline HRESULT Word::Range::PasteAsNestedTable ( ) {
    HRESULT _hr = raw_PasteAsNestedTable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1020)
inline HRESULT Word::Range::ModifyEnclosure ( VARIANT * Style, VARIANT * Symbol, VARIANT * EnclosedText ) {
    HRESULT _hr = raw_ModifyEnclosure(Style, Symbol, EnclosedText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1021)
inline HRESULT Word::Range::PhoneticGuide ( _bstr_t Text, enum WdPhoneticGuideAlignmentType Alignment, long Raise, long FontSize, _bstr_t FontName ) {
    HRESULT _hr = raw_PhoneticGuide(Text, Alignment, Raise, FontSize, FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1022)
inline HRESULT Word::Range::InsertDateTime ( VARIANT * DateTimeFormat, VARIANT * InsertAsField, VARIANT * InsertAsFullWidth, VARIANT * DateLanguage, VARIANT * CalendarType ) {
    HRESULT _hr = raw_InsertDateTime(DateTimeFormat, InsertAsField, InsertAsFullWidth, DateLanguage, CalendarType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1023)
inline HRESULT Word::Range::Sort ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * SortColumn, VARIANT * Separator, VARIANT * CaseSensitive, VARIANT * BidiSort, VARIANT * IgnoreThe, VARIANT * IgnoreKashida, VARIANT * IgnoreDiacritics, VARIANT * IgnoreHe, VARIANT * LanguageID ) {
    HRESULT _hr = raw_Sort(ExcludeHeader, FieldNumber, SortFieldType, SortOrder, FieldNumber2, SortFieldType2, SortOrder2, FieldNumber3, SortFieldType3, SortOrder3, SortColumn, Separator, CaseSensitive, BidiSort, IgnoreThe, IgnoreKashida, IgnoreDiacritics, IgnoreHe, LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1024)
inline HRESULT Word::Range::DetectLanguage ( ) {
    HRESULT _hr = raw_DetectLanguage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1025)
inline Word::TablePtr Word::Range::ConvertToTable ( VARIANT * Separator, VARIANT * NumRows, VARIANT * NumColumns, VARIANT * InitialColumnWidth, VARIANT * Format, VARIANT * ApplyBorders, VARIANT * ApplyShading, VARIANT * ApplyFont, VARIANT * ApplyColor, VARIANT * ApplyHeadingRows, VARIANT * ApplyLastRow, VARIANT * ApplyFirstColumn, VARIANT * ApplyLastColumn, VARIANT * AutoFit, VARIANT * AutoFitBehavior, VARIANT * DefaultTableBehavior ) {
    struct Table * _result;
    HRESULT _hr = raw_ConvertToTable(Separator, NumRows, NumColumns, InitialColumnWidth, Format, ApplyBorders, ApplyShading, ApplyFont, ApplyColor, ApplyHeadingRows, ApplyLastRow, ApplyFirstColumn, ApplyLastColumn, AutoFit, AutoFitBehavior, DefaultTableBehavior, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(1026)
inline HRESULT Word::Range::TCSCConverter ( enum WdTCSCConverterDirection WdTCSCConverterDirection, VARIANT_BOOL CommonTerms, VARIANT_BOOL UseVariants ) {
    HRESULT _hr = raw_TCSCConverter(WdTCSCConverterDirection, CommonTerms, UseVariants);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1027)
inline VARIANT_BOOL Word::Range::GetLanguageDetected ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LanguageDetected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1028)
inline void Word::Range::PutLanguageDetected ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_LanguageDetected(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1029)
inline float Word::Range::GetFitTextWidth ( ) {
    float _result;
    HRESULT _hr = get_FitTextWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1030)
inline void Word::Range::PutFitTextWidth ( float prop ) {
    HRESULT _hr = put_FitTextWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1031)
inline enum WdHorizontalInVerticalType Word::Range::GetHorizontalInVertical ( ) {
    enum WdHorizontalInVerticalType _result;
    HRESULT _hr = get_HorizontalInVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1032)
inline void Word::Range::PutHorizontalInVertical ( enum WdHorizontalInVerticalType prop ) {
    HRESULT _hr = put_HorizontalInVertical(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1033)
inline enum WdTwoLinesInOneType Word::Range::GetTwoLinesInOne ( ) {
    enum WdTwoLinesInOneType _result;
    HRESULT _hr = get_TwoLinesInOne(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1034)
inline void Word::Range::PutTwoLinesInOne ( enum WdTwoLinesInOneType prop ) {
    HRESULT _hr = put_TwoLinesInOne(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1035)
inline VARIANT_BOOL Word::Range::GetCombineCharacters ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CombineCharacters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1036)
inline void Word::Range::PutCombineCharacters ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CombineCharacters(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1037)
inline long Word::Range::GetNoProofing ( ) {
    long _result;
    HRESULT _hr = get_NoProofing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1038)
inline void Word::Range::PutNoProofing ( long prop ) {
    HRESULT _hr = put_NoProofing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1039)
inline Word::TablesPtr Word::Range::GetTopLevelTables ( ) {
    struct Tables * _result;
    HRESULT _hr = get_TopLevelTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablesPtr(_result, false);
}

#pragma implementation_key(1040)
inline Office::ScriptsPtr Word::Range::GetScripts ( ) {
    struct Office::Scripts * _result;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

#pragma implementation_key(1041)
inline enum WdCharacterWidth Word::Range::GetCharacterWidth ( ) {
    enum WdCharacterWidth _result;
    HRESULT _hr = get_CharacterWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1042)
inline void Word::Range::PutCharacterWidth ( enum WdCharacterWidth prop ) {
    HRESULT _hr = put_CharacterWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1043)
inline enum WdKana Word::Range::GetKana ( ) {
    enum WdKana _result;
    HRESULT _hr = get_Kana(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1044)
inline void Word::Range::PutKana ( enum WdKana prop ) {
    HRESULT _hr = put_Kana(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1045)
inline long Word::Range::GetBoldBi ( ) {
    long _result;
    HRESULT _hr = get_BoldBi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1046)
inline void Word::Range::PutBoldBi ( long prop ) {
    HRESULT _hr = put_BoldBi(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1047)
inline long Word::Range::GetItalicBi ( ) {
    long _result;
    HRESULT _hr = get_ItalicBi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1048)
inline void Word::Range::PutItalicBi ( long prop ) {
    HRESULT _hr = put_ItalicBi(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1049)
inline _bstr_t Word::Range::GetID ( ) {
    BSTR _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1050)
inline void Word::Range::PutID ( _bstr_t prop ) {
    HRESULT _hr = put_ID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1051)
inline Word::HTMLDivisionsPtr Word::Range::GetHTMLDivisions ( ) {
    struct HTMLDivisions * _result;
    HRESULT _hr = get_HTMLDivisions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLDivisionsPtr(_result, false);
}

#pragma implementation_key(1052)
inline Word::SmartTagsPtr Word::Range::GetSmartTags ( ) {
    struct SmartTags * _result;
    HRESULT _hr = get_SmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagsPtr(_result, false);
}

#pragma implementation_key(1053)
inline VARIANT_BOOL Word::Range::GetShowAll ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1054)
inline void Word::Range::PutShowAll ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowAll(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1055)
inline Word::_DocumentPtr Word::Range::GetDocument ( ) {
    struct _Document * _result;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(1056)
inline Word::FootnoteOptionsPtr Word::Range::GetFootnoteOptions ( ) {
    struct FootnoteOptions * _result;
    HRESULT _hr = get_FootnoteOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FootnoteOptionsPtr(_result, false);
}

#pragma implementation_key(1057)
inline Word::EndnoteOptionsPtr Word::Range::GetEndnoteOptions ( ) {
    struct EndnoteOptions * _result;
    HRESULT _hr = get_EndnoteOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EndnoteOptionsPtr(_result, false);
}

#pragma implementation_key(1058)
inline HRESULT Word::Range::PasteAndFormat ( enum WdRecoveryType Type ) {
    HRESULT _hr = raw_PasteAndFormat(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1059)
inline HRESULT Word::Range::PasteExcelTable ( VARIANT_BOOL LinkedToExcel, VARIANT_BOOL WordFormatting, VARIANT_BOOL RTF ) {
    HRESULT _hr = raw_PasteExcelTable(LinkedToExcel, WordFormatting, RTF);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1060)
inline HRESULT Word::Range::PasteAppendTable ( ) {
    HRESULT _hr = raw_PasteAppendTable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ListFormat wrapper method implementations
//

#pragma implementation_key(1061)
inline long Word::ListFormat::GetListLevelNumber ( ) {
    long _result;
    HRESULT _hr = get_ListLevelNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1062)
inline void Word::ListFormat::PutListLevelNumber ( long prop ) {
    HRESULT _hr = put_ListLevelNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1063)
inline Word::ListPtr Word::ListFormat::GetList ( ) {
    struct List * _result;
    HRESULT _hr = get_List(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListPtr(_result, false);
}

#pragma implementation_key(1064)
inline Word::ListTemplatePtr Word::ListFormat::GetListTemplate ( ) {
    struct ListTemplate * _result;
    HRESULT _hr = get_ListTemplate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListTemplatePtr(_result, false);
}

#pragma implementation_key(1065)
inline long Word::ListFormat::GetListValue ( ) {
    long _result;
    HRESULT _hr = get_ListValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1066)
inline VARIANT_BOOL Word::ListFormat::GetSingleList ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SingleList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1067)
inline VARIANT_BOOL Word::ListFormat::GetSingleListTemplate ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SingleListTemplate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1068)
inline enum WdListType Word::ListFormat::GetListType ( ) {
    enum WdListType _result;
    HRESULT _hr = get_ListType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1069)
inline _bstr_t Word::ListFormat::GetListString ( ) {
    BSTR _result;
    HRESULT _hr = get_ListString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1070)
inline Word::_ApplicationPtr Word::ListFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1071)
inline long Word::ListFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1072)
inline IDispatchPtr Word::ListFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1073)
inline enum WdContinue Word::ListFormat::CanContinuePreviousList ( struct ListTemplate * ListTemplate ) {
    enum WdContinue _result;
    HRESULT _hr = raw_CanContinuePreviousList(ListTemplate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1074)
inline HRESULT Word::ListFormat::RemoveNumbers ( VARIANT * NumberType ) {
    HRESULT _hr = raw_RemoveNumbers(NumberType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1075)
inline HRESULT Word::ListFormat::ConvertNumbersToText ( VARIANT * NumberType ) {
    HRESULT _hr = raw_ConvertNumbersToText(NumberType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1076)
inline long Word::ListFormat::CountNumberedItems ( VARIANT * NumberType, VARIANT * Level ) {
    long _result;
    HRESULT _hr = raw_CountNumberedItems(NumberType, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1077)
inline HRESULT Word::ListFormat::ApplyBulletDefaultOld ( ) {
    HRESULT _hr = raw_ApplyBulletDefaultOld();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1078)
inline HRESULT Word::ListFormat::ApplyNumberDefaultOld ( ) {
    HRESULT _hr = raw_ApplyNumberDefaultOld();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1079)
inline HRESULT Word::ListFormat::ApplyOutlineNumberDefaultOld ( ) {
    HRESULT _hr = raw_ApplyOutlineNumberDefaultOld();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1080)
inline HRESULT Word::ListFormat::ApplyListTemplateOld ( struct ListTemplate * ListTemplate, VARIANT * ContinuePreviousList, VARIANT * ApplyTo ) {
    HRESULT _hr = raw_ApplyListTemplateOld(ListTemplate, ContinuePreviousList, ApplyTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1081)
inline HRESULT Word::ListFormat::ListOutdent ( ) {
    HRESULT _hr = raw_ListOutdent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1082)
inline HRESULT Word::ListFormat::ListIndent ( ) {
    HRESULT _hr = raw_ListIndent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1083)
inline HRESULT Word::ListFormat::ApplyBulletDefault ( VARIANT * DefaultListBehavior ) {
    HRESULT _hr = raw_ApplyBulletDefault(DefaultListBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1084)
inline HRESULT Word::ListFormat::ApplyNumberDefault ( VARIANT * DefaultListBehavior ) {
    HRESULT _hr = raw_ApplyNumberDefault(DefaultListBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1085)
inline HRESULT Word::ListFormat::ApplyOutlineNumberDefault ( VARIANT * DefaultListBehavior ) {
    HRESULT _hr = raw_ApplyOutlineNumberDefault(DefaultListBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1086)
inline HRESULT Word::ListFormat::ApplyListTemplate ( struct ListTemplate * ListTemplate, VARIANT * ContinuePreviousList, VARIANT * ApplyTo, VARIANT * DefaultListBehavior ) {
    HRESULT _hr = raw_ApplyListTemplate(ListTemplate, ContinuePreviousList, ApplyTo, DefaultListBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1087)
inline Word::InlineShapePtr Word::ListFormat::GetListPictureBullet ( ) {
    struct InlineShape * _result;
    HRESULT _hr = get_ListPictureBullet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

//
// interface Find wrapper method implementations
//

#pragma implementation_key(1088)
inline Word::_ApplicationPtr Word::Find::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1089)
inline long Word::Find::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1090)
inline IDispatchPtr Word::Find::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1091)
inline VARIANT_BOOL Word::Find::GetForward ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1092)
inline void Word::Find::PutForward ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Forward(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1093)
inline Word::_FontPtr Word::Find::GetFont ( ) {
    struct _Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FontPtr(_result, false);
}

#pragma implementation_key(1094)
inline void Word::Find::PutFont ( struct _Font * prop ) {
    HRESULT _hr = put_Font(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1095)
inline VARIANT_BOOL Word::Find::GetFound ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Found(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1096)
inline VARIANT_BOOL Word::Find::GetMatchAllWordForms ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchAllWordForms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1097)
inline void Word::Find::PutMatchAllWordForms ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchAllWordForms(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1098)
inline VARIANT_BOOL Word::Find::GetMatchCase ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchCase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1099)
inline void Word::Find::PutMatchCase ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchCase(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1100)
inline VARIANT_BOOL Word::Find::GetMatchWildcards ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchWildcards(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1101)
inline void Word::Find::PutMatchWildcards ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchWildcards(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1102)
inline VARIANT_BOOL Word::Find::GetMatchSoundsLike ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchSoundsLike(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1103)
inline void Word::Find::PutMatchSoundsLike ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchSoundsLike(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1104)
inline VARIANT_BOOL Word::Find::GetMatchWholeWord ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchWholeWord(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1105)
inline void Word::Find::PutMatchWholeWord ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchWholeWord(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1106)
inline VARIANT_BOOL Word::Find::GetMatchFuzzy ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1107)
inline void Word::Find::PutMatchFuzzy ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzy(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1108)
inline VARIANT_BOOL Word::Find::GetMatchByte ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchByte(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1109)
inline void Word::Find::PutMatchByte ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchByte(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1110)
inline Word::_ParagraphFormatPtr Word::Find::GetParagraphFormat ( ) {
    struct _ParagraphFormat * _result;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(1111)
inline void Word::Find::PutParagraphFormat ( struct _ParagraphFormat * prop ) {
    HRESULT _hr = put_ParagraphFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1112)
inline _variant_t Word::Find::GetStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1113)
inline void Word::Find::PutStyle ( VARIANT * prop ) {
    HRESULT _hr = put_Style(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1114)
inline _bstr_t Word::Find::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1115)
inline void Word::Find::PutText ( _bstr_t prop ) {
    HRESULT _hr = put_Text(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1116)
inline enum WdLanguageID Word::Find::GetLanguageID ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1117)
inline void Word::Find::PutLanguageID ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1118)
inline long Word::Find::GetHighlight ( ) {
    long _result;
    HRESULT _hr = get_Highlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1119)
inline void Word::Find::PutHighlight ( long prop ) {
    HRESULT _hr = put_Highlight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1120)
inline Word::ReplacementPtr Word::Find::GetReplacement ( ) {
    struct Replacement * _result;
    HRESULT _hr = get_Replacement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ReplacementPtr(_result, false);
}

#pragma implementation_key(1121)
inline Word::FramePtr Word::Find::GetFrame ( ) {
    struct Frame * _result;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramePtr(_result, false);
}

#pragma implementation_key(1122)
inline enum WdFindWrap Word::Find::GetWrap ( ) {
    enum WdFindWrap _result;
    HRESULT _hr = get_Wrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1123)
inline void Word::Find::PutWrap ( enum WdFindWrap prop ) {
    HRESULT _hr = put_Wrap(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1124)
inline VARIANT_BOOL Word::Find::GetFormat ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1125)
inline void Word::Find::PutFormat ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Format(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1126)
inline enum WdLanguageID Word::Find::GetLanguageIDFarEast ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageIDFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1127)
inline void Word::Find::PutLanguageIDFarEast ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageIDFarEast(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1128)
inline enum WdLanguageID Word::Find::GetLanguageIDOther ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageIDOther(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1129)
inline void Word::Find::PutLanguageIDOther ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageIDOther(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1130)
inline VARIANT_BOOL Word::Find::GetCorrectHangulEndings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CorrectHangulEndings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1131)
inline void Word::Find::PutCorrectHangulEndings ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CorrectHangulEndings(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1132)
inline VARIANT_BOOL Word::Find::ExecuteOld ( VARIANT * FindText, VARIANT * MatchCase, VARIANT * MatchWholeWord, VARIANT * MatchWildcards, VARIANT * MatchSoundsLike, VARIANT * MatchAllWordForms, VARIANT * Forward, VARIANT * Wrap, VARIANT * Format, VARIANT * ReplaceWith, VARIANT * Replace ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_ExecuteOld(FindText, MatchCase, MatchWholeWord, MatchWildcards, MatchSoundsLike, MatchAllWordForms, Forward, Wrap, Format, ReplaceWith, Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1133)
inline HRESULT Word::Find::ClearFormatting ( ) {
    HRESULT _hr = raw_ClearFormatting();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1134)
inline HRESULT Word::Find::SetAllFuzzyOptions ( ) {
    HRESULT _hr = raw_SetAllFuzzyOptions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1135)
inline HRESULT Word::Find::ClearAllFuzzyOptions ( ) {
    HRESULT _hr = raw_ClearAllFuzzyOptions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1136)
inline VARIANT_BOOL Word::Find::Execute ( VARIANT * FindText, VARIANT * MatchCase, VARIANT * MatchWholeWord, VARIANT * MatchWildcards, VARIANT * MatchSoundsLike, VARIANT * MatchAllWordForms, VARIANT * Forward, VARIANT * Wrap, VARIANT * Format, VARIANT * ReplaceWith, VARIANT * Replace, VARIANT * MatchKashida, VARIANT * MatchDiacritics, VARIANT * MatchAlefHamza, VARIANT * MatchControl ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Execute(FindText, MatchCase, MatchWholeWord, MatchWildcards, MatchSoundsLike, MatchAllWordForms, Forward, Wrap, Format, ReplaceWith, Replace, MatchKashida, MatchDiacritics, MatchAlefHamza, MatchControl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1137)
inline long Word::Find::GetNoProofing ( ) {
    long _result;
    HRESULT _hr = get_NoProofing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1138)
inline void Word::Find::PutNoProofing ( long prop ) {
    HRESULT _hr = put_NoProofing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1139)
inline VARIANT_BOOL Word::Find::GetMatchKashida ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchKashida(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1140)
inline void Word::Find::PutMatchKashida ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchKashida(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1141)
inline VARIANT_BOOL Word::Find::GetMatchDiacritics ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchDiacritics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1142)
inline void Word::Find::PutMatchDiacritics ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchDiacritics(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1143)
inline VARIANT_BOOL Word::Find::GetMatchAlefHamza ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchAlefHamza(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1144)
inline void Word::Find::PutMatchAlefHamza ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchAlefHamza(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1145)
inline VARIANT_BOOL Word::Find::GetMatchControl ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1146)
inline void Word::Find::PutMatchControl ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchControl(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Replacement wrapper method implementations
//

#pragma implementation_key(1147)
inline Word::_ApplicationPtr Word::Replacement::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1148)
inline long Word::Replacement::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1149)
inline IDispatchPtr Word::Replacement::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1150)
inline Word::_FontPtr Word::Replacement::GetFont ( ) {
    struct _Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FontPtr(_result, false);
}

#pragma implementation_key(1151)
inline void Word::Replacement::PutFont ( struct _Font * prop ) {
    HRESULT _hr = put_Font(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1152)
inline Word::_ParagraphFormatPtr Word::Replacement::GetParagraphFormat ( ) {
    struct _ParagraphFormat * _result;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(1153)
inline void Word::Replacement::PutParagraphFormat ( struct _ParagraphFormat * prop ) {
    HRESULT _hr = put_ParagraphFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1154)
inline _variant_t Word::Replacement::GetStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1155)
inline void Word::Replacement::PutStyle ( VARIANT * prop ) {
    HRESULT _hr = put_Style(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1156)
inline _bstr_t Word::Replacement::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1157)
inline void Word::Replacement::PutText ( _bstr_t prop ) {
    HRESULT _hr = put_Text(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1158)
inline enum WdLanguageID Word::Replacement::GetLanguageID ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1159)
inline void Word::Replacement::PutLanguageID ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1160)
inline long Word::Replacement::GetHighlight ( ) {
    long _result;
    HRESULT _hr = get_Highlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1161)
inline void Word::Replacement::PutHighlight ( long prop ) {
    HRESULT _hr = put_Highlight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1162)
inline Word::FramePtr Word::Replacement::GetFrame ( ) {
    struct Frame * _result;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramePtr(_result, false);
}

#pragma implementation_key(1163)
inline enum WdLanguageID Word::Replacement::GetLanguageIDFarEast ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageIDFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1164)
inline void Word::Replacement::PutLanguageIDFarEast ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageIDFarEast(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1165)
inline HRESULT Word::Replacement::ClearFormatting ( ) {
    HRESULT _hr = raw_ClearFormatting();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1166)
inline long Word::Replacement::GetNoProofing ( ) {
    long _result;
    HRESULT _hr = get_NoProofing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1167)
inline void Word::Replacement::PutNoProofing ( long prop ) {
    HRESULT _hr = put_NoProofing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Characters wrapper method implementations
//

#pragma implementation_key(1168)
inline IUnknownPtr Word::Characters::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1169)
inline long Word::Characters::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1170)
inline Word::RangePtr Word::Characters::GetFirst ( ) {
    struct Range * _result;
    HRESULT _hr = get_First(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1171)
inline Word::RangePtr Word::Characters::GetLast ( ) {
    struct Range * _result;
    HRESULT _hr = get_Last(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1172)
inline Word::_ApplicationPtr Word::Characters::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1173)
inline long Word::Characters::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1174)
inline IDispatchPtr Word::Characters::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1175)
inline Word::RangePtr Word::Characters::Item ( long Index ) {
    struct Range * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

//
// interface Words wrapper method implementations
//

#pragma implementation_key(1176)
inline IUnknownPtr Word::Words::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1177)
inline long Word::Words::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1178)
inline Word::RangePtr Word::Words::GetFirst ( ) {
    struct Range * _result;
    HRESULT _hr = get_First(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1179)
inline Word::RangePtr Word::Words::GetLast ( ) {
    struct Range * _result;
    HRESULT _hr = get_Last(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1180)
inline Word::_ApplicationPtr Word::Words::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1181)
inline long Word::Words::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1182)
inline IDispatchPtr Word::Words::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1183)
inline Word::RangePtr Word::Words::Item ( long Index ) {
    struct Range * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

//
// interface Sentences wrapper method implementations
//

#pragma implementation_key(1184)
inline IUnknownPtr Word::Sentences::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1185)
inline long Word::Sentences::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1186)
inline Word::RangePtr Word::Sentences::GetFirst ( ) {
    struct Range * _result;
    HRESULT _hr = get_First(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1187)
inline Word::RangePtr Word::Sentences::GetLast ( ) {
    struct Range * _result;
    HRESULT _hr = get_Last(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1188)
inline Word::_ApplicationPtr Word::Sentences::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1189)
inline long Word::Sentences::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1190)
inline IDispatchPtr Word::Sentences::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1191)
inline Word::RangePtr Word::Sentences::Item ( long Index ) {
    struct Range * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

//
// interface Sections wrapper method implementations
//

#pragma implementation_key(1192)
inline IUnknownPtr Word::Sections::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1193)
inline long Word::Sections::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1194)
inline Word::SectionPtr Word::Sections::GetFirst ( ) {
    struct Section * _result;
    HRESULT _hr = get_First(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SectionPtr(_result, false);
}

#pragma implementation_key(1195)
inline Word::SectionPtr Word::Sections::GetLast ( ) {
    struct Section * _result;
    HRESULT _hr = get_Last(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SectionPtr(_result, false);
}

#pragma implementation_key(1196)
inline Word::_ApplicationPtr Word::Sections::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1197)
inline long Word::Sections::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1198)
inline IDispatchPtr Word::Sections::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1199)
inline Word::PageSetupPtr Word::Sections::GetPageSetup ( ) {
    struct PageSetup * _result;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(1200)
inline void Word::Sections::PutPageSetup ( struct PageSetup * prop ) {
    HRESULT _hr = put_PageSetup(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1201)
inline Word::SectionPtr Word::Sections::Item ( long Index ) {
    struct Section * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SectionPtr(_result, false);
}

#pragma implementation_key(1202)
inline Word::SectionPtr Word::Sections::Add ( VARIANT * Range, VARIANT * Start ) {
    struct Section * _result;
    HRESULT _hr = raw_Add(Range, Start, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SectionPtr(_result, false);
}

//
// interface Section wrapper method implementations
//

#pragma implementation_key(1203)
inline Word::RangePtr Word::Section::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1204)
inline Word::_ApplicationPtr Word::Section::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1205)
inline long Word::Section::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1206)
inline IDispatchPtr Word::Section::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1207)
inline Word::PageSetupPtr Word::Section::GetPageSetup ( ) {
    struct PageSetup * _result;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(1208)
inline void Word::Section::PutPageSetup ( struct PageSetup * prop ) {
    HRESULT _hr = put_PageSetup(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1209)
inline Word::HeadersFootersPtr Word::Section::GetHeaders ( ) {
    struct HeadersFooters * _result;
    HRESULT _hr = get_Headers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(1210)
inline Word::HeadersFootersPtr Word::Section::GetFooters ( ) {
    struct HeadersFooters * _result;
    HRESULT _hr = get_Footers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(1211)
inline VARIANT_BOOL Word::Section::GetProtectedForForms ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ProtectedForForms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1212)
inline void Word::Section::PutProtectedForForms ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ProtectedForForms(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1213)
inline long Word::Section::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1214)
inline Word::BordersPtr Word::Section::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1215)
inline void Word::Section::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Paragraphs wrapper method implementations
//

#pragma implementation_key(1216)
inline IUnknownPtr Word::Paragraphs::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1217)
inline long Word::Paragraphs::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1218)
inline Word::ParagraphPtr Word::Paragraphs::GetFirst ( ) {
    struct Paragraph * _result;
    HRESULT _hr = get_First(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphPtr(_result, false);
}

#pragma implementation_key(1219)
inline Word::ParagraphPtr Word::Paragraphs::GetLast ( ) {
    struct Paragraph * _result;
    HRESULT _hr = get_Last(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphPtr(_result, false);
}

#pragma implementation_key(1220)
inline Word::_ApplicationPtr Word::Paragraphs::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1221)
inline long Word::Paragraphs::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1222)
inline IDispatchPtr Word::Paragraphs::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1223)
inline Word::_ParagraphFormatPtr Word::Paragraphs::GetFormat ( ) {
    struct _ParagraphFormat * _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(1224)
inline void Word::Paragraphs::PutFormat ( struct _ParagraphFormat * prop ) {
    HRESULT _hr = put_Format(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1225)
inline Word::TabStopsPtr Word::Paragraphs::GetTabStops ( ) {
    struct TabStops * _result;
    HRESULT _hr = get_TabStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopsPtr(_result, false);
}

#pragma implementation_key(1226)
inline void Word::Paragraphs::PutTabStops ( struct TabStops * prop ) {
    HRESULT _hr = put_TabStops(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1227)
inline Word::BordersPtr Word::Paragraphs::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1228)
inline void Word::Paragraphs::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1229)
inline _variant_t Word::Paragraphs::GetStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1230)
inline void Word::Paragraphs::PutStyle ( VARIANT * prop ) {
    HRESULT _hr = put_Style(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1231)
inline enum WdParagraphAlignment Word::Paragraphs::GetAlignment ( ) {
    enum WdParagraphAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1232)
inline void Word::Paragraphs::PutAlignment ( enum WdParagraphAlignment prop ) {
    HRESULT _hr = put_Alignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1233)
inline long Word::Paragraphs::GetKeepTogether ( ) {
    long _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1234)
inline void Word::Paragraphs::PutKeepTogether ( long prop ) {
    HRESULT _hr = put_KeepTogether(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1235)
inline long Word::Paragraphs::GetKeepWithNext ( ) {
    long _result;
    HRESULT _hr = get_KeepWithNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1236)
inline void Word::Paragraphs::PutKeepWithNext ( long prop ) {
    HRESULT _hr = put_KeepWithNext(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1237)
inline long Word::Paragraphs::GetPageBreakBefore ( ) {
    long _result;
    HRESULT _hr = get_PageBreakBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1238)
inline void Word::Paragraphs::PutPageBreakBefore ( long prop ) {
    HRESULT _hr = put_PageBreakBefore(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1239)
inline long Word::Paragraphs::GetNoLineNumber ( ) {
    long _result;
    HRESULT _hr = get_NoLineNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1240)
inline void Word::Paragraphs::PutNoLineNumber ( long prop ) {
    HRESULT _hr = put_NoLineNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1241)
inline float Word::Paragraphs::GetRightIndent ( ) {
    float _result;
    HRESULT _hr = get_RightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1242)
inline void Word::Paragraphs::PutRightIndent ( float prop ) {
    HRESULT _hr = put_RightIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1243)
inline float Word::Paragraphs::GetLeftIndent ( ) {
    float _result;
    HRESULT _hr = get_LeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1244)
inline void Word::Paragraphs::PutLeftIndent ( float prop ) {
    HRESULT _hr = put_LeftIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1245)
inline float Word::Paragraphs::GetFirstLineIndent ( ) {
    float _result;
    HRESULT _hr = get_FirstLineIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1246)
inline void Word::Paragraphs::PutFirstLineIndent ( float prop ) {
    HRESULT _hr = put_FirstLineIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1247)
inline float Word::Paragraphs::GetLineSpacing ( ) {
    float _result;
    HRESULT _hr = get_LineSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1248)
inline void Word::Paragraphs::PutLineSpacing ( float prop ) {
    HRESULT _hr = put_LineSpacing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1249)
inline enum WdLineSpacing Word::Paragraphs::GetLineSpacingRule ( ) {
    enum WdLineSpacing _result;
    HRESULT _hr = get_LineSpacingRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1250)
inline void Word::Paragraphs::PutLineSpacingRule ( enum WdLineSpacing prop ) {
    HRESULT _hr = put_LineSpacingRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1251)
inline float Word::Paragraphs::GetSpaceBefore ( ) {
    float _result;
    HRESULT _hr = get_SpaceBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1252)
inline void Word::Paragraphs::PutSpaceBefore ( float prop ) {
    HRESULT _hr = put_SpaceBefore(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1253)
inline float Word::Paragraphs::GetSpaceAfter ( ) {
    float _result;
    HRESULT _hr = get_SpaceAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1254)
inline void Word::Paragraphs::PutSpaceAfter ( float prop ) {
    HRESULT _hr = put_SpaceAfter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1255)
inline long Word::Paragraphs::GetHyphenation ( ) {
    long _result;
    HRESULT _hr = get_Hyphenation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1256)
inline void Word::Paragraphs::PutHyphenation ( long prop ) {
    HRESULT _hr = put_Hyphenation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1257)
inline long Word::Paragraphs::GetWidowControl ( ) {
    long _result;
    HRESULT _hr = get_WidowControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1258)
inline void Word::Paragraphs::PutWidowControl ( long prop ) {
    HRESULT _hr = put_WidowControl(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1259)
inline Word::ShadingPtr Word::Paragraphs::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(1260)
inline long Word::Paragraphs::GetFarEastLineBreakControl ( ) {
    long _result;
    HRESULT _hr = get_FarEastLineBreakControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1261)
inline void Word::Paragraphs::PutFarEastLineBreakControl ( long prop ) {
    HRESULT _hr = put_FarEastLineBreakControl(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1262)
inline long Word::Paragraphs::GetWordWrap ( ) {
    long _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1263)
inline void Word::Paragraphs::PutWordWrap ( long prop ) {
    HRESULT _hr = put_WordWrap(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1264)
inline long Word::Paragraphs::GetHangingPunctuation ( ) {
    long _result;
    HRESULT _hr = get_HangingPunctuation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1265)
inline void Word::Paragraphs::PutHangingPunctuation ( long prop ) {
    HRESULT _hr = put_HangingPunctuation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1266)
inline long Word::Paragraphs::GetHalfWidthPunctuationOnTopOfLine ( ) {
    long _result;
    HRESULT _hr = get_HalfWidthPunctuationOnTopOfLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1267)
inline void Word::Paragraphs::PutHalfWidthPunctuationOnTopOfLine ( long prop ) {
    HRESULT _hr = put_HalfWidthPunctuationOnTopOfLine(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1268)
inline long Word::Paragraphs::GetAddSpaceBetweenFarEastAndAlpha ( ) {
    long _result;
    HRESULT _hr = get_AddSpaceBetweenFarEastAndAlpha(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1269)
inline void Word::Paragraphs::PutAddSpaceBetweenFarEastAndAlpha ( long prop ) {
    HRESULT _hr = put_AddSpaceBetweenFarEastAndAlpha(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1270)
inline long Word::Paragraphs::GetAddSpaceBetweenFarEastAndDigit ( ) {
    long _result;
    HRESULT _hr = get_AddSpaceBetweenFarEastAndDigit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1271)
inline void Word::Paragraphs::PutAddSpaceBetweenFarEastAndDigit ( long prop ) {
    HRESULT _hr = put_AddSpaceBetweenFarEastAndDigit(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1272)
inline enum WdBaselineAlignment Word::Paragraphs::GetBaseLineAlignment ( ) {
    enum WdBaselineAlignment _result;
    HRESULT _hr = get_BaseLineAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1273)
inline void Word::Paragraphs::PutBaseLineAlignment ( enum WdBaselineAlignment prop ) {
    HRESULT _hr = put_BaseLineAlignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1274)
inline long Word::Paragraphs::GetAutoAdjustRightIndent ( ) {
    long _result;
    HRESULT _hr = get_AutoAdjustRightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1275)
inline void Word::Paragraphs::PutAutoAdjustRightIndent ( long prop ) {
    HRESULT _hr = put_AutoAdjustRightIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1276)
inline long Word::Paragraphs::GetDisableLineHeightGrid ( ) {
    long _result;
    HRESULT _hr = get_DisableLineHeightGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1277)
inline void Word::Paragraphs::PutDisableLineHeightGrid ( long prop ) {
    HRESULT _hr = put_DisableLineHeightGrid(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1278)
inline enum WdOutlineLevel Word::Paragraphs::GetOutlineLevel ( ) {
    enum WdOutlineLevel _result;
    HRESULT _hr = get_OutlineLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1279)
inline void Word::Paragraphs::PutOutlineLevel ( enum WdOutlineLevel prop ) {
    HRESULT _hr = put_OutlineLevel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1280)
inline Word::ParagraphPtr Word::Paragraphs::Item ( long Index ) {
    struct Paragraph * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphPtr(_result, false);
}

#pragma implementation_key(1281)
inline Word::ParagraphPtr Word::Paragraphs::Add ( VARIANT * Range ) {
    struct Paragraph * _result;
    HRESULT _hr = raw_Add(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphPtr(_result, false);
}

#pragma implementation_key(1282)
inline HRESULT Word::Paragraphs::CloseUp ( ) {
    HRESULT _hr = raw_CloseUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1283)
inline HRESULT Word::Paragraphs::OpenUp ( ) {
    HRESULT _hr = raw_OpenUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1284)
inline HRESULT Word::Paragraphs::OpenOrCloseUp ( ) {
    HRESULT _hr = raw_OpenOrCloseUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1285)
inline HRESULT Word::Paragraphs::TabHangingIndent ( short Count ) {
    HRESULT _hr = raw_TabHangingIndent(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1286)
inline HRESULT Word::Paragraphs::TabIndent ( short Count ) {
    HRESULT _hr = raw_TabIndent(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1287)
inline HRESULT Word::Paragraphs::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1288)
inline HRESULT Word::Paragraphs::Space1 ( ) {
    HRESULT _hr = raw_Space1();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1289)
inline HRESULT Word::Paragraphs::Space15 ( ) {
    HRESULT _hr = raw_Space15();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1290)
inline HRESULT Word::Paragraphs::Space2 ( ) {
    HRESULT _hr = raw_Space2();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1291)
inline HRESULT Word::Paragraphs::IndentCharWidth ( short Count ) {
    HRESULT _hr = raw_IndentCharWidth(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1292)
inline HRESULT Word::Paragraphs::IndentFirstLineCharWidth ( short Count ) {
    HRESULT _hr = raw_IndentFirstLineCharWidth(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1293)
inline HRESULT Word::Paragraphs::OutlinePromote ( ) {
    HRESULT _hr = raw_OutlinePromote();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1294)
inline HRESULT Word::Paragraphs::OutlineDemote ( ) {
    HRESULT _hr = raw_OutlineDemote();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1295)
inline HRESULT Word::Paragraphs::OutlineDemoteToBody ( ) {
    HRESULT _hr = raw_OutlineDemoteToBody();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1296)
inline HRESULT Word::Paragraphs::Indent ( ) {
    HRESULT _hr = raw_Indent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1297)
inline HRESULT Word::Paragraphs::Outdent ( ) {
    HRESULT _hr = raw_Outdent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1298)
inline float Word::Paragraphs::GetCharacterUnitRightIndent ( ) {
    float _result;
    HRESULT _hr = get_CharacterUnitRightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1299)
inline void Word::Paragraphs::PutCharacterUnitRightIndent ( float prop ) {
    HRESULT _hr = put_CharacterUnitRightIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1300)
inline float Word::Paragraphs::GetCharacterUnitLeftIndent ( ) {
    float _result;
    HRESULT _hr = get_CharacterUnitLeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1301)
inline void Word::Paragraphs::PutCharacterUnitLeftIndent ( float prop ) {
    HRESULT _hr = put_CharacterUnitLeftIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1302)
inline float Word::Paragraphs::GetCharacterUnitFirstLineIndent ( ) {
    float _result;
    HRESULT _hr = get_CharacterUnitFirstLineIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1303)
inline void Word::Paragraphs::PutCharacterUnitFirstLineIndent ( float prop ) {
    HRESULT _hr = put_CharacterUnitFirstLineIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1304)
inline float Word::Paragraphs::GetLineUnitBefore ( ) {
    float _result;
    HRESULT _hr = get_LineUnitBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1305)
inline void Word::Paragraphs::PutLineUnitBefore ( float prop ) {
    HRESULT _hr = put_LineUnitBefore(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1306)
inline float Word::Paragraphs::GetLineUnitAfter ( ) {
    float _result;
    HRESULT _hr = get_LineUnitAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1307)
inline void Word::Paragraphs::PutLineUnitAfter ( float prop ) {
    HRESULT _hr = put_LineUnitAfter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1308)
inline enum WdReadingOrder Word::Paragraphs::GetReadingOrder ( ) {
    enum WdReadingOrder _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1309)
inline void Word::Paragraphs::PutReadingOrder ( enum WdReadingOrder prop ) {
    HRESULT _hr = put_ReadingOrder(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1310)
inline long Word::Paragraphs::GetSpaceBeforeAuto ( ) {
    long _result;
    HRESULT _hr = get_SpaceBeforeAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1311)
inline void Word::Paragraphs::PutSpaceBeforeAuto ( long prop ) {
    HRESULT _hr = put_SpaceBeforeAuto(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1312)
inline long Word::Paragraphs::GetSpaceAfterAuto ( ) {
    long _result;
    HRESULT _hr = get_SpaceAfterAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1313)
inline void Word::Paragraphs::PutSpaceAfterAuto ( long prop ) {
    HRESULT _hr = put_SpaceAfterAuto(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1314)
inline HRESULT Word::Paragraphs::IncreaseSpacing ( ) {
    HRESULT _hr = raw_IncreaseSpacing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1315)
inline HRESULT Word::Paragraphs::DecreaseSpacing ( ) {
    HRESULT _hr = raw_DecreaseSpacing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Paragraph wrapper method implementations
//

#pragma implementation_key(1316)
inline Word::RangePtr Word::Paragraph::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1317)
inline Word::_ApplicationPtr Word::Paragraph::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1318)
inline long Word::Paragraph::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1319)
inline IDispatchPtr Word::Paragraph::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1320)
inline Word::_ParagraphFormatPtr Word::Paragraph::GetFormat ( ) {
    struct _ParagraphFormat * _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(1321)
inline void Word::Paragraph::PutFormat ( struct _ParagraphFormat * prop ) {
    HRESULT _hr = put_Format(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1322)
inline Word::TabStopsPtr Word::Paragraph::GetTabStops ( ) {
    struct TabStops * _result;
    HRESULT _hr = get_TabStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopsPtr(_result, false);
}

#pragma implementation_key(1323)
inline void Word::Paragraph::PutTabStops ( struct TabStops * prop ) {
    HRESULT _hr = put_TabStops(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1324)
inline Word::BordersPtr Word::Paragraph::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1325)
inline void Word::Paragraph::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1326)
inline Word::DropCapPtr Word::Paragraph::GetDropCap ( ) {
    struct DropCap * _result;
    HRESULT _hr = get_DropCap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DropCapPtr(_result, false);
}

#pragma implementation_key(1327)
inline _variant_t Word::Paragraph::GetStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1328)
inline void Word::Paragraph::PutStyle ( VARIANT * prop ) {
    HRESULT _hr = put_Style(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1329)
inline enum WdParagraphAlignment Word::Paragraph::GetAlignment ( ) {
    enum WdParagraphAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1330)
inline void Word::Paragraph::PutAlignment ( enum WdParagraphAlignment prop ) {
    HRESULT _hr = put_Alignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1331)
inline long Word::Paragraph::GetKeepTogether ( ) {
    long _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1332)
inline void Word::Paragraph::PutKeepTogether ( long prop ) {
    HRESULT _hr = put_KeepTogether(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1333)
inline long Word::Paragraph::GetKeepWithNext ( ) {
    long _result;
    HRESULT _hr = get_KeepWithNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1334)
inline void Word::Paragraph::PutKeepWithNext ( long prop ) {
    HRESULT _hr = put_KeepWithNext(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1335)
inline long Word::Paragraph::GetPageBreakBefore ( ) {
    long _result;
    HRESULT _hr = get_PageBreakBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1336)
inline void Word::Paragraph::PutPageBreakBefore ( long prop ) {
    HRESULT _hr = put_PageBreakBefore(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1337)
inline long Word::Paragraph::GetNoLineNumber ( ) {
    long _result;
    HRESULT _hr = get_NoLineNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1338)
inline void Word::Paragraph::PutNoLineNumber ( long prop ) {
    HRESULT _hr = put_NoLineNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1339)
inline float Word::Paragraph::GetRightIndent ( ) {
    float _result;
    HRESULT _hr = get_RightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1340)
inline void Word::Paragraph::PutRightIndent ( float prop ) {
    HRESULT _hr = put_RightIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1341)
inline float Word::Paragraph::GetLeftIndent ( ) {
    float _result;
    HRESULT _hr = get_LeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1342)
inline void Word::Paragraph::PutLeftIndent ( float prop ) {
    HRESULT _hr = put_LeftIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1343)
inline float Word::Paragraph::GetFirstLineIndent ( ) {
    float _result;
    HRESULT _hr = get_FirstLineIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1344)
inline void Word::Paragraph::PutFirstLineIndent ( float prop ) {
    HRESULT _hr = put_FirstLineIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1345)
inline float Word::Paragraph::GetLineSpacing ( ) {
    float _result;
    HRESULT _hr = get_LineSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1346)
inline void Word::Paragraph::PutLineSpacing ( float prop ) {
    HRESULT _hr = put_LineSpacing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1347)
inline enum WdLineSpacing Word::Paragraph::GetLineSpacingRule ( ) {
    enum WdLineSpacing _result;
    HRESULT _hr = get_LineSpacingRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1348)
inline void Word::Paragraph::PutLineSpacingRule ( enum WdLineSpacing prop ) {
    HRESULT _hr = put_LineSpacingRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1349)
inline float Word::Paragraph::GetSpaceBefore ( ) {
    float _result;
    HRESULT _hr = get_SpaceBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1350)
inline void Word::Paragraph::PutSpaceBefore ( float prop ) {
    HRESULT _hr = put_SpaceBefore(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1351)
inline float Word::Paragraph::GetSpaceAfter ( ) {
    float _result;
    HRESULT _hr = get_SpaceAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1352)
inline void Word::Paragraph::PutSpaceAfter ( float prop ) {
    HRESULT _hr = put_SpaceAfter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1353)
inline long Word::Paragraph::GetHyphenation ( ) {
    long _result;
    HRESULT _hr = get_Hyphenation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1354)
inline void Word::Paragraph::PutHyphenation ( long prop ) {
    HRESULT _hr = put_Hyphenation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1355)
inline long Word::Paragraph::GetWidowControl ( ) {
    long _result;
    HRESULT _hr = get_WidowControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1356)
inline void Word::Paragraph::PutWidowControl ( long prop ) {
    HRESULT _hr = put_WidowControl(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1357)
inline Word::ShadingPtr Word::Paragraph::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(1358)
inline long Word::Paragraph::GetFarEastLineBreakControl ( ) {
    long _result;
    HRESULT _hr = get_FarEastLineBreakControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1359)
inline void Word::Paragraph::PutFarEastLineBreakControl ( long prop ) {
    HRESULT _hr = put_FarEastLineBreakControl(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1360)
inline long Word::Paragraph::GetWordWrap ( ) {
    long _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1361)
inline void Word::Paragraph::PutWordWrap ( long prop ) {
    HRESULT _hr = put_WordWrap(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1362)
inline long Word::Paragraph::GetHangingPunctuation ( ) {
    long _result;
    HRESULT _hr = get_HangingPunctuation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1363)
inline void Word::Paragraph::PutHangingPunctuation ( long prop ) {
    HRESULT _hr = put_HangingPunctuation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1364)
inline long Word::Paragraph::GetHalfWidthPunctuationOnTopOfLine ( ) {
    long _result;
    HRESULT _hr = get_HalfWidthPunctuationOnTopOfLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1365)
inline void Word::Paragraph::PutHalfWidthPunctuationOnTopOfLine ( long prop ) {
    HRESULT _hr = put_HalfWidthPunctuationOnTopOfLine(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1366)
inline long Word::Paragraph::GetAddSpaceBetweenFarEastAndAlpha ( ) {
    long _result;
    HRESULT _hr = get_AddSpaceBetweenFarEastAndAlpha(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1367)
inline void Word::Paragraph::PutAddSpaceBetweenFarEastAndAlpha ( long prop ) {
    HRESULT _hr = put_AddSpaceBetweenFarEastAndAlpha(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1368)
inline long Word::Paragraph::GetAddSpaceBetweenFarEastAndDigit ( ) {
    long _result;
    HRESULT _hr = get_AddSpaceBetweenFarEastAndDigit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1369)
inline void Word::Paragraph::PutAddSpaceBetweenFarEastAndDigit ( long prop ) {
    HRESULT _hr = put_AddSpaceBetweenFarEastAndDigit(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1370)
inline enum WdBaselineAlignment Word::Paragraph::GetBaseLineAlignment ( ) {
    enum WdBaselineAlignment _result;
    HRESULT _hr = get_BaseLineAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1371)
inline void Word::Paragraph::PutBaseLineAlignment ( enum WdBaselineAlignment prop ) {
    HRESULT _hr = put_BaseLineAlignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1372)
inline long Word::Paragraph::GetAutoAdjustRightIndent ( ) {
    long _result;
    HRESULT _hr = get_AutoAdjustRightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1373)
inline void Word::Paragraph::PutAutoAdjustRightIndent ( long prop ) {
    HRESULT _hr = put_AutoAdjustRightIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1374)
inline long Word::Paragraph::GetDisableLineHeightGrid ( ) {
    long _result;
    HRESULT _hr = get_DisableLineHeightGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1375)
inline void Word::Paragraph::PutDisableLineHeightGrid ( long prop ) {
    HRESULT _hr = put_DisableLineHeightGrid(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1376)
inline enum WdOutlineLevel Word::Paragraph::GetOutlineLevel ( ) {
    enum WdOutlineLevel _result;
    HRESULT _hr = get_OutlineLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1377)
inline void Word::Paragraph::PutOutlineLevel ( enum WdOutlineLevel prop ) {
    HRESULT _hr = put_OutlineLevel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1378)
inline HRESULT Word::Paragraph::CloseUp ( ) {
    HRESULT _hr = raw_CloseUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1379)
inline HRESULT Word::Paragraph::OpenUp ( ) {
    HRESULT _hr = raw_OpenUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1380)
inline HRESULT Word::Paragraph::OpenOrCloseUp ( ) {
    HRESULT _hr = raw_OpenOrCloseUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1381)
inline HRESULT Word::Paragraph::TabHangingIndent ( short Count ) {
    HRESULT _hr = raw_TabHangingIndent(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1382)
inline HRESULT Word::Paragraph::TabIndent ( short Count ) {
    HRESULT _hr = raw_TabIndent(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1383)
inline HRESULT Word::Paragraph::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1384)
inline HRESULT Word::Paragraph::Space1 ( ) {
    HRESULT _hr = raw_Space1();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1385)
inline HRESULT Word::Paragraph::Space15 ( ) {
    HRESULT _hr = raw_Space15();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1386)
inline HRESULT Word::Paragraph::Space2 ( ) {
    HRESULT _hr = raw_Space2();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1387)
inline HRESULT Word::Paragraph::IndentCharWidth ( short Count ) {
    HRESULT _hr = raw_IndentCharWidth(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1388)
inline HRESULT Word::Paragraph::IndentFirstLineCharWidth ( short Count ) {
    HRESULT _hr = raw_IndentFirstLineCharWidth(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1389)
inline Word::ParagraphPtr Word::Paragraph::Next ( VARIANT * Count ) {
    struct Paragraph * _result;
    HRESULT _hr = raw_Next(Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphPtr(_result, false);
}

#pragma implementation_key(1390)
inline Word::ParagraphPtr Word::Paragraph::Previous ( VARIANT * Count ) {
    struct Paragraph * _result;
    HRESULT _hr = raw_Previous(Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphPtr(_result, false);
}

#pragma implementation_key(1391)
inline HRESULT Word::Paragraph::OutlinePromote ( ) {
    HRESULT _hr = raw_OutlinePromote();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1392)
inline HRESULT Word::Paragraph::OutlineDemote ( ) {
    HRESULT _hr = raw_OutlineDemote();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1393)
inline HRESULT Word::Paragraph::OutlineDemoteToBody ( ) {
    HRESULT _hr = raw_OutlineDemoteToBody();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1394)
inline HRESULT Word::Paragraph::Indent ( ) {
    HRESULT _hr = raw_Indent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1395)
inline HRESULT Word::Paragraph::Outdent ( ) {
    HRESULT _hr = raw_Outdent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1396)
inline float Word::Paragraph::GetCharacterUnitRightIndent ( ) {
    float _result;
    HRESULT _hr = get_CharacterUnitRightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1397)
inline void Word::Paragraph::PutCharacterUnitRightIndent ( float prop ) {
    HRESULT _hr = put_CharacterUnitRightIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1398)
inline float Word::Paragraph::GetCharacterUnitLeftIndent ( ) {
    float _result;
    HRESULT _hr = get_CharacterUnitLeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1399)
inline void Word::Paragraph::PutCharacterUnitLeftIndent ( float prop ) {
    HRESULT _hr = put_CharacterUnitLeftIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1400)
inline float Word::Paragraph::GetCharacterUnitFirstLineIndent ( ) {
    float _result;
    HRESULT _hr = get_CharacterUnitFirstLineIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1401)
inline void Word::Paragraph::PutCharacterUnitFirstLineIndent ( float prop ) {
    HRESULT _hr = put_CharacterUnitFirstLineIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1402)
inline float Word::Paragraph::GetLineUnitBefore ( ) {
    float _result;
    HRESULT _hr = get_LineUnitBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1403)
inline void Word::Paragraph::PutLineUnitBefore ( float prop ) {
    HRESULT _hr = put_LineUnitBefore(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1404)
inline float Word::Paragraph::GetLineUnitAfter ( ) {
    float _result;
    HRESULT _hr = get_LineUnitAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1405)
inline void Word::Paragraph::PutLineUnitAfter ( float prop ) {
    HRESULT _hr = put_LineUnitAfter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1406)
inline enum WdReadingOrder Word::Paragraph::GetReadingOrder ( ) {
    enum WdReadingOrder _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1407)
inline void Word::Paragraph::PutReadingOrder ( enum WdReadingOrder prop ) {
    HRESULT _hr = put_ReadingOrder(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1408)
inline _bstr_t Word::Paragraph::GetID ( ) {
    BSTR _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1409)
inline void Word::Paragraph::PutID ( _bstr_t prop ) {
    HRESULT _hr = put_ID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1410)
inline long Word::Paragraph::GetSpaceBeforeAuto ( ) {
    long _result;
    HRESULT _hr = get_SpaceBeforeAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1411)
inline void Word::Paragraph::PutSpaceBeforeAuto ( long prop ) {
    HRESULT _hr = put_SpaceBeforeAuto(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1412)
inline long Word::Paragraph::GetSpaceAfterAuto ( ) {
    long _result;
    HRESULT _hr = get_SpaceAfterAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1413)
inline void Word::Paragraph::PutSpaceAfterAuto ( long prop ) {
    HRESULT _hr = put_SpaceAfterAuto(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1414)
inline VARIANT_BOOL Word::Paragraph::GetIsStyleSeparator ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsStyleSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1415)
inline HRESULT Word::Paragraph::SelectNumber ( ) {
    HRESULT _hr = raw_SelectNumber();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DropCap wrapper method implementations
//

#pragma implementation_key(1416)
inline Word::_ApplicationPtr Word::DropCap::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1417)
inline long Word::DropCap::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1418)
inline IDispatchPtr Word::DropCap::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1419)
inline enum WdDropPosition Word::DropCap::GetPosition ( ) {
    enum WdDropPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1420)
inline void Word::DropCap::PutPosition ( enum WdDropPosition prop ) {
    HRESULT _hr = put_Position(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1421)
inline _bstr_t Word::DropCap::GetFontName ( ) {
    BSTR _result;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1422)
inline void Word::DropCap::PutFontName ( _bstr_t prop ) {
    HRESULT _hr = put_FontName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1423)
inline long Word::DropCap::GetLinesToDrop ( ) {
    long _result;
    HRESULT _hr = get_LinesToDrop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1424)
inline void Word::DropCap::PutLinesToDrop ( long prop ) {
    HRESULT _hr = put_LinesToDrop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1425)
inline float Word::DropCap::GetDistanceFromText ( ) {
    float _result;
    HRESULT _hr = get_DistanceFromText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1426)
inline void Word::DropCap::PutDistanceFromText ( float prop ) {
    HRESULT _hr = put_DistanceFromText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1427)
inline HRESULT Word::DropCap::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1428)
inline HRESULT Word::DropCap::Enable ( ) {
    HRESULT _hr = raw_Enable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TabStops wrapper method implementations
//

#pragma implementation_key(1429)
inline IUnknownPtr Word::TabStops::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1430)
inline long Word::TabStops::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1431)
inline Word::_ApplicationPtr Word::TabStops::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1432)
inline long Word::TabStops::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1433)
inline IDispatchPtr Word::TabStops::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1434)
inline Word::TabStopPtr Word::TabStops::Item ( VARIANT * Index ) {
    struct TabStop * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

#pragma implementation_key(1435)
inline Word::TabStopPtr Word::TabStops::Add ( float Position, VARIANT * Alignment, VARIANT * Leader ) {
    struct TabStop * _result;
    HRESULT _hr = raw_Add(Position, Alignment, Leader, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

#pragma implementation_key(1436)
inline HRESULT Word::TabStops::ClearAll ( ) {
    HRESULT _hr = raw_ClearAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1437)
inline Word::TabStopPtr Word::TabStops::Before ( float Position ) {
    struct TabStop * _result;
    HRESULT _hr = raw_Before(Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

#pragma implementation_key(1438)
inline Word::TabStopPtr Word::TabStops::After ( float Position ) {
    struct TabStop * _result;
    HRESULT _hr = raw_After(Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

//
// interface TabStop wrapper method implementations
//

#pragma implementation_key(1439)
inline Word::_ApplicationPtr Word::TabStop::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1440)
inline long Word::TabStop::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1441)
inline IDispatchPtr Word::TabStop::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1442)
inline enum WdTabAlignment Word::TabStop::GetAlignment ( ) {
    enum WdTabAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1443)
inline void Word::TabStop::PutAlignment ( enum WdTabAlignment prop ) {
    HRESULT _hr = put_Alignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1444)
inline enum WdTabLeader Word::TabStop::GetLeader ( ) {
    enum WdTabLeader _result;
    HRESULT _hr = get_Leader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1445)
inline void Word::TabStop::PutLeader ( enum WdTabLeader prop ) {
    HRESULT _hr = put_Leader(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1446)
inline float Word::TabStop::GetPosition ( ) {
    float _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1447)
inline void Word::TabStop::PutPosition ( float prop ) {
    HRESULT _hr = put_Position(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1448)
inline VARIANT_BOOL Word::TabStop::GetCustomTab ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CustomTab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1449)
inline Word::TabStopPtr Word::TabStop::GetNext ( ) {
    struct TabStop * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

#pragma implementation_key(1450)
inline Word::TabStopPtr Word::TabStop::GetPrevious ( ) {
    struct TabStop * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

#pragma implementation_key(1451)
inline HRESULT Word::TabStop::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _ParagraphFormat wrapper method implementations
//

#pragma implementation_key(1452)
inline Word::_ApplicationPtr Word::_ParagraphFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1453)
inline long Word::_ParagraphFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1454)
inline IDispatchPtr Word::_ParagraphFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1455)
inline Word::_ParagraphFormatPtr Word::_ParagraphFormat::GetDuplicate ( ) {
    struct _ParagraphFormat * _result;
    HRESULT _hr = get_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(1456)
inline _variant_t Word::_ParagraphFormat::GetStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1457)
inline void Word::_ParagraphFormat::PutStyle ( VARIANT * prop ) {
    HRESULT _hr = put_Style(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1458)
inline enum WdParagraphAlignment Word::_ParagraphFormat::GetAlignment ( ) {
    enum WdParagraphAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1459)
inline void Word::_ParagraphFormat::PutAlignment ( enum WdParagraphAlignment prop ) {
    HRESULT _hr = put_Alignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1460)
inline long Word::_ParagraphFormat::GetKeepTogether ( ) {
    long _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1461)
inline void Word::_ParagraphFormat::PutKeepTogether ( long prop ) {
    HRESULT _hr = put_KeepTogether(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1462)
inline long Word::_ParagraphFormat::GetKeepWithNext ( ) {
    long _result;
    HRESULT _hr = get_KeepWithNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1463)
inline void Word::_ParagraphFormat::PutKeepWithNext ( long prop ) {
    HRESULT _hr = put_KeepWithNext(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1464)
inline long Word::_ParagraphFormat::GetPageBreakBefore ( ) {
    long _result;
    HRESULT _hr = get_PageBreakBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1465)
inline void Word::_ParagraphFormat::PutPageBreakBefore ( long prop ) {
    HRESULT _hr = put_PageBreakBefore(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1466)
inline long Word::_ParagraphFormat::GetNoLineNumber ( ) {
    long _result;
    HRESULT _hr = get_NoLineNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1467)
inline void Word::_ParagraphFormat::PutNoLineNumber ( long prop ) {
    HRESULT _hr = put_NoLineNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1468)
inline float Word::_ParagraphFormat::GetRightIndent ( ) {
    float _result;
    HRESULT _hr = get_RightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1469)
inline void Word::_ParagraphFormat::PutRightIndent ( float prop ) {
    HRESULT _hr = put_RightIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1470)
inline float Word::_ParagraphFormat::GetLeftIndent ( ) {
    float _result;
    HRESULT _hr = get_LeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1471)
inline void Word::_ParagraphFormat::PutLeftIndent ( float prop ) {
    HRESULT _hr = put_LeftIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1472)
inline float Word::_ParagraphFormat::GetFirstLineIndent ( ) {
    float _result;
    HRESULT _hr = get_FirstLineIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1473)
inline void Word::_ParagraphFormat::PutFirstLineIndent ( float prop ) {
    HRESULT _hr = put_FirstLineIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1474)
inline float Word::_ParagraphFormat::GetLineSpacing ( ) {
    float _result;
    HRESULT _hr = get_LineSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1475)
inline void Word::_ParagraphFormat::PutLineSpacing ( float prop ) {
    HRESULT _hr = put_LineSpacing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1476)
inline enum WdLineSpacing Word::_ParagraphFormat::GetLineSpacingRule ( ) {
    enum WdLineSpacing _result;
    HRESULT _hr = get_LineSpacingRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1477)
inline void Word::_ParagraphFormat::PutLineSpacingRule ( enum WdLineSpacing prop ) {
    HRESULT _hr = put_LineSpacingRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1478)
inline float Word::_ParagraphFormat::GetSpaceBefore ( ) {
    float _result;
    HRESULT _hr = get_SpaceBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1479)
inline void Word::_ParagraphFormat::PutSpaceBefore ( float prop ) {
    HRESULT _hr = put_SpaceBefore(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1480)
inline float Word::_ParagraphFormat::GetSpaceAfter ( ) {
    float _result;
    HRESULT _hr = get_SpaceAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1481)
inline void Word::_ParagraphFormat::PutSpaceAfter ( float prop ) {
    HRESULT _hr = put_SpaceAfter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1482)
inline long Word::_ParagraphFormat::GetHyphenation ( ) {
    long _result;
    HRESULT _hr = get_Hyphenation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1483)
inline void Word::_ParagraphFormat::PutHyphenation ( long prop ) {
    HRESULT _hr = put_Hyphenation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1484)
inline long Word::_ParagraphFormat::GetWidowControl ( ) {
    long _result;
    HRESULT _hr = get_WidowControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1485)
inline void Word::_ParagraphFormat::PutWidowControl ( long prop ) {
    HRESULT _hr = put_WidowControl(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1486)
inline long Word::_ParagraphFormat::GetFarEastLineBreakControl ( ) {
    long _result;
    HRESULT _hr = get_FarEastLineBreakControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1487)
inline void Word::_ParagraphFormat::PutFarEastLineBreakControl ( long prop ) {
    HRESULT _hr = put_FarEastLineBreakControl(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1488)
inline long Word::_ParagraphFormat::GetWordWrap ( ) {
    long _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1489)
inline void Word::_ParagraphFormat::PutWordWrap ( long prop ) {
    HRESULT _hr = put_WordWrap(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1490)
inline long Word::_ParagraphFormat::GetHangingPunctuation ( ) {
    long _result;
    HRESULT _hr = get_HangingPunctuation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1491)
inline void Word::_ParagraphFormat::PutHangingPunctuation ( long prop ) {
    HRESULT _hr = put_HangingPunctuation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1492)
inline long Word::_ParagraphFormat::GetHalfWidthPunctuationOnTopOfLine ( ) {
    long _result;
    HRESULT _hr = get_HalfWidthPunctuationOnTopOfLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1493)
inline void Word::_ParagraphFormat::PutHalfWidthPunctuationOnTopOfLine ( long prop ) {
    HRESULT _hr = put_HalfWidthPunctuationOnTopOfLine(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1494)
inline long Word::_ParagraphFormat::GetAddSpaceBetweenFarEastAndAlpha ( ) {
    long _result;
    HRESULT _hr = get_AddSpaceBetweenFarEastAndAlpha(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1495)
inline void Word::_ParagraphFormat::PutAddSpaceBetweenFarEastAndAlpha ( long prop ) {
    HRESULT _hr = put_AddSpaceBetweenFarEastAndAlpha(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1496)
inline long Word::_ParagraphFormat::GetAddSpaceBetweenFarEastAndDigit ( ) {
    long _result;
    HRESULT _hr = get_AddSpaceBetweenFarEastAndDigit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1497)
inline void Word::_ParagraphFormat::PutAddSpaceBetweenFarEastAndDigit ( long prop ) {
    HRESULT _hr = put_AddSpaceBetweenFarEastAndDigit(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1498)
inline enum WdBaselineAlignment Word::_ParagraphFormat::GetBaseLineAlignment ( ) {
    enum WdBaselineAlignment _result;
    HRESULT _hr = get_BaseLineAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1499)
inline void Word::_ParagraphFormat::PutBaseLineAlignment ( enum WdBaselineAlignment prop ) {
    HRESULT _hr = put_BaseLineAlignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1500)
inline long Word::_ParagraphFormat::GetAutoAdjustRightIndent ( ) {
    long _result;
    HRESULT _hr = get_AutoAdjustRightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1501)
inline void Word::_ParagraphFormat::PutAutoAdjustRightIndent ( long prop ) {
    HRESULT _hr = put_AutoAdjustRightIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1502)
inline long Word::_ParagraphFormat::GetDisableLineHeightGrid ( ) {
    long _result;
    HRESULT _hr = get_DisableLineHeightGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1503)
inline void Word::_ParagraphFormat::PutDisableLineHeightGrid ( long prop ) {
    HRESULT _hr = put_DisableLineHeightGrid(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1504)
inline Word::TabStopsPtr Word::_ParagraphFormat::GetTabStops ( ) {
    struct TabStops * _result;
    HRESULT _hr = get_TabStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopsPtr(_result, false);
}

#pragma implementation_key(1505)
inline void Word::_ParagraphFormat::PutTabStops ( struct TabStops * prop ) {
    HRESULT _hr = put_TabStops(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1506)
inline Word::BordersPtr Word::_ParagraphFormat::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1507)
inline void Word::_ParagraphFormat::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1508)
inline Word::ShadingPtr Word::_ParagraphFormat::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(1509)
inline enum WdOutlineLevel Word::_ParagraphFormat::GetOutlineLevel ( ) {
    enum WdOutlineLevel _result;
    HRESULT _hr = get_OutlineLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1510)
inline void Word::_ParagraphFormat::PutOutlineLevel ( enum WdOutlineLevel prop ) {
    HRESULT _hr = put_OutlineLevel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1511)
inline HRESULT Word::_ParagraphFormat::CloseUp ( ) {
    HRESULT _hr = raw_CloseUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1512)
inline HRESULT Word::_ParagraphFormat::OpenUp ( ) {
    HRESULT _hr = raw_OpenUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1513)
inline HRESULT Word::_ParagraphFormat::OpenOrCloseUp ( ) {
    HRESULT _hr = raw_OpenOrCloseUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1514)
inline HRESULT Word::_ParagraphFormat::TabHangingIndent ( short Count ) {
    HRESULT _hr = raw_TabHangingIndent(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1515)
inline HRESULT Word::_ParagraphFormat::TabIndent ( short Count ) {
    HRESULT _hr = raw_TabIndent(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1516)
inline HRESULT Word::_ParagraphFormat::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1517)
inline HRESULT Word::_ParagraphFormat::Space1 ( ) {
    HRESULT _hr = raw_Space1();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1518)
inline HRESULT Word::_ParagraphFormat::Space15 ( ) {
    HRESULT _hr = raw_Space15();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1519)
inline HRESULT Word::_ParagraphFormat::Space2 ( ) {
    HRESULT _hr = raw_Space2();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1520)
inline HRESULT Word::_ParagraphFormat::IndentCharWidth ( short Count ) {
    HRESULT _hr = raw_IndentCharWidth(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1521)
inline HRESULT Word::_ParagraphFormat::IndentFirstLineCharWidth ( short Count ) {
    HRESULT _hr = raw_IndentFirstLineCharWidth(Count);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1522)
inline float Word::_ParagraphFormat::GetCharacterUnitRightIndent ( ) {
    float _result;
    HRESULT _hr = get_CharacterUnitRightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1523)
inline void Word::_ParagraphFormat::PutCharacterUnitRightIndent ( float prop ) {
    HRESULT _hr = put_CharacterUnitRightIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1524)
inline float Word::_ParagraphFormat::GetCharacterUnitLeftIndent ( ) {
    float _result;
    HRESULT _hr = get_CharacterUnitLeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1525)
inline void Word::_ParagraphFormat::PutCharacterUnitLeftIndent ( float prop ) {
    HRESULT _hr = put_CharacterUnitLeftIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1526)
inline float Word::_ParagraphFormat::GetCharacterUnitFirstLineIndent ( ) {
    float _result;
    HRESULT _hr = get_CharacterUnitFirstLineIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1527)
inline void Word::_ParagraphFormat::PutCharacterUnitFirstLineIndent ( float prop ) {
    HRESULT _hr = put_CharacterUnitFirstLineIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1528)
inline float Word::_ParagraphFormat::GetLineUnitBefore ( ) {
    float _result;
    HRESULT _hr = get_LineUnitBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1529)
inline void Word::_ParagraphFormat::PutLineUnitBefore ( float prop ) {
    HRESULT _hr = put_LineUnitBefore(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1530)
inline float Word::_ParagraphFormat::GetLineUnitAfter ( ) {
    float _result;
    HRESULT _hr = get_LineUnitAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1531)
inline void Word::_ParagraphFormat::PutLineUnitAfter ( float prop ) {
    HRESULT _hr = put_LineUnitAfter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1532)
inline enum WdReadingOrder Word::_ParagraphFormat::GetReadingOrder ( ) {
    enum WdReadingOrder _result;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1533)
inline void Word::_ParagraphFormat::PutReadingOrder ( enum WdReadingOrder prop ) {
    HRESULT _hr = put_ReadingOrder(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1534)
inline long Word::_ParagraphFormat::GetSpaceBeforeAuto ( ) {
    long _result;
    HRESULT _hr = get_SpaceBeforeAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1535)
inline void Word::_ParagraphFormat::PutSpaceBeforeAuto ( long prop ) {
    HRESULT _hr = put_SpaceBeforeAuto(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1536)
inline long Word::_ParagraphFormat::GetSpaceAfterAuto ( ) {
    long _result;
    HRESULT _hr = get_SpaceAfterAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1537)
inline void Word::_ParagraphFormat::PutSpaceAfterAuto ( long prop ) {
    HRESULT _hr = put_SpaceAfterAuto(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Font wrapper method implementations
//

#pragma implementation_key(1538)
inline Word::_ApplicationPtr Word::_Font::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1539)
inline long Word::_Font::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1540)
inline IDispatchPtr Word::_Font::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1541)
inline Word::_FontPtr Word::_Font::GetDuplicate ( ) {
    struct _Font * _result;
    HRESULT _hr = get_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FontPtr(_result, false);
}

#pragma implementation_key(1542)
inline long Word::_Font::GetBold ( ) {
    long _result;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1543)
inline void Word::_Font::PutBold ( long prop ) {
    HRESULT _hr = put_Bold(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1544)
inline long Word::_Font::GetItalic ( ) {
    long _result;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1545)
inline void Word::_Font::PutItalic ( long prop ) {
    HRESULT _hr = put_Italic(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1546)
inline long Word::_Font::GetHidden ( ) {
    long _result;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1547)
inline void Word::_Font::PutHidden ( long prop ) {
    HRESULT _hr = put_Hidden(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1548)
inline long Word::_Font::GetSmallCaps ( ) {
    long _result;
    HRESULT _hr = get_SmallCaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1549)
inline void Word::_Font::PutSmallCaps ( long prop ) {
    HRESULT _hr = put_SmallCaps(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1550)
inline long Word::_Font::GetAllCaps ( ) {
    long _result;
    HRESULT _hr = get_AllCaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1551)
inline void Word::_Font::PutAllCaps ( long prop ) {
    HRESULT _hr = put_AllCaps(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1552)
inline long Word::_Font::GetStrikeThrough ( ) {
    long _result;
    HRESULT _hr = get_StrikeThrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1553)
inline void Word::_Font::PutStrikeThrough ( long prop ) {
    HRESULT _hr = put_StrikeThrough(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1554)
inline long Word::_Font::GetDoubleStrikeThrough ( ) {
    long _result;
    HRESULT _hr = get_DoubleStrikeThrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1555)
inline void Word::_Font::PutDoubleStrikeThrough ( long prop ) {
    HRESULT _hr = put_DoubleStrikeThrough(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1556)
inline enum WdColorIndex Word::_Font::GetColorIndex ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1557)
inline void Word::_Font::PutColorIndex ( enum WdColorIndex prop ) {
    HRESULT _hr = put_ColorIndex(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1558)
inline long Word::_Font::GetSubscript ( ) {
    long _result;
    HRESULT _hr = get_Subscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1559)
inline void Word::_Font::PutSubscript ( long prop ) {
    HRESULT _hr = put_Subscript(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1560)
inline long Word::_Font::GetSuperscript ( ) {
    long _result;
    HRESULT _hr = get_Superscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1561)
inline void Word::_Font::PutSuperscript ( long prop ) {
    HRESULT _hr = put_Superscript(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1562)
inline enum WdUnderline Word::_Font::GetUnderline ( ) {
    enum WdUnderline _result;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1563)
inline void Word::_Font::PutUnderline ( enum WdUnderline prop ) {
    HRESULT _hr = put_Underline(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1564)
inline float Word::_Font::GetSize ( ) {
    float _result;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1565)
inline void Word::_Font::PutSize ( float prop ) {
    HRESULT _hr = put_Size(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1566)
inline _bstr_t Word::_Font::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1567)
inline void Word::_Font::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1568)
inline long Word::_Font::GetPosition ( ) {
    long _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1569)
inline void Word::_Font::PutPosition ( long prop ) {
    HRESULT _hr = put_Position(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1570)
inline float Word::_Font::GetSpacing ( ) {
    float _result;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1571)
inline void Word::_Font::PutSpacing ( float prop ) {
    HRESULT _hr = put_Spacing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1572)
inline long Word::_Font::GetScaling ( ) {
    long _result;
    HRESULT _hr = get_Scaling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1573)
inline void Word::_Font::PutScaling ( long prop ) {
    HRESULT _hr = put_Scaling(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1574)
inline long Word::_Font::GetShadow ( ) {
    long _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1575)
inline void Word::_Font::PutShadow ( long prop ) {
    HRESULT _hr = put_Shadow(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1576)
inline long Word::_Font::GetOutline ( ) {
    long _result;
    HRESULT _hr = get_Outline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1577)
inline void Word::_Font::PutOutline ( long prop ) {
    HRESULT _hr = put_Outline(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1578)
inline long Word::_Font::GetEmboss ( ) {
    long _result;
    HRESULT _hr = get_Emboss(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1579)
inline void Word::_Font::PutEmboss ( long prop ) {
    HRESULT _hr = put_Emboss(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1580)
inline float Word::_Font::GetKerning ( ) {
    float _result;
    HRESULT _hr = get_Kerning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1581)
inline void Word::_Font::PutKerning ( float prop ) {
    HRESULT _hr = put_Kerning(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1582)
inline long Word::_Font::GetEngrave ( ) {
    long _result;
    HRESULT _hr = get_Engrave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1583)
inline void Word::_Font::PutEngrave ( long prop ) {
    HRESULT _hr = put_Engrave(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1584)
inline enum WdAnimation Word::_Font::GetAnimation ( ) {
    enum WdAnimation _result;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1585)
inline void Word::_Font::PutAnimation ( enum WdAnimation prop ) {
    HRESULT _hr = put_Animation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1586)
inline Word::BordersPtr Word::_Font::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1587)
inline void Word::_Font::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1588)
inline Word::ShadingPtr Word::_Font::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(1589)
inline enum WdEmphasisMark Word::_Font::GetEmphasisMark ( ) {
    enum WdEmphasisMark _result;
    HRESULT _hr = get_EmphasisMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1590)
inline void Word::_Font::PutEmphasisMark ( enum WdEmphasisMark prop ) {
    HRESULT _hr = put_EmphasisMark(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1591)
inline VARIANT_BOOL Word::_Font::GetDisableCharacterSpaceGrid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisableCharacterSpaceGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1592)
inline void Word::_Font::PutDisableCharacterSpaceGrid ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisableCharacterSpaceGrid(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1593)
inline _bstr_t Word::_Font::GetNameFarEast ( ) {
    BSTR _result;
    HRESULT _hr = get_NameFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1594)
inline void Word::_Font::PutNameFarEast ( _bstr_t prop ) {
    HRESULT _hr = put_NameFarEast(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1595)
inline _bstr_t Word::_Font::GetNameAscii ( ) {
    BSTR _result;
    HRESULT _hr = get_NameAscii(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1596)
inline void Word::_Font::PutNameAscii ( _bstr_t prop ) {
    HRESULT _hr = put_NameAscii(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1597)
inline _bstr_t Word::_Font::GetNameOther ( ) {
    BSTR _result;
    HRESULT _hr = get_NameOther(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1598)
inline void Word::_Font::PutNameOther ( _bstr_t prop ) {
    HRESULT _hr = put_NameOther(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1599)
inline HRESULT Word::_Font::Grow ( ) {
    HRESULT _hr = raw_Grow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1600)
inline HRESULT Word::_Font::Shrink ( ) {
    HRESULT _hr = raw_Shrink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1601)
inline HRESULT Word::_Font::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1602)
inline HRESULT Word::_Font::SetAsTemplateDefault ( ) {
    HRESULT _hr = raw_SetAsTemplateDefault();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1603)
inline enum WdColor Word::_Font::GetColor ( ) {
    enum WdColor _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1604)
inline void Word::_Font::PutColor ( enum WdColor prop ) {
    HRESULT _hr = put_Color(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1605)
inline long Word::_Font::GetBoldBi ( ) {
    long _result;
    HRESULT _hr = get_BoldBi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1606)
inline void Word::_Font::PutBoldBi ( long prop ) {
    HRESULT _hr = put_BoldBi(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1607)
inline long Word::_Font::GetItalicBi ( ) {
    long _result;
    HRESULT _hr = get_ItalicBi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1608)
inline void Word::_Font::PutItalicBi ( long prop ) {
    HRESULT _hr = put_ItalicBi(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1609)
inline float Word::_Font::GetSizeBi ( ) {
    float _result;
    HRESULT _hr = get_SizeBi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1610)
inline void Word::_Font::PutSizeBi ( float prop ) {
    HRESULT _hr = put_SizeBi(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1611)
inline _bstr_t Word::_Font::GetNameBi ( ) {
    BSTR _result;
    HRESULT _hr = get_NameBi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1612)
inline void Word::_Font::PutNameBi ( _bstr_t prop ) {
    HRESULT _hr = put_NameBi(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1613)
inline enum WdColorIndex Word::_Font::GetColorIndexBi ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_ColorIndexBi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1614)
inline void Word::_Font::PutColorIndexBi ( enum WdColorIndex prop ) {
    HRESULT _hr = put_ColorIndexBi(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1615)
inline enum WdColor Word::_Font::GetDiacriticColor ( ) {
    enum WdColor _result;
    HRESULT _hr = get_DiacriticColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1616)
inline void Word::_Font::PutDiacriticColor ( enum WdColor prop ) {
    HRESULT _hr = put_DiacriticColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1617)
inline enum WdColor Word::_Font::GetUnderlineColor ( ) {
    enum WdColor _result;
    HRESULT _hr = get_UnderlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1618)
inline void Word::_Font::PutUnderlineColor ( enum WdColor prop ) {
    HRESULT _hr = put_UnderlineColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Table wrapper method implementations
//

#pragma implementation_key(1619)
inline Word::RangePtr Word::Table::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1620)
inline Word::_ApplicationPtr Word::Table::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1621)
inline long Word::Table::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1622)
inline IDispatchPtr Word::Table::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1623)
inline Word::ColumnsPtr Word::Table::GetColumns ( ) {
    struct Columns * _result;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnsPtr(_result, false);
}

#pragma implementation_key(1624)
inline Word::RowsPtr Word::Table::GetRows ( ) {
    struct Rows * _result;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowsPtr(_result, false);
}

#pragma implementation_key(1625)
inline Word::BordersPtr Word::Table::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1626)
inline void Word::Table::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1627)
inline Word::ShadingPtr Word::Table::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(1628)
inline VARIANT_BOOL Word::Table::GetUniform ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Uniform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1629)
inline long Word::Table::GetAutoFormatType ( ) {
    long _result;
    HRESULT _hr = get_AutoFormatType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1630)
inline HRESULT Word::Table::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1631)
inline HRESULT Word::Table::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1632)
inline HRESULT Word::Table::SortOld ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * CaseSensitive, VARIANT * LanguageID ) {
    HRESULT _hr = raw_SortOld(ExcludeHeader, FieldNumber, SortFieldType, SortOrder, FieldNumber2, SortFieldType2, SortOrder2, FieldNumber3, SortFieldType3, SortOrder3, CaseSensitive, LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1633)
inline HRESULT Word::Table::SortAscending ( ) {
    HRESULT _hr = raw_SortAscending();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1634)
inline HRESULT Word::Table::SortDescending ( ) {
    HRESULT _hr = raw_SortDescending();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1635)
inline HRESULT Word::Table::AutoFormat ( VARIANT * Format, VARIANT * ApplyBorders, VARIANT * ApplyShading, VARIANT * ApplyFont, VARIANT * ApplyColor, VARIANT * ApplyHeadingRows, VARIANT * ApplyLastRow, VARIANT * ApplyFirstColumn, VARIANT * ApplyLastColumn, VARIANT * AutoFit ) {
    HRESULT _hr = raw_AutoFormat(Format, ApplyBorders, ApplyShading, ApplyFont, ApplyColor, ApplyHeadingRows, ApplyLastRow, ApplyFirstColumn, ApplyLastColumn, AutoFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1636)
inline HRESULT Word::Table::UpdateAutoFormat ( ) {
    HRESULT _hr = raw_UpdateAutoFormat();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1637)
inline Word::RangePtr Word::Table::ConvertToTextOld ( VARIANT * Separator ) {
    struct Range * _result;
    HRESULT _hr = raw_ConvertToTextOld(Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1638)
inline Word::CellPtr Word::Table::Cell ( long Row, long Column ) {
    struct Cell * _result;
    HRESULT _hr = raw_Cell(Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

#pragma implementation_key(1639)
inline Word::TablePtr Word::Table::Split ( VARIANT * BeforeRow ) {
    struct Table * _result;
    HRESULT _hr = raw_Split(BeforeRow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(1640)
inline Word::RangePtr Word::Table::ConvertToText ( VARIANT * Separator, VARIANT * NestedTables ) {
    struct Range * _result;
    HRESULT _hr = raw_ConvertToText(Separator, NestedTables, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1641)
inline HRESULT Word::Table::AutoFitBehavior ( enum WdAutoFitBehavior Behavior ) {
    HRESULT _hr = raw_AutoFitBehavior(Behavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1642)
inline HRESULT Word::Table::Sort ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * CaseSensitive, VARIANT * BidiSort, VARIANT * IgnoreThe, VARIANT * IgnoreKashida, VARIANT * IgnoreDiacritics, VARIANT * IgnoreHe, VARIANT * LanguageID ) {
    HRESULT _hr = raw_Sort(ExcludeHeader, FieldNumber, SortFieldType, SortOrder, FieldNumber2, SortFieldType2, SortOrder2, FieldNumber3, SortFieldType3, SortOrder3, CaseSensitive, BidiSort, IgnoreThe, IgnoreKashida, IgnoreDiacritics, IgnoreHe, LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1643)
inline Word::TablesPtr Word::Table::GetTables ( ) {
    struct Tables * _result;
    HRESULT _hr = get_Tables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablesPtr(_result, false);
}

#pragma implementation_key(1644)
inline long Word::Table::GetNestingLevel ( ) {
    long _result;
    HRESULT _hr = get_NestingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1645)
inline VARIANT_BOOL Word::Table::GetAllowPageBreaks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1646)
inline void Word::Table::PutAllowPageBreaks ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AllowPageBreaks(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1647)
inline VARIANT_BOOL Word::Table::GetAllowAutoFit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowAutoFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1648)
inline void Word::Table::PutAllowAutoFit ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AllowAutoFit(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1649)
inline float Word::Table::GetPreferredWidth ( ) {
    float _result;
    HRESULT _hr = get_PreferredWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1650)
inline void Word::Table::PutPreferredWidth ( float prop ) {
    HRESULT _hr = put_PreferredWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1651)
inline enum WdPreferredWidthType Word::Table::GetPreferredWidthType ( ) {
    enum WdPreferredWidthType _result;
    HRESULT _hr = get_PreferredWidthType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1652)
inline void Word::Table::PutPreferredWidthType ( enum WdPreferredWidthType prop ) {
    HRESULT _hr = put_PreferredWidthType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1653)
inline float Word::Table::GetTopPadding ( ) {
    float _result;
    HRESULT _hr = get_TopPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1654)
inline void Word::Table::PutTopPadding ( float prop ) {
    HRESULT _hr = put_TopPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1655)
inline float Word::Table::GetBottomPadding ( ) {
    float _result;
    HRESULT _hr = get_BottomPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1656)
inline void Word::Table::PutBottomPadding ( float prop ) {
    HRESULT _hr = put_BottomPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1657)
inline float Word::Table::GetLeftPadding ( ) {
    float _result;
    HRESULT _hr = get_LeftPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1658)
inline void Word::Table::PutLeftPadding ( float prop ) {
    HRESULT _hr = put_LeftPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1659)
inline float Word::Table::GetRightPadding ( ) {
    float _result;
    HRESULT _hr = get_RightPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1660)
inline void Word::Table::PutRightPadding ( float prop ) {
    HRESULT _hr = put_RightPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1661)
inline float Word::Table::GetSpacing ( ) {
    float _result;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1662)
inline void Word::Table::PutSpacing ( float prop ) {
    HRESULT _hr = put_Spacing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1663)
inline enum WdTableDirection Word::Table::GetTableDirection ( ) {
    enum WdTableDirection _result;
    HRESULT _hr = get_TableDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1664)
inline void Word::Table::PutTableDirection ( enum WdTableDirection prop ) {
    HRESULT _hr = put_TableDirection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1665)
inline _bstr_t Word::Table::GetID ( ) {
    BSTR _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1666)
inline void Word::Table::PutID ( _bstr_t prop ) {
    HRESULT _hr = put_ID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1667)
inline _variant_t Word::Table::GetStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1668)
inline void Word::Table::PutStyle ( VARIANT * prop ) {
    HRESULT _hr = put_Style(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1669)
inline VARIANT_BOOL Word::Table::GetApplyStyleHeadingRows ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ApplyStyleHeadingRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1670)
inline void Word::Table::PutApplyStyleHeadingRows ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ApplyStyleHeadingRows(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1671)
inline VARIANT_BOOL Word::Table::GetApplyStyleLastRow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ApplyStyleLastRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1672)
inline void Word::Table::PutApplyStyleLastRow ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ApplyStyleLastRow(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1673)
inline VARIANT_BOOL Word::Table::GetApplyStyleFirstColumn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ApplyStyleFirstColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1674)
inline void Word::Table::PutApplyStyleFirstColumn ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ApplyStyleFirstColumn(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1675)
inline VARIANT_BOOL Word::Table::GetApplyStyleLastColumn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ApplyStyleLastColumn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1676)
inline void Word::Table::PutApplyStyleLastColumn ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ApplyStyleLastColumn(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Row wrapper method implementations
//

#pragma implementation_key(1677)
inline Word::RangePtr Word::Row::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1678)
inline Word::_ApplicationPtr Word::Row::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1679)
inline long Word::Row::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1680)
inline IDispatchPtr Word::Row::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1681)
inline long Word::Row::GetAllowBreakAcrossPages ( ) {
    long _result;
    HRESULT _hr = get_AllowBreakAcrossPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1682)
inline void Word::Row::PutAllowBreakAcrossPages ( long prop ) {
    HRESULT _hr = put_AllowBreakAcrossPages(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1683)
inline enum WdRowAlignment Word::Row::GetAlignment ( ) {
    enum WdRowAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1684)
inline void Word::Row::PutAlignment ( enum WdRowAlignment prop ) {
    HRESULT _hr = put_Alignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1685)
inline long Word::Row::GetHeadingFormat ( ) {
    long _result;
    HRESULT _hr = get_HeadingFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1686)
inline void Word::Row::PutHeadingFormat ( long prop ) {
    HRESULT _hr = put_HeadingFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1687)
inline float Word::Row::GetSpaceBetweenColumns ( ) {
    float _result;
    HRESULT _hr = get_SpaceBetweenColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1688)
inline void Word::Row::PutSpaceBetweenColumns ( float prop ) {
    HRESULT _hr = put_SpaceBetweenColumns(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1689)
inline float Word::Row::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1690)
inline void Word::Row::PutHeight ( float prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1691)
inline enum WdRowHeightRule Word::Row::GetHeightRule ( ) {
    enum WdRowHeightRule _result;
    HRESULT _hr = get_HeightRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1692)
inline void Word::Row::PutHeightRule ( enum WdRowHeightRule prop ) {
    HRESULT _hr = put_HeightRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1693)
inline float Word::Row::GetLeftIndent ( ) {
    float _result;
    HRESULT _hr = get_LeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1694)
inline void Word::Row::PutLeftIndent ( float prop ) {
    HRESULT _hr = put_LeftIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1695)
inline VARIANT_BOOL Word::Row::GetIsLast ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1696)
inline VARIANT_BOOL Word::Row::GetIsFirst ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1697)
inline long Word::Row::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1698)
inline Word::CellsPtr Word::Row::GetCells ( ) {
    struct Cells * _result;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellsPtr(_result, false);
}

#pragma implementation_key(1699)
inline Word::BordersPtr Word::Row::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1700)
inline void Word::Row::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1701)
inline Word::ShadingPtr Word::Row::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(1702)
inline Word::RowPtr Word::Row::GetNext ( ) {
    struct Row * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

#pragma implementation_key(1703)
inline Word::RowPtr Word::Row::GetPrevious ( ) {
    struct Row * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

#pragma implementation_key(1704)
inline HRESULT Word::Row::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1705)
inline HRESULT Word::Row::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1706)
inline HRESULT Word::Row::SetLeftIndent ( float LeftIndent, enum WdRulerStyle RulerStyle ) {
    HRESULT _hr = raw_SetLeftIndent(LeftIndent, RulerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1707)
inline HRESULT Word::Row::SetHeight ( float RowHeight, enum WdRowHeightRule HeightRule ) {
    HRESULT _hr = raw_SetHeight(RowHeight, HeightRule);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1708)
inline Word::RangePtr Word::Row::ConvertToTextOld ( VARIANT * Separator ) {
    struct Range * _result;
    HRESULT _hr = raw_ConvertToTextOld(Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1709)
inline Word::RangePtr Word::Row::ConvertToText ( VARIANT * Separator, VARIANT * NestedTables ) {
    struct Range * _result;
    HRESULT _hr = raw_ConvertToText(Separator, NestedTables, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1710)
inline long Word::Row::GetNestingLevel ( ) {
    long _result;
    HRESULT _hr = get_NestingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1711)
inline _bstr_t Word::Row::GetID ( ) {
    BSTR _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1712)
inline void Word::Row::PutID ( _bstr_t prop ) {
    HRESULT _hr = put_ID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Column wrapper method implementations
//

#pragma implementation_key(1713)
inline Word::_ApplicationPtr Word::Column::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1714)
inline long Word::Column::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1715)
inline IDispatchPtr Word::Column::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1716)
inline float Word::Column::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1717)
inline void Word::Column::PutWidth ( float prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1718)
inline VARIANT_BOOL Word::Column::GetIsFirst ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1719)
inline VARIANT_BOOL Word::Column::GetIsLast ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1720)
inline long Word::Column::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1721)
inline Word::CellsPtr Word::Column::GetCells ( ) {
    struct Cells * _result;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellsPtr(_result, false);
}

#pragma implementation_key(1722)
inline Word::BordersPtr Word::Column::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1723)
inline void Word::Column::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1724)
inline Word::ShadingPtr Word::Column::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(1725)
inline Word::ColumnPtr Word::Column::GetNext ( ) {
    struct Column * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

#pragma implementation_key(1726)
inline Word::ColumnPtr Word::Column::GetPrevious ( ) {
    struct Column * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

#pragma implementation_key(1727)
inline HRESULT Word::Column::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1728)
inline HRESULT Word::Column::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1729)
inline HRESULT Word::Column::SetWidth ( float ColumnWidth, enum WdRulerStyle RulerStyle ) {
    HRESULT _hr = raw_SetWidth(ColumnWidth, RulerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1730)
inline HRESULT Word::Column::AutoFit ( ) {
    HRESULT _hr = raw_AutoFit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1731)
inline HRESULT Word::Column::SortOld ( VARIANT * ExcludeHeader, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * CaseSensitive, VARIANT * LanguageID ) {
    HRESULT _hr = raw_SortOld(ExcludeHeader, SortFieldType, SortOrder, CaseSensitive, LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1732)
inline HRESULT Word::Column::Sort ( VARIANT * ExcludeHeader, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * CaseSensitive, VARIANT * BidiSort, VARIANT * IgnoreThe, VARIANT * IgnoreKashida, VARIANT * IgnoreDiacritics, VARIANT * IgnoreHe, VARIANT * LanguageID ) {
    HRESULT _hr = raw_Sort(ExcludeHeader, SortFieldType, SortOrder, CaseSensitive, BidiSort, IgnoreThe, IgnoreKashida, IgnoreDiacritics, IgnoreHe, LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1733)
inline long Word::Column::GetNestingLevel ( ) {
    long _result;
    HRESULT _hr = get_NestingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1734)
inline float Word::Column::GetPreferredWidth ( ) {
    float _result;
    HRESULT _hr = get_PreferredWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1735)
inline void Word::Column::PutPreferredWidth ( float prop ) {
    HRESULT _hr = put_PreferredWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1736)
inline enum WdPreferredWidthType Word::Column::GetPreferredWidthType ( ) {
    enum WdPreferredWidthType _result;
    HRESULT _hr = get_PreferredWidthType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1737)
inline void Word::Column::PutPreferredWidthType ( enum WdPreferredWidthType prop ) {
    HRESULT _hr = put_PreferredWidthType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Cell wrapper method implementations
//

#pragma implementation_key(1738)
inline Word::RangePtr Word::Cell::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1739)
inline Word::_ApplicationPtr Word::Cell::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1740)
inline long Word::Cell::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1741)
inline IDispatchPtr Word::Cell::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1742)
inline long Word::Cell::GetRowIndex ( ) {
    long _result;
    HRESULT _hr = get_RowIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1743)
inline long Word::Cell::GetColumnIndex ( ) {
    long _result;
    HRESULT _hr = get_ColumnIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1744)
inline float Word::Cell::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1745)
inline void Word::Cell::PutWidth ( float prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1746)
inline float Word::Cell::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1747)
inline void Word::Cell::PutHeight ( float prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1748)
inline enum WdRowHeightRule Word::Cell::GetHeightRule ( ) {
    enum WdRowHeightRule _result;
    HRESULT _hr = get_HeightRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1749)
inline void Word::Cell::PutHeightRule ( enum WdRowHeightRule prop ) {
    HRESULT _hr = put_HeightRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1750)
inline enum WdCellVerticalAlignment Word::Cell::GetVerticalAlignment ( ) {
    enum WdCellVerticalAlignment _result;
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1751)
inline void Word::Cell::PutVerticalAlignment ( enum WdCellVerticalAlignment prop ) {
    HRESULT _hr = put_VerticalAlignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1752)
inline Word::ColumnPtr Word::Cell::GetColumn ( ) {
    struct Column * _result;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

#pragma implementation_key(1753)
inline Word::RowPtr Word::Cell::GetRow ( ) {
    struct Row * _result;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

#pragma implementation_key(1754)
inline Word::CellPtr Word::Cell::GetNext ( ) {
    struct Cell * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

#pragma implementation_key(1755)
inline Word::CellPtr Word::Cell::GetPrevious ( ) {
    struct Cell * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

#pragma implementation_key(1756)
inline Word::ShadingPtr Word::Cell::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(1757)
inline Word::BordersPtr Word::Cell::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1758)
inline void Word::Cell::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1759)
inline HRESULT Word::Cell::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1760)
inline HRESULT Word::Cell::Delete ( VARIANT * ShiftCells ) {
    HRESULT _hr = raw_Delete(ShiftCells);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1761)
inline HRESULT Word::Cell::Formula ( VARIANT * Formula, VARIANT * NumFormat ) {
    HRESULT _hr = raw_Formula(Formula, NumFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1762)
inline HRESULT Word::Cell::SetWidth ( float ColumnWidth, enum WdRulerStyle RulerStyle ) {
    HRESULT _hr = raw_SetWidth(ColumnWidth, RulerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1763)
inline HRESULT Word::Cell::SetHeight ( VARIANT * RowHeight, enum WdRowHeightRule HeightRule ) {
    HRESULT _hr = raw_SetHeight(RowHeight, HeightRule);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1764)
inline HRESULT Word::Cell::Merge ( struct Cell * MergeTo ) {
    HRESULT _hr = raw_Merge(MergeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1765)
inline HRESULT Word::Cell::Split ( VARIANT * NumRows, VARIANT * NumColumns ) {
    HRESULT _hr = raw_Split(NumRows, NumColumns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1766)
inline HRESULT Word::Cell::AutoSum ( ) {
    HRESULT _hr = raw_AutoSum();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1767)
inline Word::TablesPtr Word::Cell::GetTables ( ) {
    struct Tables * _result;
    HRESULT _hr = get_Tables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablesPtr(_result, false);
}

#pragma implementation_key(1768)
inline long Word::Cell::GetNestingLevel ( ) {
    long _result;
    HRESULT _hr = get_NestingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1769)
inline VARIANT_BOOL Word::Cell::GetWordWrap ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1770)
inline void Word::Cell::PutWordWrap ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_WordWrap(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1771)
inline float Word::Cell::GetPreferredWidth ( ) {
    float _result;
    HRESULT _hr = get_PreferredWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1772)
inline void Word::Cell::PutPreferredWidth ( float prop ) {
    HRESULT _hr = put_PreferredWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1773)
inline VARIANT_BOOL Word::Cell::GetFitText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FitText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1774)
inline void Word::Cell::PutFitText ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_FitText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1775)
inline float Word::Cell::GetTopPadding ( ) {
    float _result;
    HRESULT _hr = get_TopPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1776)
inline void Word::Cell::PutTopPadding ( float prop ) {
    HRESULT _hr = put_TopPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1777)
inline float Word::Cell::GetBottomPadding ( ) {
    float _result;
    HRESULT _hr = get_BottomPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1778)
inline void Word::Cell::PutBottomPadding ( float prop ) {
    HRESULT _hr = put_BottomPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1779)
inline float Word::Cell::GetLeftPadding ( ) {
    float _result;
    HRESULT _hr = get_LeftPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1780)
inline void Word::Cell::PutLeftPadding ( float prop ) {
    HRESULT _hr = put_LeftPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1781)
inline float Word::Cell::GetRightPadding ( ) {
    float _result;
    HRESULT _hr = get_RightPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1782)
inline void Word::Cell::PutRightPadding ( float prop ) {
    HRESULT _hr = put_RightPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1783)
inline _bstr_t Word::Cell::GetID ( ) {
    BSTR _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1784)
inline void Word::Cell::PutID ( _bstr_t prop ) {
    HRESULT _hr = put_ID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1785)
inline enum WdPreferredWidthType Word::Cell::GetPreferredWidthType ( ) {
    enum WdPreferredWidthType _result;
    HRESULT _hr = get_PreferredWidthType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1786)
inline void Word::Cell::PutPreferredWidthType ( enum WdPreferredWidthType prop ) {
    HRESULT _hr = put_PreferredWidthType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Tables wrapper method implementations
//

#pragma implementation_key(1787)
inline IUnknownPtr Word::Tables::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1788)
inline long Word::Tables::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1789)
inline Word::_ApplicationPtr Word::Tables::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1790)
inline long Word::Tables::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1791)
inline IDispatchPtr Word::Tables::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1792)
inline Word::TablePtr Word::Tables::Item ( long Index ) {
    struct Table * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(1793)
inline Word::TablePtr Word::Tables::AddOld ( struct Range * Range, long NumRows, long NumColumns ) {
    struct Table * _result;
    HRESULT _hr = raw_AddOld(Range, NumRows, NumColumns, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(1794)
inline Word::TablePtr Word::Tables::Add ( struct Range * Range, long NumRows, long NumColumns, VARIANT * DefaultTableBehavior, VARIANT * AutoFitBehavior ) {
    struct Table * _result;
    HRESULT _hr = raw_Add(Range, NumRows, NumColumns, DefaultTableBehavior, AutoFitBehavior, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(1795)
inline long Word::Tables::GetNestingLevel ( ) {
    long _result;
    HRESULT _hr = get_NestingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Rows wrapper method implementations
//

#pragma implementation_key(1796)
inline IUnknownPtr Word::Rows::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1797)
inline long Word::Rows::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1798)
inline long Word::Rows::GetAllowBreakAcrossPages ( ) {
    long _result;
    HRESULT _hr = get_AllowBreakAcrossPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1799)
inline void Word::Rows::PutAllowBreakAcrossPages ( long prop ) {
    HRESULT _hr = put_AllowBreakAcrossPages(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1800)
inline enum WdRowAlignment Word::Rows::GetAlignment ( ) {
    enum WdRowAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1801)
inline void Word::Rows::PutAlignment ( enum WdRowAlignment prop ) {
    HRESULT _hr = put_Alignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1802)
inline long Word::Rows::GetHeadingFormat ( ) {
    long _result;
    HRESULT _hr = get_HeadingFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1803)
inline void Word::Rows::PutHeadingFormat ( long prop ) {
    HRESULT _hr = put_HeadingFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1804)
inline float Word::Rows::GetSpaceBetweenColumns ( ) {
    float _result;
    HRESULT _hr = get_SpaceBetweenColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1805)
inline void Word::Rows::PutSpaceBetweenColumns ( float prop ) {
    HRESULT _hr = put_SpaceBetweenColumns(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1806)
inline float Word::Rows::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1807)
inline void Word::Rows::PutHeight ( float prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1808)
inline enum WdRowHeightRule Word::Rows::GetHeightRule ( ) {
    enum WdRowHeightRule _result;
    HRESULT _hr = get_HeightRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1809)
inline void Word::Rows::PutHeightRule ( enum WdRowHeightRule prop ) {
    HRESULT _hr = put_HeightRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1810)
inline float Word::Rows::GetLeftIndent ( ) {
    float _result;
    HRESULT _hr = get_LeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1811)
inline void Word::Rows::PutLeftIndent ( float prop ) {
    HRESULT _hr = put_LeftIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1812)
inline Word::RowPtr Word::Rows::GetFirst ( ) {
    struct Row * _result;
    HRESULT _hr = get_First(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

#pragma implementation_key(1813)
inline Word::RowPtr Word::Rows::GetLast ( ) {
    struct Row * _result;
    HRESULT _hr = get_Last(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

#pragma implementation_key(1814)
inline Word::_ApplicationPtr Word::Rows::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1815)
inline long Word::Rows::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1816)
inline IDispatchPtr Word::Rows::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1817)
inline Word::BordersPtr Word::Rows::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1818)
inline void Word::Rows::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1819)
inline Word::ShadingPtr Word::Rows::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(1820)
inline Word::RowPtr Word::Rows::Item ( long Index ) {
    struct Row * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

#pragma implementation_key(1821)
inline Word::RowPtr Word::Rows::Add ( VARIANT * BeforeRow ) {
    struct Row * _result;
    HRESULT _hr = raw_Add(BeforeRow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

#pragma implementation_key(1822)
inline HRESULT Word::Rows::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1823)
inline HRESULT Word::Rows::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1824)
inline HRESULT Word::Rows::SetLeftIndent ( float LeftIndent, enum WdRulerStyle RulerStyle ) {
    HRESULT _hr = raw_SetLeftIndent(LeftIndent, RulerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1825)
inline HRESULT Word::Rows::SetHeight ( float RowHeight, enum WdRowHeightRule HeightRule ) {
    HRESULT _hr = raw_SetHeight(RowHeight, HeightRule);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1826)
inline Word::RangePtr Word::Rows::ConvertToTextOld ( VARIANT * Separator ) {
    struct Range * _result;
    HRESULT _hr = raw_ConvertToTextOld(Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1827)
inline HRESULT Word::Rows::DistributeHeight ( ) {
    HRESULT _hr = raw_DistributeHeight();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1828)
inline Word::RangePtr Word::Rows::ConvertToText ( VARIANT * Separator, VARIANT * NestedTables ) {
    struct Range * _result;
    HRESULT _hr = raw_ConvertToText(Separator, NestedTables, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(1829)
inline long Word::Rows::GetWrapAroundText ( ) {
    long _result;
    HRESULT _hr = get_WrapAroundText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1830)
inline void Word::Rows::PutWrapAroundText ( long prop ) {
    HRESULT _hr = put_WrapAroundText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1831)
inline float Word::Rows::GetDistanceTop ( ) {
    float _result;
    HRESULT _hr = get_DistanceTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1832)
inline void Word::Rows::PutDistanceTop ( float prop ) {
    HRESULT _hr = put_DistanceTop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1833)
inline float Word::Rows::GetDistanceBottom ( ) {
    float _result;
    HRESULT _hr = get_DistanceBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1834)
inline void Word::Rows::PutDistanceBottom ( float prop ) {
    HRESULT _hr = put_DistanceBottom(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1835)
inline float Word::Rows::GetDistanceLeft ( ) {
    float _result;
    HRESULT _hr = get_DistanceLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1836)
inline void Word::Rows::PutDistanceLeft ( float prop ) {
    HRESULT _hr = put_DistanceLeft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1837)
inline float Word::Rows::GetDistanceRight ( ) {
    float _result;
    HRESULT _hr = get_DistanceRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1838)
inline void Word::Rows::PutDistanceRight ( float prop ) {
    HRESULT _hr = put_DistanceRight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1839)
inline float Word::Rows::GetHorizontalPosition ( ) {
    float _result;
    HRESULT _hr = get_HorizontalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1840)
inline void Word::Rows::PutHorizontalPosition ( float prop ) {
    HRESULT _hr = put_HorizontalPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1841)
inline float Word::Rows::GetVerticalPosition ( ) {
    float _result;
    HRESULT _hr = get_VerticalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1842)
inline void Word::Rows::PutVerticalPosition ( float prop ) {
    HRESULT _hr = put_VerticalPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1843)
inline enum WdRelativeHorizontalPosition Word::Rows::GetRelativeHorizontalPosition ( ) {
    enum WdRelativeHorizontalPosition _result;
    HRESULT _hr = get_RelativeHorizontalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1844)
inline void Word::Rows::PutRelativeHorizontalPosition ( enum WdRelativeHorizontalPosition prop ) {
    HRESULT _hr = put_RelativeHorizontalPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1845)
inline enum WdRelativeVerticalPosition Word::Rows::GetRelativeVerticalPosition ( ) {
    enum WdRelativeVerticalPosition _result;
    HRESULT _hr = get_RelativeVerticalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1846)
inline void Word::Rows::PutRelativeVerticalPosition ( enum WdRelativeVerticalPosition prop ) {
    HRESULT _hr = put_RelativeVerticalPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1847)
inline long Word::Rows::GetAllowOverlap ( ) {
    long _result;
    HRESULT _hr = get_AllowOverlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1848)
inline void Word::Rows::PutAllowOverlap ( long prop ) {
    HRESULT _hr = put_AllowOverlap(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1849)
inline long Word::Rows::GetNestingLevel ( ) {
    long _result;
    HRESULT _hr = get_NestingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1850)
inline enum WdTableDirection Word::Rows::GetTableDirection ( ) {
    enum WdTableDirection _result;
    HRESULT _hr = get_TableDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1851)
inline void Word::Rows::PutTableDirection ( enum WdTableDirection prop ) {
    HRESULT _hr = put_TableDirection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Columns wrapper method implementations
//

#pragma implementation_key(1852)
inline IUnknownPtr Word::Columns::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1853)
inline long Word::Columns::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1854)
inline Word::_ApplicationPtr Word::Columns::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1855)
inline long Word::Columns::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1856)
inline IDispatchPtr Word::Columns::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1857)
inline Word::ColumnPtr Word::Columns::GetFirst ( ) {
    struct Column * _result;
    HRESULT _hr = get_First(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

#pragma implementation_key(1858)
inline Word::ColumnPtr Word::Columns::GetLast ( ) {
    struct Column * _result;
    HRESULT _hr = get_Last(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

#pragma implementation_key(1859)
inline float Word::Columns::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1860)
inline void Word::Columns::PutWidth ( float prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1861)
inline Word::BordersPtr Word::Columns::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1862)
inline void Word::Columns::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1863)
inline Word::ShadingPtr Word::Columns::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(1864)
inline Word::ColumnPtr Word::Columns::Item ( long Index ) {
    struct Column * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

#pragma implementation_key(1865)
inline Word::ColumnPtr Word::Columns::Add ( VARIANT * BeforeColumn ) {
    struct Column * _result;
    HRESULT _hr = raw_Add(BeforeColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

#pragma implementation_key(1866)
inline HRESULT Word::Columns::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1867)
inline HRESULT Word::Columns::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1868)
inline HRESULT Word::Columns::SetWidth ( float ColumnWidth, enum WdRulerStyle RulerStyle ) {
    HRESULT _hr = raw_SetWidth(ColumnWidth, RulerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1869)
inline HRESULT Word::Columns::AutoFit ( ) {
    HRESULT _hr = raw_AutoFit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1870)
inline HRESULT Word::Columns::DistributeWidth ( ) {
    HRESULT _hr = raw_DistributeWidth();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1871)
inline long Word::Columns::GetNestingLevel ( ) {
    long _result;
    HRESULT _hr = get_NestingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1872)
inline float Word::Columns::GetPreferredWidth ( ) {
    float _result;
    HRESULT _hr = get_PreferredWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1873)
inline void Word::Columns::PutPreferredWidth ( float prop ) {
    HRESULT _hr = put_PreferredWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1874)
inline enum WdPreferredWidthType Word::Columns::GetPreferredWidthType ( ) {
    enum WdPreferredWidthType _result;
    HRESULT _hr = get_PreferredWidthType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1875)
inline void Word::Columns::PutPreferredWidthType ( enum WdPreferredWidthType prop ) {
    HRESULT _hr = put_PreferredWidthType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Cells wrapper method implementations
//

#pragma implementation_key(1876)
inline IUnknownPtr Word::Cells::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1877)
inline long Word::Cells::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1878)
inline Word::_ApplicationPtr Word::Cells::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1879)
inline long Word::Cells::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1880)
inline IDispatchPtr Word::Cells::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1881)
inline float Word::Cells::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1882)
inline void Word::Cells::PutWidth ( float prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1883)
inline float Word::Cells::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1884)
inline void Word::Cells::PutHeight ( float prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1885)
inline enum WdRowHeightRule Word::Cells::GetHeightRule ( ) {
    enum WdRowHeightRule _result;
    HRESULT _hr = get_HeightRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1886)
inline void Word::Cells::PutHeightRule ( enum WdRowHeightRule prop ) {
    HRESULT _hr = put_HeightRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1887)
inline enum WdCellVerticalAlignment Word::Cells::GetVerticalAlignment ( ) {
    enum WdCellVerticalAlignment _result;
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1888)
inline void Word::Cells::PutVerticalAlignment ( enum WdCellVerticalAlignment prop ) {
    HRESULT _hr = put_VerticalAlignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1889)
inline Word::BordersPtr Word::Cells::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1890)
inline void Word::Cells::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1891)
inline Word::ShadingPtr Word::Cells::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(1892)
inline Word::CellPtr Word::Cells::Item ( long Index ) {
    struct Cell * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

#pragma implementation_key(1893)
inline Word::CellPtr Word::Cells::Add ( VARIANT * BeforeCell ) {
    struct Cell * _result;
    HRESULT _hr = raw_Add(BeforeCell, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

#pragma implementation_key(1894)
inline HRESULT Word::Cells::Delete ( VARIANT * ShiftCells ) {
    HRESULT _hr = raw_Delete(ShiftCells);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1895)
inline HRESULT Word::Cells::SetWidth ( float ColumnWidth, enum WdRulerStyle RulerStyle ) {
    HRESULT _hr = raw_SetWidth(ColumnWidth, RulerStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1896)
inline HRESULT Word::Cells::SetHeight ( VARIANT * RowHeight, enum WdRowHeightRule HeightRule ) {
    HRESULT _hr = raw_SetHeight(RowHeight, HeightRule);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1897)
inline HRESULT Word::Cells::Merge ( ) {
    HRESULT _hr = raw_Merge();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1898)
inline HRESULT Word::Cells::Split ( VARIANT * NumRows, VARIANT * NumColumns, VARIANT * MergeBeforeSplit ) {
    HRESULT _hr = raw_Split(NumRows, NumColumns, MergeBeforeSplit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1899)
inline HRESULT Word::Cells::DistributeHeight ( ) {
    HRESULT _hr = raw_DistributeHeight();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1900)
inline HRESULT Word::Cells::DistributeWidth ( ) {
    HRESULT _hr = raw_DistributeWidth();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1901)
inline HRESULT Word::Cells::AutoFit ( ) {
    HRESULT _hr = raw_AutoFit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1902)
inline long Word::Cells::GetNestingLevel ( ) {
    long _result;
    HRESULT _hr = get_NestingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1903)
inline float Word::Cells::GetPreferredWidth ( ) {
    float _result;
    HRESULT _hr = get_PreferredWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1904)
inline void Word::Cells::PutPreferredWidth ( float prop ) {
    HRESULT _hr = put_PreferredWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1905)
inline enum WdPreferredWidthType Word::Cells::GetPreferredWidthType ( ) {
    enum WdPreferredWidthType _result;
    HRESULT _hr = get_PreferredWidthType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1906)
inline void Word::Cells::PutPreferredWidthType ( enum WdPreferredWidthType prop ) {
    HRESULT _hr = put_PreferredWidthType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AutoCorrect wrapper method implementations
//

#pragma implementation_key(1907)
inline Word::_ApplicationPtr Word::AutoCorrect::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1908)
inline long Word::AutoCorrect::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1909)
inline IDispatchPtr Word::AutoCorrect::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1910)
inline VARIANT_BOOL Word::AutoCorrect::GetCorrectDays ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CorrectDays(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1911)
inline void Word::AutoCorrect::PutCorrectDays ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CorrectDays(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1912)
inline VARIANT_BOOL Word::AutoCorrect::GetCorrectInitialCaps ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CorrectInitialCaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1913)
inline void Word::AutoCorrect::PutCorrectInitialCaps ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CorrectInitialCaps(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1914)
inline VARIANT_BOOL Word::AutoCorrect::GetCorrectSentenceCaps ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CorrectSentenceCaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1915)
inline void Word::AutoCorrect::PutCorrectSentenceCaps ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CorrectSentenceCaps(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1916)
inline VARIANT_BOOL Word::AutoCorrect::GetReplaceText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReplaceText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1917)
inline void Word::AutoCorrect::PutReplaceText ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ReplaceText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1918)
inline Word::AutoCorrectEntriesPtr Word::AutoCorrect::GetEntries ( ) {
    struct AutoCorrectEntries * _result;
    HRESULT _hr = get_Entries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectEntriesPtr(_result, false);
}

#pragma implementation_key(1919)
inline Word::FirstLetterExceptionsPtr Word::AutoCorrect::GetFirstLetterExceptions ( ) {
    struct FirstLetterExceptions * _result;
    HRESULT _hr = get_FirstLetterExceptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FirstLetterExceptionsPtr(_result, false);
}

#pragma implementation_key(1920)
inline VARIANT_BOOL Word::AutoCorrect::GetFirstLetterAutoAdd ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FirstLetterAutoAdd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1921)
inline void Word::AutoCorrect::PutFirstLetterAutoAdd ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_FirstLetterAutoAdd(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1922)
inline Word::TwoInitialCapsExceptionsPtr Word::AutoCorrect::GetTwoInitialCapsExceptions ( ) {
    struct TwoInitialCapsExceptions * _result;
    HRESULT _hr = get_TwoInitialCapsExceptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TwoInitialCapsExceptionsPtr(_result, false);
}

#pragma implementation_key(1923)
inline VARIANT_BOOL Word::AutoCorrect::GetTwoInitialCapsAutoAdd ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TwoInitialCapsAutoAdd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1924)
inline void Word::AutoCorrect::PutTwoInitialCapsAutoAdd ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_TwoInitialCapsAutoAdd(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1925)
inline VARIANT_BOOL Word::AutoCorrect::GetCorrectCapsLock ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CorrectCapsLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1926)
inline void Word::AutoCorrect::PutCorrectCapsLock ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CorrectCapsLock(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1927)
inline VARIANT_BOOL Word::AutoCorrect::GetCorrectHangulAndAlphabet ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CorrectHangulAndAlphabet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1928)
inline void Word::AutoCorrect::PutCorrectHangulAndAlphabet ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CorrectHangulAndAlphabet(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1929)
inline Word::HangulAndAlphabetExceptionsPtr Word::AutoCorrect::GetHangulAndAlphabetExceptions ( ) {
    struct HangulAndAlphabetExceptions * _result;
    HRESULT _hr = get_HangulAndAlphabetExceptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HangulAndAlphabetExceptionsPtr(_result, false);
}

#pragma implementation_key(1930)
inline VARIANT_BOOL Word::AutoCorrect::GetHangulAndAlphabetAutoAdd ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HangulAndAlphabetAutoAdd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1931)
inline void Word::AutoCorrect::PutHangulAndAlphabetAutoAdd ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_HangulAndAlphabetAutoAdd(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1932)
inline VARIANT_BOOL Word::AutoCorrect::GetReplaceTextFromSpellingChecker ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReplaceTextFromSpellingChecker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1933)
inline void Word::AutoCorrect::PutReplaceTextFromSpellingChecker ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ReplaceTextFromSpellingChecker(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1934)
inline VARIANT_BOOL Word::AutoCorrect::GetOtherCorrectionsAutoAdd ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OtherCorrectionsAutoAdd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1935)
inline void Word::AutoCorrect::PutOtherCorrectionsAutoAdd ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_OtherCorrectionsAutoAdd(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1936)
inline Word::OtherCorrectionsExceptionsPtr Word::AutoCorrect::GetOtherCorrectionsExceptions ( ) {
    struct OtherCorrectionsExceptions * _result;
    HRESULT _hr = get_OtherCorrectionsExceptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OtherCorrectionsExceptionsPtr(_result, false);
}

#pragma implementation_key(1937)
inline VARIANT_BOOL Word::AutoCorrect::GetCorrectKeyboardSetting ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CorrectKeyboardSetting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1938)
inline void Word::AutoCorrect::PutCorrectKeyboardSetting ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CorrectKeyboardSetting(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1939)
inline VARIANT_BOOL Word::AutoCorrect::GetCorrectTableCells ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CorrectTableCells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1940)
inline void Word::AutoCorrect::PutCorrectTableCells ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CorrectTableCells(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1941)
inline VARIANT_BOOL Word::AutoCorrect::GetDisplayAutoCorrectOptions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayAutoCorrectOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1942)
inline void Word::AutoCorrect::PutDisplayAutoCorrectOptions ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayAutoCorrectOptions(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AutoCorrectEntries wrapper method implementations
//

#pragma implementation_key(1943)
inline Word::_ApplicationPtr Word::AutoCorrectEntries::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1944)
inline long Word::AutoCorrectEntries::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1945)
inline IDispatchPtr Word::AutoCorrectEntries::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1946)
inline IUnknownPtr Word::AutoCorrectEntries::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1947)
inline long Word::AutoCorrectEntries::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1948)
inline Word::AutoCorrectEntryPtr Word::AutoCorrectEntries::Item ( VARIANT * Index ) {
    struct AutoCorrectEntry * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectEntryPtr(_result, false);
}

#pragma implementation_key(1949)
inline Word::AutoCorrectEntryPtr Word::AutoCorrectEntries::Add ( _bstr_t Name, _bstr_t Value ) {
    struct AutoCorrectEntry * _result;
    HRESULT _hr = raw_Add(Name, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectEntryPtr(_result, false);
}

#pragma implementation_key(1950)
inline Word::AutoCorrectEntryPtr Word::AutoCorrectEntries::AddRichText ( _bstr_t Name, struct Range * Range ) {
    struct AutoCorrectEntry * _result;
    HRESULT _hr = raw_AddRichText(Name, Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCorrectEntryPtr(_result, false);
}

//
// interface AutoCorrectEntry wrapper method implementations
//

#pragma implementation_key(1951)
inline Word::_ApplicationPtr Word::AutoCorrectEntry::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1952)
inline long Word::AutoCorrectEntry::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1953)
inline IDispatchPtr Word::AutoCorrectEntry::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1954)
inline long Word::AutoCorrectEntry::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1955)
inline _bstr_t Word::AutoCorrectEntry::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1956)
inline void Word::AutoCorrectEntry::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1957)
inline _bstr_t Word::AutoCorrectEntry::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1958)
inline void Word::AutoCorrectEntry::PutValue ( _bstr_t prop ) {
    HRESULT _hr = put_Value(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1959)
inline VARIANT_BOOL Word::AutoCorrectEntry::GetRichText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RichText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1960)
inline HRESULT Word::AutoCorrectEntry::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1961)
inline HRESULT Word::AutoCorrectEntry::Apply ( struct Range * Range ) {
    HRESULT _hr = raw_Apply(Range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface FirstLetterExceptions wrapper method implementations
//

#pragma implementation_key(1962)
inline Word::_ApplicationPtr Word::FirstLetterExceptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1963)
inline long Word::FirstLetterExceptions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1964)
inline IDispatchPtr Word::FirstLetterExceptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1965)
inline IUnknownPtr Word::FirstLetterExceptions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1966)
inline long Word::FirstLetterExceptions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1967)
inline Word::FirstLetterExceptionPtr Word::FirstLetterExceptions::Item ( VARIANT * Index ) {
    struct FirstLetterException * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FirstLetterExceptionPtr(_result, false);
}

#pragma implementation_key(1968)
inline Word::FirstLetterExceptionPtr Word::FirstLetterExceptions::Add ( _bstr_t Name ) {
    struct FirstLetterException * _result;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FirstLetterExceptionPtr(_result, false);
}

//
// interface FirstLetterException wrapper method implementations
//

#pragma implementation_key(1969)
inline Word::_ApplicationPtr Word::FirstLetterException::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1970)
inline long Word::FirstLetterException::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1971)
inline IDispatchPtr Word::FirstLetterException::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1972)
inline long Word::FirstLetterException::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1973)
inline _bstr_t Word::FirstLetterException::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1974)
inline HRESULT Word::FirstLetterException::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TwoInitialCapsExceptions wrapper method implementations
//

#pragma implementation_key(1975)
inline Word::_ApplicationPtr Word::TwoInitialCapsExceptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1976)
inline long Word::TwoInitialCapsExceptions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1977)
inline IDispatchPtr Word::TwoInitialCapsExceptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1978)
inline IUnknownPtr Word::TwoInitialCapsExceptions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1979)
inline long Word::TwoInitialCapsExceptions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1980)
inline Word::TwoInitialCapsExceptionPtr Word::TwoInitialCapsExceptions::Item ( VARIANT * Index ) {
    struct TwoInitialCapsException * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TwoInitialCapsExceptionPtr(_result, false);
}

#pragma implementation_key(1981)
inline Word::TwoInitialCapsExceptionPtr Word::TwoInitialCapsExceptions::Add ( _bstr_t Name ) {
    struct TwoInitialCapsException * _result;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TwoInitialCapsExceptionPtr(_result, false);
}

//
// interface TwoInitialCapsException wrapper method implementations
//

#pragma implementation_key(1982)
inline Word::_ApplicationPtr Word::TwoInitialCapsException::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1983)
inline long Word::TwoInitialCapsException::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1984)
inline IDispatchPtr Word::TwoInitialCapsException::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1985)
inline long Word::TwoInitialCapsException::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1986)
inline _bstr_t Word::TwoInitialCapsException::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1987)
inline HRESULT Word::TwoInitialCapsException::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Footnotes wrapper method implementations
//

#pragma implementation_key(1988)
inline IUnknownPtr Word::Footnotes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1989)
inline long Word::Footnotes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1990)
inline Word::_ApplicationPtr Word::Footnotes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1991)
inline long Word::Footnotes::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1992)
inline IDispatchPtr Word::Footnotes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1993)
inline enum WdFootnoteLocation Word::Footnotes::GetLocation ( ) {
    enum WdFootnoteLocation _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1994)
inline void Word::Footnotes::PutLocation ( enum WdFootnoteLocation prop ) {
    HRESULT _hr = put_Location(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1995)
inline enum WdNoteNumberStyle Word::Footnotes::GetNumberStyle ( ) {
    enum WdNoteNumberStyle _result;
    HRESULT _hr = get_NumberStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1996)
inline void Word::Footnotes::PutNumberStyle ( enum WdNoteNumberStyle prop ) {
    HRESULT _hr = put_NumberStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1997)
inline long Word::Footnotes::GetStartingNumber ( ) {
    long _result;
    HRESULT _hr = get_StartingNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1998)
inline void Word::Footnotes::PutStartingNumber ( long prop ) {
    HRESULT _hr = put_StartingNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1999)
inline enum WdNumberingRule Word::Footnotes::GetNumberingRule ( ) {
    enum WdNumberingRule _result;
    HRESULT _hr = get_NumberingRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2000)
inline void Word::Footnotes::PutNumberingRule ( enum WdNumberingRule prop ) {
    HRESULT _hr = put_NumberingRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2001)
inline Word::RangePtr Word::Footnotes::GetSeparator ( ) {
    struct Range * _result;
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2002)
inline Word::RangePtr Word::Footnotes::GetContinuationSeparator ( ) {
    struct Range * _result;
    HRESULT _hr = get_ContinuationSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2003)
inline Word::RangePtr Word::Footnotes::GetContinuationNotice ( ) {
    struct Range * _result;
    HRESULT _hr = get_ContinuationNotice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2004)
inline Word::FootnotePtr Word::Footnotes::Item ( long Index ) {
    struct Footnote * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FootnotePtr(_result, false);
}

#pragma implementation_key(2005)
inline Word::FootnotePtr Word::Footnotes::Add ( struct Range * Range, VARIANT * Reference, VARIANT * Text ) {
    struct Footnote * _result;
    HRESULT _hr = raw_Add(Range, Reference, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FootnotePtr(_result, false);
}

#pragma implementation_key(2006)
inline HRESULT Word::Footnotes::Convert ( ) {
    HRESULT _hr = raw_Convert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2007)
inline HRESULT Word::Footnotes::SwapWithEndnotes ( ) {
    HRESULT _hr = raw_SwapWithEndnotes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2008)
inline HRESULT Word::Footnotes::ResetSeparator ( ) {
    HRESULT _hr = raw_ResetSeparator();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2009)
inline HRESULT Word::Footnotes::ResetContinuationSeparator ( ) {
    HRESULT _hr = raw_ResetContinuationSeparator();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2010)
inline HRESULT Word::Footnotes::ResetContinuationNotice ( ) {
    HRESULT _hr = raw_ResetContinuationNotice();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Endnotes wrapper method implementations
//

#pragma implementation_key(2011)
inline IUnknownPtr Word::Endnotes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2012)
inline long Word::Endnotes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2013)
inline Word::_ApplicationPtr Word::Endnotes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2014)
inline long Word::Endnotes::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2015)
inline IDispatchPtr Word::Endnotes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2016)
inline enum WdEndnoteLocation Word::Endnotes::GetLocation ( ) {
    enum WdEndnoteLocation _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2017)
inline void Word::Endnotes::PutLocation ( enum WdEndnoteLocation prop ) {
    HRESULT _hr = put_Location(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2018)
inline enum WdNoteNumberStyle Word::Endnotes::GetNumberStyle ( ) {
    enum WdNoteNumberStyle _result;
    HRESULT _hr = get_NumberStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2019)
inline void Word::Endnotes::PutNumberStyle ( enum WdNoteNumberStyle prop ) {
    HRESULT _hr = put_NumberStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2020)
inline long Word::Endnotes::GetStartingNumber ( ) {
    long _result;
    HRESULT _hr = get_StartingNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2021)
inline void Word::Endnotes::PutStartingNumber ( long prop ) {
    HRESULT _hr = put_StartingNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2022)
inline enum WdNumberingRule Word::Endnotes::GetNumberingRule ( ) {
    enum WdNumberingRule _result;
    HRESULT _hr = get_NumberingRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2023)
inline void Word::Endnotes::PutNumberingRule ( enum WdNumberingRule prop ) {
    HRESULT _hr = put_NumberingRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2024)
inline Word::RangePtr Word::Endnotes::GetSeparator ( ) {
    struct Range * _result;
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2025)
inline Word::RangePtr Word::Endnotes::GetContinuationSeparator ( ) {
    struct Range * _result;
    HRESULT _hr = get_ContinuationSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2026)
inline Word::RangePtr Word::Endnotes::GetContinuationNotice ( ) {
    struct Range * _result;
    HRESULT _hr = get_ContinuationNotice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2027)
inline Word::EndnotePtr Word::Endnotes::Item ( long Index ) {
    struct Endnote * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EndnotePtr(_result, false);
}

#pragma implementation_key(2028)
inline Word::EndnotePtr Word::Endnotes::Add ( struct Range * Range, VARIANT * Reference, VARIANT * Text ) {
    struct Endnote * _result;
    HRESULT _hr = raw_Add(Range, Reference, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EndnotePtr(_result, false);
}

#pragma implementation_key(2029)
inline HRESULT Word::Endnotes::Convert ( ) {
    HRESULT _hr = raw_Convert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2030)
inline HRESULT Word::Endnotes::SwapWithFootnotes ( ) {
    HRESULT _hr = raw_SwapWithFootnotes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2031)
inline HRESULT Word::Endnotes::ResetSeparator ( ) {
    HRESULT _hr = raw_ResetSeparator();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2032)
inline HRESULT Word::Endnotes::ResetContinuationSeparator ( ) {
    HRESULT _hr = raw_ResetContinuationSeparator();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2033)
inline HRESULT Word::Endnotes::ResetContinuationNotice ( ) {
    HRESULT _hr = raw_ResetContinuationNotice();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Comments wrapper method implementations
//

#pragma implementation_key(2034)
inline IUnknownPtr Word::Comments::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2035)
inline long Word::Comments::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2036)
inline Word::_ApplicationPtr Word::Comments::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2037)
inline long Word::Comments::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2038)
inline IDispatchPtr Word::Comments::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2039)
inline _bstr_t Word::Comments::GetShowBy ( ) {
    BSTR _result;
    HRESULT _hr = get_ShowBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2040)
inline void Word::Comments::PutShowBy ( _bstr_t prop ) {
    HRESULT _hr = put_ShowBy(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2041)
inline Word::CommentPtr Word::Comments::Item ( long Index ) {
    struct Comment * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

#pragma implementation_key(2042)
inline Word::CommentPtr Word::Comments::Add ( struct Range * Range, VARIANT * Text ) {
    struct Comment * _result;
    HRESULT _hr = raw_Add(Range, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentPtr(_result, false);
}

//
// interface Footnote wrapper method implementations
//

#pragma implementation_key(2043)
inline Word::_ApplicationPtr Word::Footnote::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2044)
inline long Word::Footnote::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2045)
inline IDispatchPtr Word::Footnote::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2046)
inline Word::RangePtr Word::Footnote::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2047)
inline Word::RangePtr Word::Footnote::GetReference ( ) {
    struct Range * _result;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2048)
inline long Word::Footnote::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2049)
inline HRESULT Word::Footnote::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Endnote wrapper method implementations
//

#pragma implementation_key(2050)
inline Word::_ApplicationPtr Word::Endnote::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2051)
inline long Word::Endnote::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2052)
inline IDispatchPtr Word::Endnote::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2053)
inline Word::RangePtr Word::Endnote::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2054)
inline Word::RangePtr Word::Endnote::GetReference ( ) {
    struct Range * _result;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2055)
inline long Word::Endnote::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2056)
inline HRESULT Word::Endnote::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Comment wrapper method implementations
//

#pragma implementation_key(2057)
inline Word::_ApplicationPtr Word::Comment::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2058)
inline long Word::Comment::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2059)
inline IDispatchPtr Word::Comment::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2060)
inline Word::RangePtr Word::Comment::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2061)
inline Word::RangePtr Word::Comment::GetReference ( ) {
    struct Range * _result;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2062)
inline Word::RangePtr Word::Comment::GetScope ( ) {
    struct Range * _result;
    HRESULT _hr = get_Scope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2063)
inline long Word::Comment::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2064)
inline _bstr_t Word::Comment::GetAuthor ( ) {
    BSTR _result;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2065)
inline void Word::Comment::PutAuthor ( _bstr_t prop ) {
    HRESULT _hr = put_Author(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2066)
inline _bstr_t Word::Comment::GetInitial ( ) {
    BSTR _result;
    HRESULT _hr = get_Initial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2067)
inline void Word::Comment::PutInitial ( _bstr_t prop ) {
    HRESULT _hr = put_Initial(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2068)
inline VARIANT_BOOL Word::Comment::GetShowTip ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2069)
inline void Word::Comment::PutShowTip ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowTip(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2070)
inline HRESULT Word::Comment::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2071)
inline HRESULT Word::Comment::Edit ( ) {
    HRESULT _hr = raw_Edit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2072)
inline DATE Word::Comment::GetDate ( ) {
    DATE _result;
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Borders wrapper method implementations
//

#pragma implementation_key(2073)
inline Word::_ApplicationPtr Word::Borders::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2074)
inline long Word::Borders::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2075)
inline IDispatchPtr Word::Borders::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2076)
inline IUnknownPtr Word::Borders::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2077)
inline long Word::Borders::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2078)
inline long Word::Borders::GetEnable ( ) {
    long _result;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2079)
inline void Word::Borders::PutEnable ( long prop ) {
    HRESULT _hr = put_Enable(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2080)
inline long Word::Borders::GetDistanceFromTop ( ) {
    long _result;
    HRESULT _hr = get_DistanceFromTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2081)
inline void Word::Borders::PutDistanceFromTop ( long prop ) {
    HRESULT _hr = put_DistanceFromTop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2082)
inline VARIANT_BOOL Word::Borders::GetShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2083)
inline void Word::Borders::PutShadow ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Shadow(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2084)
inline enum WdLineStyle Word::Borders::GetInsideLineStyle ( ) {
    enum WdLineStyle _result;
    HRESULT _hr = get_InsideLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2085)
inline void Word::Borders::PutInsideLineStyle ( enum WdLineStyle prop ) {
    HRESULT _hr = put_InsideLineStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2086)
inline enum WdLineStyle Word::Borders::GetOutsideLineStyle ( ) {
    enum WdLineStyle _result;
    HRESULT _hr = get_OutsideLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2087)
inline void Word::Borders::PutOutsideLineStyle ( enum WdLineStyle prop ) {
    HRESULT _hr = put_OutsideLineStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2088)
inline enum WdLineWidth Word::Borders::GetInsideLineWidth ( ) {
    enum WdLineWidth _result;
    HRESULT _hr = get_InsideLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2089)
inline void Word::Borders::PutInsideLineWidth ( enum WdLineWidth prop ) {
    HRESULT _hr = put_InsideLineWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2090)
inline enum WdLineWidth Word::Borders::GetOutsideLineWidth ( ) {
    enum WdLineWidth _result;
    HRESULT _hr = get_OutsideLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2091)
inline void Word::Borders::PutOutsideLineWidth ( enum WdLineWidth prop ) {
    HRESULT _hr = put_OutsideLineWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2092)
inline enum WdColorIndex Word::Borders::GetInsideColorIndex ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_InsideColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2093)
inline void Word::Borders::PutInsideColorIndex ( enum WdColorIndex prop ) {
    HRESULT _hr = put_InsideColorIndex(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2094)
inline enum WdColorIndex Word::Borders::GetOutsideColorIndex ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_OutsideColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2095)
inline void Word::Borders::PutOutsideColorIndex ( enum WdColorIndex prop ) {
    HRESULT _hr = put_OutsideColorIndex(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2096)
inline long Word::Borders::GetDistanceFromLeft ( ) {
    long _result;
    HRESULT _hr = get_DistanceFromLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2097)
inline void Word::Borders::PutDistanceFromLeft ( long prop ) {
    HRESULT _hr = put_DistanceFromLeft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2098)
inline long Word::Borders::GetDistanceFromBottom ( ) {
    long _result;
    HRESULT _hr = get_DistanceFromBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2099)
inline void Word::Borders::PutDistanceFromBottom ( long prop ) {
    HRESULT _hr = put_DistanceFromBottom(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2100)
inline long Word::Borders::GetDistanceFromRight ( ) {
    long _result;
    HRESULT _hr = get_DistanceFromRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2101)
inline void Word::Borders::PutDistanceFromRight ( long prop ) {
    HRESULT _hr = put_DistanceFromRight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2102)
inline VARIANT_BOOL Word::Borders::GetAlwaysInFront ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AlwaysInFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2103)
inline void Word::Borders::PutAlwaysInFront ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AlwaysInFront(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2104)
inline VARIANT_BOOL Word::Borders::GetSurroundHeader ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SurroundHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2105)
inline void Word::Borders::PutSurroundHeader ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SurroundHeader(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2106)
inline VARIANT_BOOL Word::Borders::GetSurroundFooter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SurroundFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2107)
inline void Word::Borders::PutSurroundFooter ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SurroundFooter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2108)
inline VARIANT_BOOL Word::Borders::GetJoinBorders ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_JoinBorders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2109)
inline void Word::Borders::PutJoinBorders ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_JoinBorders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2110)
inline VARIANT_BOOL Word::Borders::GetHasHorizontal ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2111)
inline VARIANT_BOOL Word::Borders::GetHasVertical ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2112)
inline enum WdBorderDistanceFrom Word::Borders::GetDistanceFrom ( ) {
    enum WdBorderDistanceFrom _result;
    HRESULT _hr = get_DistanceFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2113)
inline void Word::Borders::PutDistanceFrom ( enum WdBorderDistanceFrom prop ) {
    HRESULT _hr = put_DistanceFrom(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2114)
inline VARIANT_BOOL Word::Borders::GetEnableFirstPageInSection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableFirstPageInSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2115)
inline void Word::Borders::PutEnableFirstPageInSection ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_EnableFirstPageInSection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2116)
inline VARIANT_BOOL Word::Borders::GetEnableOtherPagesInSection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableOtherPagesInSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2117)
inline void Word::Borders::PutEnableOtherPagesInSection ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_EnableOtherPagesInSection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2118)
inline Word::BorderPtr Word::Borders::Item ( enum WdBorderType Index ) {
    struct Border * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BorderPtr(_result, false);
}

#pragma implementation_key(2119)
inline HRESULT Word::Borders::ApplyPageBordersToAllSections ( ) {
    HRESULT _hr = raw_ApplyPageBordersToAllSections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2120)
inline enum WdColor Word::Borders::GetInsideColor ( ) {
    enum WdColor _result;
    HRESULT _hr = get_InsideColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2121)
inline void Word::Borders::PutInsideColor ( enum WdColor prop ) {
    HRESULT _hr = put_InsideColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2122)
inline enum WdColor Word::Borders::GetOutsideColor ( ) {
    enum WdColor _result;
    HRESULT _hr = get_OutsideColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2123)
inline void Word::Borders::PutOutsideColor ( enum WdColor prop ) {
    HRESULT _hr = put_OutsideColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Border wrapper method implementations
//

#pragma implementation_key(2124)
inline Word::_ApplicationPtr Word::Border::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2125)
inline long Word::Border::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2126)
inline IDispatchPtr Word::Border::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2127)
inline VARIANT_BOOL Word::Border::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2128)
inline void Word::Border::PutVisible ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2129)
inline enum WdColorIndex Word::Border::GetColorIndex ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2130)
inline void Word::Border::PutColorIndex ( enum WdColorIndex prop ) {
    HRESULT _hr = put_ColorIndex(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2131)
inline VARIANT_BOOL Word::Border::GetInside ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Inside(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2132)
inline enum WdLineStyle Word::Border::GetLineStyle ( ) {
    enum WdLineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2133)
inline void Word::Border::PutLineStyle ( enum WdLineStyle prop ) {
    HRESULT _hr = put_LineStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2134)
inline enum WdLineWidth Word::Border::GetLineWidth ( ) {
    enum WdLineWidth _result;
    HRESULT _hr = get_LineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2135)
inline void Word::Border::PutLineWidth ( enum WdLineWidth prop ) {
    HRESULT _hr = put_LineWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2136)
inline enum WdPageBorderArt Word::Border::GetArtStyle ( ) {
    enum WdPageBorderArt _result;
    HRESULT _hr = get_ArtStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2137)
inline void Word::Border::PutArtStyle ( enum WdPageBorderArt prop ) {
    HRESULT _hr = put_ArtStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2138)
inline long Word::Border::GetArtWidth ( ) {
    long _result;
    HRESULT _hr = get_ArtWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2139)
inline void Word::Border::PutArtWidth ( long prop ) {
    HRESULT _hr = put_ArtWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2140)
inline enum WdColor Word::Border::GetColor ( ) {
    enum WdColor _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2141)
inline void Word::Border::PutColor ( enum WdColor prop ) {
    HRESULT _hr = put_Color(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Shading wrapper method implementations
//

#pragma implementation_key(2142)
inline Word::_ApplicationPtr Word::Shading::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2143)
inline long Word::Shading::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2144)
inline IDispatchPtr Word::Shading::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2145)
inline enum WdColorIndex Word::Shading::GetForegroundPatternColorIndex ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_ForegroundPatternColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2146)
inline void Word::Shading::PutForegroundPatternColorIndex ( enum WdColorIndex prop ) {
    HRESULT _hr = put_ForegroundPatternColorIndex(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2147)
inline enum WdColorIndex Word::Shading::GetBackgroundPatternColorIndex ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_BackgroundPatternColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2148)
inline void Word::Shading::PutBackgroundPatternColorIndex ( enum WdColorIndex prop ) {
    HRESULT _hr = put_BackgroundPatternColorIndex(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2149)
inline enum WdTextureIndex Word::Shading::GetTexture ( ) {
    enum WdTextureIndex _result;
    HRESULT _hr = get_Texture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2150)
inline void Word::Shading::PutTexture ( enum WdTextureIndex prop ) {
    HRESULT _hr = put_Texture(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2151)
inline enum WdColor Word::Shading::GetForegroundPatternColor ( ) {
    enum WdColor _result;
    HRESULT _hr = get_ForegroundPatternColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2152)
inline void Word::Shading::PutForegroundPatternColor ( enum WdColor prop ) {
    HRESULT _hr = put_ForegroundPatternColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2153)
inline enum WdColor Word::Shading::GetBackgroundPatternColor ( ) {
    enum WdColor _result;
    HRESULT _hr = get_BackgroundPatternColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2154)
inline void Word::Shading::PutBackgroundPatternColor ( enum WdColor prop ) {
    HRESULT _hr = put_BackgroundPatternColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextRetrievalMode wrapper method implementations
//

#pragma implementation_key(2155)
inline Word::_ApplicationPtr Word::TextRetrievalMode::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2156)
inline long Word::TextRetrievalMode::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2157)
inline IDispatchPtr Word::TextRetrievalMode::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2158)
inline enum WdViewType Word::TextRetrievalMode::GetViewType ( ) {
    enum WdViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2159)
inline void Word::TextRetrievalMode::PutViewType ( enum WdViewType prop ) {
    HRESULT _hr = put_ViewType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2160)
inline Word::TextRetrievalModePtr Word::TextRetrievalMode::GetDuplicate ( ) {
    struct TextRetrievalMode * _result;
    HRESULT _hr = get_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRetrievalModePtr(_result, false);
}

#pragma implementation_key(2161)
inline VARIANT_BOOL Word::TextRetrievalMode::GetIncludeHiddenText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludeHiddenText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2162)
inline void Word::TextRetrievalMode::PutIncludeHiddenText ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IncludeHiddenText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2163)
inline VARIANT_BOOL Word::TextRetrievalMode::GetIncludeFieldCodes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludeFieldCodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2164)
inline void Word::TextRetrievalMode::PutIncludeFieldCodes ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IncludeFieldCodes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AutoTextEntries wrapper method implementations
//

#pragma implementation_key(2165)
inline Word::_ApplicationPtr Word::AutoTextEntries::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2166)
inline long Word::AutoTextEntries::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2167)
inline IDispatchPtr Word::AutoTextEntries::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2168)
inline IUnknownPtr Word::AutoTextEntries::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2169)
inline long Word::AutoTextEntries::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2170)
inline Word::AutoTextEntryPtr Word::AutoTextEntries::Item ( VARIANT * Index ) {
    struct AutoTextEntry * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoTextEntryPtr(_result, false);
}

#pragma implementation_key(2171)
inline Word::AutoTextEntryPtr Word::AutoTextEntries::Add ( _bstr_t Name, struct Range * Range ) {
    struct AutoTextEntry * _result;
    HRESULT _hr = raw_Add(Name, Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoTextEntryPtr(_result, false);
}

#pragma implementation_key(2172)
inline Word::AutoTextEntryPtr Word::AutoTextEntries::AppendToSpike ( struct Range * Range ) {
    struct AutoTextEntry * _result;
    HRESULT _hr = raw_AppendToSpike(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoTextEntryPtr(_result, false);
}

//
// interface AutoTextEntry wrapper method implementations
//

#pragma implementation_key(2173)
inline Word::_ApplicationPtr Word::AutoTextEntry::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2174)
inline long Word::AutoTextEntry::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2175)
inline IDispatchPtr Word::AutoTextEntry::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2176)
inline long Word::AutoTextEntry::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2177)
inline _bstr_t Word::AutoTextEntry::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2178)
inline void Word::AutoTextEntry::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2179)
inline _bstr_t Word::AutoTextEntry::GetStyleName ( ) {
    BSTR _result;
    HRESULT _hr = get_StyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2180)
inline _bstr_t Word::AutoTextEntry::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2181)
inline void Word::AutoTextEntry::PutValue ( _bstr_t prop ) {
    HRESULT _hr = put_Value(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2182)
inline HRESULT Word::AutoTextEntry::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2183)
inline Word::RangePtr Word::AutoTextEntry::Insert ( struct Range * Where, VARIANT * RichText ) {
    struct Range * _result;
    HRESULT _hr = raw_Insert(Where, RichText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

//
// interface System wrapper method implementations
//

#pragma implementation_key(2184)
inline Word::_ApplicationPtr Word::System::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2185)
inline long Word::System::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2186)
inline IDispatchPtr Word::System::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2187)
inline _bstr_t Word::System::GetOperatingSystem ( ) {
    BSTR _result;
    HRESULT _hr = get_OperatingSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2188)
inline _bstr_t Word::System::GetProcessorType ( ) {
    BSTR _result;
    HRESULT _hr = get_ProcessorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2189)
inline _bstr_t Word::System::GetVersion ( ) {
    BSTR _result;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2190)
inline long Word::System::GetFreeDiskSpace ( ) {
    long _result;
    HRESULT _hr = get_FreeDiskSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2191)
inline enum WdCountry Word::System::GetCountry ( ) {
    enum WdCountry _result;
    HRESULT _hr = get_Country(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2192)
inline _bstr_t Word::System::GetLanguageDesignation ( ) {
    BSTR _result;
    HRESULT _hr = get_LanguageDesignation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2193)
inline long Word::System::GetHorizontalResolution ( ) {
    long _result;
    HRESULT _hr = get_HorizontalResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2194)
inline long Word::System::GetVerticalResolution ( ) {
    long _result;
    HRESULT _hr = get_VerticalResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2195)
inline _bstr_t Word::System::GetProfileString ( _bstr_t Section, _bstr_t Key ) {
    BSTR _result;
    HRESULT _hr = get_ProfileString(Section, Key, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2196)
inline void Word::System::PutProfileString ( _bstr_t Section, _bstr_t Key, _bstr_t prop ) {
    HRESULT _hr = put_ProfileString(Section, Key, prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2197)
inline _bstr_t Word::System::GetPrivateProfileString ( _bstr_t FileName, _bstr_t Section, _bstr_t Key ) {
    BSTR _result;
    HRESULT _hr = get_PrivateProfileString(FileName, Section, Key, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2198)
inline void Word::System::PutPrivateProfileString ( _bstr_t FileName, _bstr_t Section, _bstr_t Key, _bstr_t prop ) {
    HRESULT _hr = put_PrivateProfileString(FileName, Section, Key, prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2199)
inline VARIANT_BOOL Word::System::GetMathCoprocessorInstalled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MathCoprocessorInstalled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2200)
inline _bstr_t Word::System::GetComputerType ( ) {
    BSTR _result;
    HRESULT _hr = get_ComputerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2201)
inline _bstr_t Word::System::GetMacintoshName ( ) {
    BSTR _result;
    HRESULT _hr = get_MacintoshName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2202)
inline VARIANT_BOOL Word::System::GetQuickDrawInstalled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_QuickDrawInstalled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2203)
inline enum WdCursorType Word::System::GetCursor ( ) {
    enum WdCursorType _result;
    HRESULT _hr = get_Cursor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2204)
inline void Word::System::PutCursor ( enum WdCursorType prop ) {
    HRESULT _hr = put_Cursor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2205)
inline HRESULT Word::System::MSInfo ( ) {
    HRESULT _hr = raw_MSInfo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2206)
inline HRESULT Word::System::Connect ( _bstr_t Path, VARIANT * Drive, VARIANT * Password ) {
    HRESULT _hr = raw_Connect(Path, Drive, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface OLEFormat wrapper method implementations
//

#pragma implementation_key(2207)
inline Word::_ApplicationPtr Word::OLEFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2208)
inline long Word::OLEFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2209)
inline IDispatchPtr Word::OLEFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2210)
inline _bstr_t Word::OLEFormat::GetClassType ( ) {
    BSTR _result;
    HRESULT _hr = get_ClassType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2211)
inline void Word::OLEFormat::PutClassType ( _bstr_t prop ) {
    HRESULT _hr = put_ClassType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2212)
inline VARIANT_BOOL Word::OLEFormat::GetDisplayAsIcon ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayAsIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2213)
inline void Word::OLEFormat::PutDisplayAsIcon ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayAsIcon(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2214)
inline _bstr_t Word::OLEFormat::GetIconName ( ) {
    BSTR _result;
    HRESULT _hr = get_IconName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2215)
inline void Word::OLEFormat::PutIconName ( _bstr_t prop ) {
    HRESULT _hr = put_IconName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2216)
inline _bstr_t Word::OLEFormat::GetIconPath ( ) {
    BSTR _result;
    HRESULT _hr = get_IconPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2217)
inline long Word::OLEFormat::GetIconIndex ( ) {
    long _result;
    HRESULT _hr = get_IconIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2218)
inline void Word::OLEFormat::PutIconIndex ( long prop ) {
    HRESULT _hr = put_IconIndex(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2219)
inline _bstr_t Word::OLEFormat::GetIconLabel ( ) {
    BSTR _result;
    HRESULT _hr = get_IconLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2220)
inline void Word::OLEFormat::PutIconLabel ( _bstr_t prop ) {
    HRESULT _hr = put_IconLabel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2221)
inline _bstr_t Word::OLEFormat::GetLabel ( ) {
    BSTR _result;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2222)
inline IDispatchPtr Word::OLEFormat::GetObject ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2223)
inline _bstr_t Word::OLEFormat::GetProgID ( ) {
    BSTR _result;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2224)
inline HRESULT Word::OLEFormat::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2225)
inline HRESULT Word::OLEFormat::Edit ( ) {
    HRESULT _hr = raw_Edit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2226)
inline HRESULT Word::OLEFormat::Open ( ) {
    HRESULT _hr = raw_Open();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2227)
inline HRESULT Word::OLEFormat::DoVerb ( VARIANT * VerbIndex ) {
    HRESULT _hr = raw_DoVerb(VerbIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2228)
inline HRESULT Word::OLEFormat::ConvertTo ( VARIANT * ClassType, VARIANT * DisplayAsIcon, VARIANT * IconFileName, VARIANT * IconIndex, VARIANT * IconLabel ) {
    HRESULT _hr = raw_ConvertTo(ClassType, DisplayAsIcon, IconFileName, IconIndex, IconLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2229)
inline HRESULT Word::OLEFormat::ActivateAs ( _bstr_t ClassType ) {
    HRESULT _hr = raw_ActivateAs(ClassType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2230)
inline VARIANT_BOOL Word::OLEFormat::GetPreserveFormattingOnUpdate ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PreserveFormattingOnUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2231)
inline void Word::OLEFormat::PutPreserveFormattingOnUpdate ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PreserveFormattingOnUpdate(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LinkFormat wrapper method implementations
//

#pragma implementation_key(2232)
inline Word::_ApplicationPtr Word::LinkFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2233)
inline long Word::LinkFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2234)
inline IDispatchPtr Word::LinkFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2235)
inline VARIANT_BOOL Word::LinkFormat::GetAutoUpdate ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2236)
inline void Word::LinkFormat::PutAutoUpdate ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoUpdate(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2237)
inline _bstr_t Word::LinkFormat::GetSourceName ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2238)
inline _bstr_t Word::LinkFormat::GetSourcePath ( ) {
    BSTR _result;
    HRESULT _hr = get_SourcePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2239)
inline VARIANT_BOOL Word::LinkFormat::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2240)
inline void Word::LinkFormat::PutLocked ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Locked(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2241)
inline enum WdLinkType Word::LinkFormat::GetType ( ) {
    enum WdLinkType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2242)
inline _bstr_t Word::LinkFormat::GetSourceFullName ( ) {
    BSTR _result;
    HRESULT _hr = get_SourceFullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2243)
inline void Word::LinkFormat::PutSourceFullName ( _bstr_t prop ) {
    HRESULT _hr = put_SourceFullName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2244)
inline VARIANT_BOOL Word::LinkFormat::GetSavePictureWithDocument ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SavePictureWithDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2245)
inline void Word::LinkFormat::PutSavePictureWithDocument ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SavePictureWithDocument(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2246)
inline HRESULT Word::LinkFormat::BreakLink ( ) {
    HRESULT _hr = raw_BreakLink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2247)
inline HRESULT Word::LinkFormat::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _OLEControl wrapper method implementations
//

#pragma implementation_key(2248)
inline float Word::_OLEControl::GetLeft ( ) {
    float _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2249)
inline void Word::_OLEControl::PutLeft ( float prop ) {
    HRESULT _hr = put_Left(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2250)
inline float Word::_OLEControl::GetTop ( ) {
    float _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2251)
inline void Word::_OLEControl::PutTop ( float prop ) {
    HRESULT _hr = put_Top(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2252)
inline float Word::_OLEControl::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2253)
inline void Word::_OLEControl::PutHeight ( float prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2254)
inline float Word::_OLEControl::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2255)
inline void Word::_OLEControl::PutWidth ( float prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2256)
inline _bstr_t Word::_OLEControl::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2257)
inline void Word::_OLEControl::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2258)
inline IDispatchPtr Word::_OLEControl::GetAutomation ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Automation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2259)
inline HRESULT Word::_OLEControl::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2260)
inline HRESULT Word::_OLEControl::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2261)
inline HRESULT Word::_OLEControl::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2262)
inline HRESULT Word::_OLEControl::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2263)
inline HRESULT Word::_OLEControl::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2264)
inline _bstr_t Word::_OLEControl::GetAltHTML ( ) {
    BSTR _result;
    HRESULT _hr = get_AltHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2265)
inline void Word::_OLEControl::PutAltHTML ( _bstr_t prop ) {
    HRESULT _hr = put_AltHTML(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Fields wrapper method implementations
//

#pragma implementation_key(2266)
inline Word::_ApplicationPtr Word::Fields::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2267)
inline long Word::Fields::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2268)
inline IDispatchPtr Word::Fields::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2269)
inline long Word::Fields::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2270)
inline long Word::Fields::GetLocked ( ) {
    long _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2271)
inline void Word::Fields::PutLocked ( long prop ) {
    HRESULT _hr = put_Locked(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2272)
inline IUnknownPtr Word::Fields::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2273)
inline Word::FieldPtr Word::Fields::Item ( long Index ) {
    struct Field * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldPtr(_result, false);
}

#pragma implementation_key(2274)
inline HRESULT Word::Fields::ToggleShowCodes ( ) {
    HRESULT _hr = raw_ToggleShowCodes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2275)
inline long Word::Fields::Update ( ) {
    long _result;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2276)
inline HRESULT Word::Fields::Unlink ( ) {
    HRESULT _hr = raw_Unlink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2277)
inline HRESULT Word::Fields::UpdateSource ( ) {
    HRESULT _hr = raw_UpdateSource();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2278)
inline Word::FieldPtr Word::Fields::Add ( struct Range * Range, VARIANT * Type, VARIANT * Text, VARIANT * PreserveFormatting ) {
    struct Field * _result;
    HRESULT _hr = raw_Add(Range, Type, Text, PreserveFormatting, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldPtr(_result, false);
}

//
// interface Field wrapper method implementations
//

#pragma implementation_key(2279)
inline Word::_ApplicationPtr Word::Field::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2280)
inline long Word::Field::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2281)
inline IDispatchPtr Word::Field::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2282)
inline Word::RangePtr Word::Field::GetCode ( ) {
    struct Range * _result;
    HRESULT _hr = get_Code(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2283)
inline void Word::Field::PutCode ( struct Range * prop ) {
    HRESULT _hr = put_Code(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2284)
inline enum WdFieldType Word::Field::GetType ( ) {
    enum WdFieldType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2285)
inline VARIANT_BOOL Word::Field::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2286)
inline void Word::Field::PutLocked ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Locked(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2287)
inline enum WdFieldKind Word::Field::GetKind ( ) {
    enum WdFieldKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2288)
inline Word::RangePtr Word::Field::GetResult ( ) {
    struct Range * _result;
    HRESULT _hr = get_Result(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2289)
inline void Word::Field::PutResult ( struct Range * prop ) {
    HRESULT _hr = put_Result(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2290)
inline _bstr_t Word::Field::GetData ( ) {
    BSTR _result;
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2291)
inline void Word::Field::PutData ( _bstr_t prop ) {
    HRESULT _hr = put_Data(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2292)
inline Word::FieldPtr Word::Field::GetNext ( ) {
    struct Field * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldPtr(_result, false);
}

#pragma implementation_key(2293)
inline Word::FieldPtr Word::Field::GetPrevious ( ) {
    struct Field * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldPtr(_result, false);
}

#pragma implementation_key(2294)
inline long Word::Field::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2295)
inline VARIANT_BOOL Word::Field::GetShowCodes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowCodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2296)
inline void Word::Field::PutShowCodes ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowCodes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2297)
inline Word::LinkFormatPtr Word::Field::GetLinkFormat ( ) {
    struct LinkFormat * _result;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

#pragma implementation_key(2298)
inline Word::OLEFormatPtr Word::Field::GetOLEFormat ( ) {
    struct OLEFormat * _result;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

#pragma implementation_key(2299)
inline Word::InlineShapePtr Word::Field::GetInlineShape ( ) {
    struct InlineShape * _result;
    HRESULT _hr = get_InlineShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

#pragma implementation_key(2300)
inline HRESULT Word::Field::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2301)
inline VARIANT_BOOL Word::Field::Update ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Update(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2302)
inline HRESULT Word::Field::Unlink ( ) {
    HRESULT _hr = raw_Unlink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2303)
inline HRESULT Word::Field::UpdateSource ( ) {
    HRESULT _hr = raw_UpdateSource();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2304)
inline HRESULT Word::Field::DoClick ( ) {
    HRESULT _hr = raw_DoClick();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2305)
inline HRESULT Word::Field::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2306)
inline HRESULT Word::Field::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2307)
inline HRESULT Word::Field::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Browser wrapper method implementations
//

#pragma implementation_key(2308)
inline Word::_ApplicationPtr Word::Browser::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2309)
inline long Word::Browser::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2310)
inline IDispatchPtr Word::Browser::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2311)
inline enum WdBrowseTarget Word::Browser::GetTarget ( ) {
    enum WdBrowseTarget _result;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2312)
inline void Word::Browser::PutTarget ( enum WdBrowseTarget prop ) {
    HRESULT _hr = put_Target(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2313)
inline HRESULT Word::Browser::Next ( ) {
    HRESULT _hr = raw_Next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2314)
inline HRESULT Word::Browser::Previous ( ) {
    HRESULT _hr = raw_Previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Styles wrapper method implementations
//

#pragma implementation_key(2315)
inline Word::_ApplicationPtr Word::Styles::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2316)
inline long Word::Styles::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2317)
inline IDispatchPtr Word::Styles::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2318)
inline IUnknownPtr Word::Styles::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2319)
inline long Word::Styles::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2320)
inline Word::StylePtr Word::Styles::Item ( VARIANT * Index ) {
    struct Style * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

#pragma implementation_key(2321)
inline Word::StylePtr Word::Styles::Add ( _bstr_t Name, VARIANT * Type ) {
    struct Style * _result;
    HRESULT _hr = raw_Add(Name, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

//
// interface Style wrapper method implementations
//

#pragma implementation_key(2322)
inline Word::_ApplicationPtr Word::Style::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2323)
inline long Word::Style::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2324)
inline IDispatchPtr Word::Style::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2325)
inline _bstr_t Word::Style::GetNameLocal ( ) {
    BSTR _result;
    HRESULT _hr = get_NameLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2326)
inline void Word::Style::PutNameLocal ( _bstr_t prop ) {
    HRESULT _hr = put_NameLocal(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2327)
inline _variant_t Word::Style::GetBaseStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BaseStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2328)
inline void Word::Style::PutBaseStyle ( VARIANT * prop ) {
    HRESULT _hr = put_BaseStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2329)
inline _bstr_t Word::Style::GetDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2330)
inline enum WdStyleType Word::Style::GetType ( ) {
    enum WdStyleType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2331)
inline VARIANT_BOOL Word::Style::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2332)
inline _variant_t Word::Style::GetNextParagraphStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NextParagraphStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2333)
inline void Word::Style::PutNextParagraphStyle ( VARIANT * prop ) {
    HRESULT _hr = put_NextParagraphStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2334)
inline VARIANT_BOOL Word::Style::GetInUse ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_InUse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2335)
inline Word::ShadingPtr Word::Style::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(2336)
inline Word::BordersPtr Word::Style::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(2337)
inline void Word::Style::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2338)
inline Word::_ParagraphFormatPtr Word::Style::GetParagraphFormat ( ) {
    struct _ParagraphFormat * _result;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(2339)
inline void Word::Style::PutParagraphFormat ( struct _ParagraphFormat * prop ) {
    HRESULT _hr = put_ParagraphFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2340)
inline Word::_FontPtr Word::Style::GetFont ( ) {
    struct _Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FontPtr(_result, false);
}

#pragma implementation_key(2341)
inline void Word::Style::PutFont ( struct _Font * prop ) {
    HRESULT _hr = put_Font(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2342)
inline Word::FramePtr Word::Style::GetFrame ( ) {
    struct Frame * _result;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramePtr(_result, false);
}

#pragma implementation_key(2343)
inline enum WdLanguageID Word::Style::GetLanguageID ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2344)
inline void Word::Style::PutLanguageID ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2345)
inline VARIANT_BOOL Word::Style::GetAutomaticallyUpdate ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutomaticallyUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2346)
inline void Word::Style::PutAutomaticallyUpdate ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutomaticallyUpdate(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2347)
inline Word::ListTemplatePtr Word::Style::GetListTemplate ( ) {
    struct ListTemplate * _result;
    HRESULT _hr = get_ListTemplate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListTemplatePtr(_result, false);
}

#pragma implementation_key(2348)
inline long Word::Style::GetListLevelNumber ( ) {
    long _result;
    HRESULT _hr = get_ListLevelNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2349)
inline enum WdLanguageID Word::Style::GetLanguageIDFarEast ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageIDFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2350)
inline void Word::Style::PutLanguageIDFarEast ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageIDFarEast(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2351)
inline VARIANT_BOOL Word::Style::GetHidden ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2352)
inline void Word::Style::PutHidden ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Hidden(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2353)
inline HRESULT Word::Style::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2354)
inline HRESULT Word::Style::LinkToListTemplate ( struct ListTemplate * ListTemplate, VARIANT * ListLevelNumber ) {
    HRESULT _hr = raw_LinkToListTemplate(ListTemplate, ListLevelNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2355)
inline long Word::Style::GetNoProofing ( ) {
    long _result;
    HRESULT _hr = get_NoProofing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2356)
inline void Word::Style::PutNoProofing ( long prop ) {
    HRESULT _hr = put_NoProofing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2357)
inline _variant_t Word::Style::GetLinkStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LinkStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2358)
inline void Word::Style::PutLinkStyle ( VARIANT * prop ) {
    HRESULT _hr = put_LinkStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2359)
inline VARIANT_BOOL Word::Style::GetVisibility ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visibility(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2360)
inline void Word::Style::PutVisibility ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Visibility(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2361)
inline VARIANT_BOOL Word::Style::GetNoSpaceBetweenParagraphsOfSameStyle ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NoSpaceBetweenParagraphsOfSameStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2362)
inline void Word::Style::PutNoSpaceBetweenParagraphsOfSameStyle ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_NoSpaceBetweenParagraphsOfSameStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2363)
inline Word::TableStylePtr Word::Style::GetTable ( ) {
    struct TableStyle * _result;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableStylePtr(_result, false);
}

//
// interface Frames wrapper method implementations
//

#pragma implementation_key(2364)
inline Word::_ApplicationPtr Word::Frames::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2365)
inline long Word::Frames::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2366)
inline IDispatchPtr Word::Frames::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2367)
inline IUnknownPtr Word::Frames::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2368)
inline long Word::Frames::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2369)
inline Word::FramePtr Word::Frames::Item ( long Index ) {
    struct Frame * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramePtr(_result, false);
}

#pragma implementation_key(2370)
inline Word::FramePtr Word::Frames::Add ( struct Range * Range ) {
    struct Frame * _result;
    HRESULT _hr = raw_Add(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramePtr(_result, false);
}

#pragma implementation_key(2371)
inline HRESULT Word::Frames::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Frame wrapper method implementations
//

#pragma implementation_key(2372)
inline Word::_ApplicationPtr Word::Frame::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2373)
inline long Word::Frame::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2374)
inline IDispatchPtr Word::Frame::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2375)
inline enum WdFrameSizeRule Word::Frame::GetHeightRule ( ) {
    enum WdFrameSizeRule _result;
    HRESULT _hr = get_HeightRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2376)
inline void Word::Frame::PutHeightRule ( enum WdFrameSizeRule prop ) {
    HRESULT _hr = put_HeightRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2377)
inline enum WdFrameSizeRule Word::Frame::GetWidthRule ( ) {
    enum WdFrameSizeRule _result;
    HRESULT _hr = get_WidthRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2378)
inline void Word::Frame::PutWidthRule ( enum WdFrameSizeRule prop ) {
    HRESULT _hr = put_WidthRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2379)
inline float Word::Frame::GetHorizontalDistanceFromText ( ) {
    float _result;
    HRESULT _hr = get_HorizontalDistanceFromText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2380)
inline void Word::Frame::PutHorizontalDistanceFromText ( float prop ) {
    HRESULT _hr = put_HorizontalDistanceFromText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2381)
inline float Word::Frame::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2382)
inline void Word::Frame::PutHeight ( float prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2383)
inline float Word::Frame::GetHorizontalPosition ( ) {
    float _result;
    HRESULT _hr = get_HorizontalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2384)
inline void Word::Frame::PutHorizontalPosition ( float prop ) {
    HRESULT _hr = put_HorizontalPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2385)
inline VARIANT_BOOL Word::Frame::GetLockAnchor ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LockAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2386)
inline void Word::Frame::PutLockAnchor ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_LockAnchor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2387)
inline enum WdRelativeHorizontalPosition Word::Frame::GetRelativeHorizontalPosition ( ) {
    enum WdRelativeHorizontalPosition _result;
    HRESULT _hr = get_RelativeHorizontalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2388)
inline void Word::Frame::PutRelativeHorizontalPosition ( enum WdRelativeHorizontalPosition prop ) {
    HRESULT _hr = put_RelativeHorizontalPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2389)
inline enum WdRelativeVerticalPosition Word::Frame::GetRelativeVerticalPosition ( ) {
    enum WdRelativeVerticalPosition _result;
    HRESULT _hr = get_RelativeVerticalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2390)
inline void Word::Frame::PutRelativeVerticalPosition ( enum WdRelativeVerticalPosition prop ) {
    HRESULT _hr = put_RelativeVerticalPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2391)
inline float Word::Frame::GetVerticalDistanceFromText ( ) {
    float _result;
    HRESULT _hr = get_VerticalDistanceFromText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2392)
inline void Word::Frame::PutVerticalDistanceFromText ( float prop ) {
    HRESULT _hr = put_VerticalDistanceFromText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2393)
inline float Word::Frame::GetVerticalPosition ( ) {
    float _result;
    HRESULT _hr = get_VerticalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2394)
inline void Word::Frame::PutVerticalPosition ( float prop ) {
    HRESULT _hr = put_VerticalPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2395)
inline float Word::Frame::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2396)
inline void Word::Frame::PutWidth ( float prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2397)
inline VARIANT_BOOL Word::Frame::GetTextWrap ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TextWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2398)
inline void Word::Frame::PutTextWrap ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_TextWrap(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2399)
inline Word::ShadingPtr Word::Frame::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(2400)
inline Word::BordersPtr Word::Frame::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(2401)
inline void Word::Frame::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2402)
inline Word::RangePtr Word::Frame::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2403)
inline HRESULT Word::Frame::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2404)
inline HRESULT Word::Frame::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2405)
inline HRESULT Word::Frame::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2406)
inline HRESULT Word::Frame::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface FormFields wrapper method implementations
//

#pragma implementation_key(2407)
inline Word::_ApplicationPtr Word::FormFields::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2408)
inline long Word::FormFields::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2409)
inline IDispatchPtr Word::FormFields::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2410)
inline long Word::FormFields::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2411)
inline VARIANT_BOOL Word::FormFields::GetShaded ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Shaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2412)
inline void Word::FormFields::PutShaded ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Shaded(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2413)
inline IUnknownPtr Word::FormFields::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2414)
inline Word::FormFieldPtr Word::FormFields::Item ( VARIANT * Index ) {
    struct FormField * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormFieldPtr(_result, false);
}

#pragma implementation_key(2415)
inline Word::FormFieldPtr Word::FormFields::Add ( struct Range * Range, enum WdFieldType Type ) {
    struct FormField * _result;
    HRESULT _hr = raw_Add(Range, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormFieldPtr(_result, false);
}

//
// interface FormField wrapper method implementations
//

#pragma implementation_key(2416)
inline Word::_ApplicationPtr Word::FormField::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2417)
inline long Word::FormField::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2418)
inline IDispatchPtr Word::FormField::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2419)
inline enum WdFieldType Word::FormField::GetType ( ) {
    enum WdFieldType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2420)
inline _bstr_t Word::FormField::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2421)
inline void Word::FormField::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2422)
inline _bstr_t Word::FormField::GetEntryMacro ( ) {
    BSTR _result;
    HRESULT _hr = get_EntryMacro(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2423)
inline void Word::FormField::PutEntryMacro ( _bstr_t prop ) {
    HRESULT _hr = put_EntryMacro(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2424)
inline _bstr_t Word::FormField::GetExitMacro ( ) {
    BSTR _result;
    HRESULT _hr = get_ExitMacro(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2425)
inline void Word::FormField::PutExitMacro ( _bstr_t prop ) {
    HRESULT _hr = put_ExitMacro(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2426)
inline VARIANT_BOOL Word::FormField::GetOwnHelp ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OwnHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2427)
inline void Word::FormField::PutOwnHelp ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_OwnHelp(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2428)
inline VARIANT_BOOL Word::FormField::GetOwnStatus ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OwnStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2429)
inline void Word::FormField::PutOwnStatus ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_OwnStatus(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2430)
inline _bstr_t Word::FormField::GetHelpText ( ) {
    BSTR _result;
    HRESULT _hr = get_HelpText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2431)
inline void Word::FormField::PutHelpText ( _bstr_t prop ) {
    HRESULT _hr = put_HelpText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2432)
inline _bstr_t Word::FormField::GetStatusText ( ) {
    BSTR _result;
    HRESULT _hr = get_StatusText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2433)
inline void Word::FormField::PutStatusText ( _bstr_t prop ) {
    HRESULT _hr = put_StatusText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2434)
inline VARIANT_BOOL Word::FormField::GetEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2435)
inline void Word::FormField::PutEnabled ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Enabled(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2436)
inline _bstr_t Word::FormField::GetResult ( ) {
    BSTR _result;
    HRESULT _hr = get_Result(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2437)
inline void Word::FormField::PutResult ( _bstr_t prop ) {
    HRESULT _hr = put_Result(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2438)
inline Word::TextInputPtr Word::FormField::GetTextInput ( ) {
    struct TextInput * _result;
    HRESULT _hr = get_TextInput(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextInputPtr(_result, false);
}

#pragma implementation_key(2439)
inline Word::CheckBoxPtr Word::FormField::GetCheckBox ( ) {
    struct CheckBox * _result;
    HRESULT _hr = get_CheckBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CheckBoxPtr(_result, false);
}

#pragma implementation_key(2440)
inline Word::DropDownPtr Word::FormField::GetDropDown ( ) {
    struct DropDown * _result;
    HRESULT _hr = get_DropDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DropDownPtr(_result, false);
}

#pragma implementation_key(2441)
inline Word::FormFieldPtr Word::FormField::GetNext ( ) {
    struct FormField * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormFieldPtr(_result, false);
}

#pragma implementation_key(2442)
inline Word::FormFieldPtr Word::FormField::GetPrevious ( ) {
    struct FormField * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormFieldPtr(_result, false);
}

#pragma implementation_key(2443)
inline VARIANT_BOOL Word::FormField::GetCalculateOnExit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CalculateOnExit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2444)
inline void Word::FormField::PutCalculateOnExit ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CalculateOnExit(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2445)
inline Word::RangePtr Word::FormField::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2446)
inline HRESULT Word::FormField::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2447)
inline HRESULT Word::FormField::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2448)
inline HRESULT Word::FormField::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2449)
inline HRESULT Word::FormField::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TextInput wrapper method implementations
//

#pragma implementation_key(2450)
inline Word::_ApplicationPtr Word::TextInput::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2451)
inline long Word::TextInput::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2452)
inline IDispatchPtr Word::TextInput::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2453)
inline VARIANT_BOOL Word::TextInput::GetValid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2454)
inline _bstr_t Word::TextInput::GetDefault ( ) {
    BSTR _result;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2455)
inline void Word::TextInput::PutDefault ( _bstr_t prop ) {
    HRESULT _hr = put_Default(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2456)
inline enum WdTextFormFieldType Word::TextInput::GetType ( ) {
    enum WdTextFormFieldType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2457)
inline _bstr_t Word::TextInput::GetFormat ( ) {
    BSTR _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2458)
inline long Word::TextInput::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2459)
inline void Word::TextInput::PutWidth ( long prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2460)
inline HRESULT Word::TextInput::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2461)
inline HRESULT Word::TextInput::EditType ( enum WdTextFormFieldType Type, VARIANT * Default, VARIANT * Format, VARIANT * Enabled ) {
    HRESULT _hr = raw_EditType(Type, Default, Format, Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface CheckBox wrapper method implementations
//

#pragma implementation_key(2462)
inline Word::_ApplicationPtr Word::CheckBox::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2463)
inline long Word::CheckBox::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2464)
inline IDispatchPtr Word::CheckBox::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2465)
inline VARIANT_BOOL Word::CheckBox::GetValid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2466)
inline VARIANT_BOOL Word::CheckBox::GetAutoSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2467)
inline void Word::CheckBox::PutAutoSize ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoSize(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2468)
inline float Word::CheckBox::GetSize ( ) {
    float _result;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2469)
inline void Word::CheckBox::PutSize ( float prop ) {
    HRESULT _hr = put_Size(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2470)
inline VARIANT_BOOL Word::CheckBox::GetDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2471)
inline void Word::CheckBox::PutDefault ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Default(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2472)
inline VARIANT_BOOL Word::CheckBox::GetValue ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2473)
inline void Word::CheckBox::PutValue ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Value(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface DropDown wrapper method implementations
//

#pragma implementation_key(2474)
inline Word::_ApplicationPtr Word::DropDown::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2475)
inline long Word::DropDown::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2476)
inline IDispatchPtr Word::DropDown::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2477)
inline VARIANT_BOOL Word::DropDown::GetValid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2478)
inline long Word::DropDown::GetDefault ( ) {
    long _result;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2479)
inline void Word::DropDown::PutDefault ( long prop ) {
    HRESULT _hr = put_Default(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2480)
inline long Word::DropDown::GetValue ( ) {
    long _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2481)
inline void Word::DropDown::PutValue ( long prop ) {
    HRESULT _hr = put_Value(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2482)
inline Word::ListEntriesPtr Word::DropDown::GetListEntries ( ) {
    struct ListEntries * _result;
    HRESULT _hr = get_ListEntries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListEntriesPtr(_result, false);
}

//
// interface ListEntries wrapper method implementations
//

#pragma implementation_key(2483)
inline Word::_ApplicationPtr Word::ListEntries::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2484)
inline long Word::ListEntries::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2485)
inline IDispatchPtr Word::ListEntries::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2486)
inline IUnknownPtr Word::ListEntries::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2487)
inline long Word::ListEntries::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2488)
inline Word::ListEntryPtr Word::ListEntries::Item ( VARIANT * Index ) {
    struct ListEntry * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListEntryPtr(_result, false);
}

#pragma implementation_key(2489)
inline Word::ListEntryPtr Word::ListEntries::Add ( _bstr_t Name, VARIANT * Index ) {
    struct ListEntry * _result;
    HRESULT _hr = raw_Add(Name, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListEntryPtr(_result, false);
}

#pragma implementation_key(2490)
inline HRESULT Word::ListEntries::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ListEntry wrapper method implementations
//

#pragma implementation_key(2491)
inline Word::_ApplicationPtr Word::ListEntry::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2492)
inline long Word::ListEntry::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2493)
inline IDispatchPtr Word::ListEntry::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2494)
inline long Word::ListEntry::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2495)
inline _bstr_t Word::ListEntry::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2496)
inline void Word::ListEntry::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2497)
inline HRESULT Word::ListEntry::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TablesOfFigures wrapper method implementations
//

#pragma implementation_key(2498)
inline Word::_ApplicationPtr Word::TablesOfFigures::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2499)
inline long Word::TablesOfFigures::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2500)
inline IDispatchPtr Word::TablesOfFigures::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2501)
inline IUnknownPtr Word::TablesOfFigures::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2502)
inline long Word::TablesOfFigures::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2503)
inline enum WdTofFormat Word::TablesOfFigures::GetFormat ( ) {
    enum WdTofFormat _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2504)
inline void Word::TablesOfFigures::PutFormat ( enum WdTofFormat prop ) {
    HRESULT _hr = put_Format(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2505)
inline Word::TableOfFiguresPtr Word::TablesOfFigures::Item ( long Index ) {
    struct TableOfFigures * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableOfFiguresPtr(_result, false);
}

#pragma implementation_key(2506)
inline Word::TableOfFiguresPtr Word::TablesOfFigures::AddOld ( struct Range * Range, VARIANT * Caption, VARIANT * IncludeLabel, VARIANT * UseHeadingStyles, VARIANT * UpperHeadingLevel, VARIANT * LowerHeadingLevel, VARIANT * UseFields, VARIANT * TableID, VARIANT * RightAlignPageNumbers, VARIANT * IncludePageNumbers, VARIANT * AddedStyles ) {
    struct TableOfFigures * _result;
    HRESULT _hr = raw_AddOld(Range, Caption, IncludeLabel, UseHeadingStyles, UpperHeadingLevel, LowerHeadingLevel, UseFields, TableID, RightAlignPageNumbers, IncludePageNumbers, AddedStyles, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableOfFiguresPtr(_result, false);
}

#pragma implementation_key(2507)
inline Word::FieldPtr Word::TablesOfFigures::MarkEntry ( struct Range * Range, VARIANT * Entry, VARIANT * EntryAutoText, VARIANT * TableID, VARIANT * Level ) {
    struct Field * _result;
    HRESULT _hr = raw_MarkEntry(Range, Entry, EntryAutoText, TableID, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldPtr(_result, false);
}

#pragma implementation_key(2508)
inline Word::TableOfFiguresPtr Word::TablesOfFigures::Add ( struct Range * Range, VARIANT * Caption, VARIANT * IncludeLabel, VARIANT * UseHeadingStyles, VARIANT * UpperHeadingLevel, VARIANT * LowerHeadingLevel, VARIANT * UseFields, VARIANT * TableID, VARIANT * RightAlignPageNumbers, VARIANT * IncludePageNumbers, VARIANT * AddedStyles, VARIANT * UseHyperlinks, VARIANT * HidePageNumbersInWeb ) {
    struct TableOfFigures * _result;
    HRESULT _hr = raw_Add(Range, Caption, IncludeLabel, UseHeadingStyles, UpperHeadingLevel, LowerHeadingLevel, UseFields, TableID, RightAlignPageNumbers, IncludePageNumbers, AddedStyles, UseHyperlinks, HidePageNumbersInWeb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableOfFiguresPtr(_result, false);
}

//
// interface TableOfFigures wrapper method implementations
//

#pragma implementation_key(2509)
inline Word::_ApplicationPtr Word::TableOfFigures::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2510)
inline long Word::TableOfFigures::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2511)
inline IDispatchPtr Word::TableOfFigures::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2512)
inline _bstr_t Word::TableOfFigures::GetCaption ( ) {
    BSTR _result;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2513)
inline void Word::TableOfFigures::PutCaption ( _bstr_t prop ) {
    HRESULT _hr = put_Caption(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2514)
inline VARIANT_BOOL Word::TableOfFigures::GetIncludeLabel ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludeLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2515)
inline void Word::TableOfFigures::PutIncludeLabel ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IncludeLabel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2516)
inline VARIANT_BOOL Word::TableOfFigures::GetRightAlignPageNumbers ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RightAlignPageNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2517)
inline void Word::TableOfFigures::PutRightAlignPageNumbers ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_RightAlignPageNumbers(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2518)
inline VARIANT_BOOL Word::TableOfFigures::GetUseHeadingStyles ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseHeadingStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2519)
inline void Word::TableOfFigures::PutUseHeadingStyles ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseHeadingStyles(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2520)
inline long Word::TableOfFigures::GetLowerHeadingLevel ( ) {
    long _result;
    HRESULT _hr = get_LowerHeadingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2521)
inline void Word::TableOfFigures::PutLowerHeadingLevel ( long prop ) {
    HRESULT _hr = put_LowerHeadingLevel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2522)
inline long Word::TableOfFigures::GetUpperHeadingLevel ( ) {
    long _result;
    HRESULT _hr = get_UpperHeadingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2523)
inline void Word::TableOfFigures::PutUpperHeadingLevel ( long prop ) {
    HRESULT _hr = put_UpperHeadingLevel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2524)
inline VARIANT_BOOL Word::TableOfFigures::GetIncludePageNumbers ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludePageNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2525)
inline void Word::TableOfFigures::PutIncludePageNumbers ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IncludePageNumbers(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2526)
inline Word::RangePtr Word::TableOfFigures::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2527)
inline VARIANT_BOOL Word::TableOfFigures::GetUseFields ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2528)
inline void Word::TableOfFigures::PutUseFields ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseFields(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2529)
inline _bstr_t Word::TableOfFigures::GetTableID ( ) {
    BSTR _result;
    HRESULT _hr = get_TableID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2530)
inline void Word::TableOfFigures::PutTableID ( _bstr_t prop ) {
    HRESULT _hr = put_TableID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2531)
inline Word::HeadingStylesPtr Word::TableOfFigures::GetHeadingStyles ( ) {
    struct HeadingStyles * _result;
    HRESULT _hr = get_HeadingStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadingStylesPtr(_result, false);
}

#pragma implementation_key(2532)
inline enum WdTabLeader Word::TableOfFigures::GetTabLeader ( ) {
    enum WdTabLeader _result;
    HRESULT _hr = get_TabLeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2533)
inline void Word::TableOfFigures::PutTabLeader ( enum WdTabLeader prop ) {
    HRESULT _hr = put_TabLeader(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2534)
inline HRESULT Word::TableOfFigures::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2535)
inline HRESULT Word::TableOfFigures::UpdatePageNumbers ( ) {
    HRESULT _hr = raw_UpdatePageNumbers();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2536)
inline HRESULT Word::TableOfFigures::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2537)
inline VARIANT_BOOL Word::TableOfFigures::GetUseHyperlinks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseHyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2538)
inline void Word::TableOfFigures::PutUseHyperlinks ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseHyperlinks(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2539)
inline VARIANT_BOOL Word::TableOfFigures::GetHidePageNumbersInWeb ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HidePageNumbersInWeb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2540)
inline void Word::TableOfFigures::PutHidePageNumbersInWeb ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_HidePageNumbersInWeb(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface MailMerge wrapper method implementations
//

#pragma implementation_key(2541)
inline Word::_ApplicationPtr Word::MailMerge::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2542)
inline long Word::MailMerge::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2543)
inline IDispatchPtr Word::MailMerge::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2544)
inline enum WdMailMergeMainDocType Word::MailMerge::GetMainDocumentType ( ) {
    enum WdMailMergeMainDocType _result;
    HRESULT _hr = get_MainDocumentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2545)
inline void Word::MailMerge::PutMainDocumentType ( enum WdMailMergeMainDocType prop ) {
    HRESULT _hr = put_MainDocumentType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2546)
inline enum WdMailMergeState Word::MailMerge::GetState ( ) {
    enum WdMailMergeState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2547)
inline enum WdMailMergeDestination Word::MailMerge::GetDestination ( ) {
    enum WdMailMergeDestination _result;
    HRESULT _hr = get_Destination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2548)
inline void Word::MailMerge::PutDestination ( enum WdMailMergeDestination prop ) {
    HRESULT _hr = put_Destination(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2549)
inline Word::MailMergeDataSourcePtr Word::MailMerge::GetDataSource ( ) {
    struct MailMergeDataSource * _result;
    HRESULT _hr = get_DataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeDataSourcePtr(_result, false);
}

#pragma implementation_key(2550)
inline Word::MailMergeFieldsPtr Word::MailMerge::GetFields ( ) {
    struct MailMergeFields * _result;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldsPtr(_result, false);
}

#pragma implementation_key(2551)
inline long Word::MailMerge::GetViewMailMergeFieldCodes ( ) {
    long _result;
    HRESULT _hr = get_ViewMailMergeFieldCodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2552)
inline void Word::MailMerge::PutViewMailMergeFieldCodes ( long prop ) {
    HRESULT _hr = put_ViewMailMergeFieldCodes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2553)
inline VARIANT_BOOL Word::MailMerge::GetSuppressBlankLines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SuppressBlankLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2554)
inline void Word::MailMerge::PutSuppressBlankLines ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SuppressBlankLines(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2555)
inline VARIANT_BOOL Word::MailMerge::GetMailAsAttachment ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MailAsAttachment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2556)
inline void Word::MailMerge::PutMailAsAttachment ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MailAsAttachment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2557)
inline _bstr_t Word::MailMerge::GetMailAddressFieldName ( ) {
    BSTR _result;
    HRESULT _hr = get_MailAddressFieldName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2558)
inline void Word::MailMerge::PutMailAddressFieldName ( _bstr_t prop ) {
    HRESULT _hr = put_MailAddressFieldName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2559)
inline _bstr_t Word::MailMerge::GetMailSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_MailSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2560)
inline void Word::MailMerge::PutMailSubject ( _bstr_t prop ) {
    HRESULT _hr = put_MailSubject(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2561)
inline HRESULT Word::MailMerge::CreateDataSource ( VARIANT * Name, VARIANT * PasswordDocument, VARIANT * WritePasswordDocument, VARIANT * HeaderRecord, VARIANT * MSQuery, VARIANT * SQLStatement, VARIANT * SQLStatement1, VARIANT * Connection, VARIANT * LinkToSource ) {
    HRESULT _hr = raw_CreateDataSource(Name, PasswordDocument, WritePasswordDocument, HeaderRecord, MSQuery, SQLStatement, SQLStatement1, Connection, LinkToSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2562)
inline HRESULT Word::MailMerge::CreateHeaderSource ( _bstr_t Name, VARIANT * PasswordDocument, VARIANT * WritePasswordDocument, VARIANT * HeaderRecord ) {
    HRESULT _hr = raw_CreateHeaderSource(Name, PasswordDocument, WritePasswordDocument, HeaderRecord);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2563)
inline HRESULT Word::MailMerge::OpenDataSource2000 ( _bstr_t Name, VARIANT * Format, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * LinkToSource, VARIANT * AddToRecentFiles, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate, VARIANT * Connection, VARIANT * SQLStatement, VARIANT * SQLStatement1 ) {
    HRESULT _hr = raw_OpenDataSource2000(Name, Format, ConfirmConversions, ReadOnly, LinkToSource, AddToRecentFiles, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate, Connection, SQLStatement, SQLStatement1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2564)
inline HRESULT Word::MailMerge::OpenHeaderSource2000 ( _bstr_t Name, VARIANT * Format, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * AddToRecentFiles, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate ) {
    HRESULT _hr = raw_OpenHeaderSource2000(Name, Format, ConfirmConversions, ReadOnly, AddToRecentFiles, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2565)
inline HRESULT Word::MailMerge::Execute ( VARIANT * Pause ) {
    HRESULT _hr = raw_Execute(Pause);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2566)
inline HRESULT Word::MailMerge::Check ( ) {
    HRESULT _hr = raw_Check();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2567)
inline HRESULT Word::MailMerge::EditDataSource ( ) {
    HRESULT _hr = raw_EditDataSource();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2568)
inline HRESULT Word::MailMerge::EditHeaderSource ( ) {
    HRESULT _hr = raw_EditHeaderSource();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2569)
inline HRESULT Word::MailMerge::EditMainDocument ( ) {
    HRESULT _hr = raw_EditMainDocument();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2570)
inline HRESULT Word::MailMerge::UseAddressBook ( _bstr_t Type ) {
    HRESULT _hr = raw_UseAddressBook(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2571)
inline VARIANT_BOOL Word::MailMerge::GetHighlightMergeFields ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HighlightMergeFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2572)
inline void Word::MailMerge::PutHighlightMergeFields ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_HighlightMergeFields(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2573)
inline enum WdMailMergeMailFormat Word::MailMerge::GetMailFormat ( ) {
    enum WdMailMergeMailFormat _result;
    HRESULT _hr = get_MailFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2574)
inline void Word::MailMerge::PutMailFormat ( enum WdMailMergeMailFormat prop ) {
    HRESULT _hr = put_MailFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2575)
inline _bstr_t Word::MailMerge::GetShowSendToCustom ( ) {
    BSTR _result;
    HRESULT _hr = get_ShowSendToCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2576)
inline void Word::MailMerge::PutShowSendToCustom ( _bstr_t prop ) {
    HRESULT _hr = put_ShowSendToCustom(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2577)
inline long Word::MailMerge::GetWizardState ( ) {
    long _result;
    HRESULT _hr = get_WizardState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2578)
inline void Word::MailMerge::PutWizardState ( long prop ) {
    HRESULT _hr = put_WizardState(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2579)
inline HRESULT Word::MailMerge::OpenDataSource ( _bstr_t Name, VARIANT * Format, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * LinkToSource, VARIANT * AddToRecentFiles, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate, VARIANT * Connection, VARIANT * SQLStatement, VARIANT * SQLStatement1, VARIANT * OpenExclusive, VARIANT * SubType ) {
    HRESULT _hr = raw_OpenDataSource(Name, Format, ConfirmConversions, ReadOnly, LinkToSource, AddToRecentFiles, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate, Connection, SQLStatement, SQLStatement1, OpenExclusive, SubType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2580)
inline HRESULT Word::MailMerge::OpenHeaderSource ( _bstr_t Name, VARIANT * Format, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * AddToRecentFiles, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate, VARIANT * OpenExclusive ) {
    HRESULT _hr = raw_OpenHeaderSource(Name, Format, ConfirmConversions, ReadOnly, AddToRecentFiles, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate, OpenExclusive);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2581)
inline HRESULT Word::MailMerge::ShowWizard ( VARIANT * InitialState, VARIANT * ShowDocumentStep, VARIANT * ShowTemplateStep, VARIANT * ShowDataStep, VARIANT * ShowWriteStep, VARIANT * ShowPreviewStep, VARIANT * ShowMergeStep ) {
    HRESULT _hr = raw_ShowWizard(InitialState, ShowDocumentStep, ShowTemplateStep, ShowDataStep, ShowWriteStep, ShowPreviewStep, ShowMergeStep);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MailMergeFields wrapper method implementations
//

#pragma implementation_key(2582)
inline Word::_ApplicationPtr Word::MailMergeFields::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2583)
inline long Word::MailMergeFields::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2584)
inline IDispatchPtr Word::MailMergeFields::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2585)
inline IUnknownPtr Word::MailMergeFields::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2586)
inline long Word::MailMergeFields::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2587)
inline Word::MailMergeFieldPtr Word::MailMergeFields::Item ( long Index ) {
    struct MailMergeField * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

#pragma implementation_key(2588)
inline Word::MailMergeFieldPtr Word::MailMergeFields::Add ( struct Range * Range, _bstr_t Name ) {
    struct MailMergeField * _result;
    HRESULT _hr = raw_Add(Range, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

#pragma implementation_key(2589)
inline Word::MailMergeFieldPtr Word::MailMergeFields::AddAsk ( struct Range * Range, _bstr_t Name, VARIANT * Prompt, VARIANT * DefaultAskText, VARIANT * AskOnce ) {
    struct MailMergeField * _result;
    HRESULT _hr = raw_AddAsk(Range, Name, Prompt, DefaultAskText, AskOnce, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

#pragma implementation_key(2590)
inline Word::MailMergeFieldPtr Word::MailMergeFields::AddFillIn ( struct Range * Range, VARIANT * Prompt, VARIANT * DefaultFillInText, VARIANT * AskOnce ) {
    struct MailMergeField * _result;
    HRESULT _hr = raw_AddFillIn(Range, Prompt, DefaultFillInText, AskOnce, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

#pragma implementation_key(2591)
inline Word::MailMergeFieldPtr Word::MailMergeFields::AddIf ( struct Range * Range, _bstr_t MergeField, enum WdMailMergeComparison Comparison, VARIANT * CompareTo, VARIANT * TrueAutoText, VARIANT * TrueText, VARIANT * FalseAutoText, VARIANT * FalseText ) {
    struct MailMergeField * _result;
    HRESULT _hr = raw_AddIf(Range, MergeField, Comparison, CompareTo, TrueAutoText, TrueText, FalseAutoText, FalseText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

#pragma implementation_key(2592)
inline Word::MailMergeFieldPtr Word::MailMergeFields::AddMergeRec ( struct Range * Range ) {
    struct MailMergeField * _result;
    HRESULT _hr = raw_AddMergeRec(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

#pragma implementation_key(2593)
inline Word::MailMergeFieldPtr Word::MailMergeFields::AddMergeSeq ( struct Range * Range ) {
    struct MailMergeField * _result;
    HRESULT _hr = raw_AddMergeSeq(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

#pragma implementation_key(2594)
inline Word::MailMergeFieldPtr Word::MailMergeFields::AddNext ( struct Range * Range ) {
    struct MailMergeField * _result;
    HRESULT _hr = raw_AddNext(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

#pragma implementation_key(2595)
inline Word::MailMergeFieldPtr Word::MailMergeFields::AddNextIf ( struct Range * Range, _bstr_t MergeField, enum WdMailMergeComparison Comparison, VARIANT * CompareTo ) {
    struct MailMergeField * _result;
    HRESULT _hr = raw_AddNextIf(Range, MergeField, Comparison, CompareTo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

#pragma implementation_key(2596)
inline Word::MailMergeFieldPtr Word::MailMergeFields::AddSet ( struct Range * Range, _bstr_t Name, VARIANT * ValueText, VARIANT * ValueAutoText ) {
    struct MailMergeField * _result;
    HRESULT _hr = raw_AddSet(Range, Name, ValueText, ValueAutoText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

#pragma implementation_key(2597)
inline Word::MailMergeFieldPtr Word::MailMergeFields::AddSkipIf ( struct Range * Range, _bstr_t MergeField, enum WdMailMergeComparison Comparison, VARIANT * CompareTo ) {
    struct MailMergeField * _result;
    HRESULT _hr = raw_AddSkipIf(Range, MergeField, Comparison, CompareTo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

//
// interface MailMergeField wrapper method implementations
//

#pragma implementation_key(2598)
inline Word::_ApplicationPtr Word::MailMergeField::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2599)
inline long Word::MailMergeField::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2600)
inline IDispatchPtr Word::MailMergeField::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2601)
inline enum WdFieldType Word::MailMergeField::GetType ( ) {
    enum WdFieldType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2602)
inline VARIANT_BOOL Word::MailMergeField::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2603)
inline void Word::MailMergeField::PutLocked ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Locked(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2604)
inline Word::RangePtr Word::MailMergeField::GetCode ( ) {
    struct Range * _result;
    HRESULT _hr = get_Code(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2605)
inline void Word::MailMergeField::PutCode ( struct Range * prop ) {
    HRESULT _hr = put_Code(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2606)
inline Word::MailMergeFieldPtr Word::MailMergeField::GetNext ( ) {
    struct MailMergeField * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

#pragma implementation_key(2607)
inline Word::MailMergeFieldPtr Word::MailMergeField::GetPrevious ( ) {
    struct MailMergeField * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldPtr(_result, false);
}

#pragma implementation_key(2608)
inline HRESULT Word::MailMergeField::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2609)
inline HRESULT Word::MailMergeField::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2610)
inline HRESULT Word::MailMergeField::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2611)
inline HRESULT Word::MailMergeField::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MailMergeDataSource wrapper method implementations
//

#pragma implementation_key(2612)
inline Word::_ApplicationPtr Word::MailMergeDataSource::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2613)
inline long Word::MailMergeDataSource::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2614)
inline IDispatchPtr Word::MailMergeDataSource::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2615)
inline _bstr_t Word::MailMergeDataSource::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2616)
inline _bstr_t Word::MailMergeDataSource::GetHeaderSourceName ( ) {
    BSTR _result;
    HRESULT _hr = get_HeaderSourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2617)
inline enum WdMailMergeDataSource Word::MailMergeDataSource::GetType ( ) {
    enum WdMailMergeDataSource _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2618)
inline enum WdMailMergeDataSource Word::MailMergeDataSource::GetHeaderSourceType ( ) {
    enum WdMailMergeDataSource _result;
    HRESULT _hr = get_HeaderSourceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2619)
inline _bstr_t Word::MailMergeDataSource::GetConnectString ( ) {
    BSTR _result;
    HRESULT _hr = get_ConnectString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2620)
inline _bstr_t Word::MailMergeDataSource::GetQueryString ( ) {
    BSTR _result;
    HRESULT _hr = get_QueryString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2621)
inline void Word::MailMergeDataSource::PutQueryString ( _bstr_t prop ) {
    HRESULT _hr = put_QueryString(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2622)
inline enum WdMailMergeActiveRecord Word::MailMergeDataSource::GetActiveRecord ( ) {
    enum WdMailMergeActiveRecord _result;
    HRESULT _hr = get_ActiveRecord(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2623)
inline void Word::MailMergeDataSource::PutActiveRecord ( enum WdMailMergeActiveRecord prop ) {
    HRESULT _hr = put_ActiveRecord(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2624)
inline long Word::MailMergeDataSource::GetFirstRecord ( ) {
    long _result;
    HRESULT _hr = get_FirstRecord(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2625)
inline void Word::MailMergeDataSource::PutFirstRecord ( long prop ) {
    HRESULT _hr = put_FirstRecord(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2626)
inline long Word::MailMergeDataSource::GetLastRecord ( ) {
    long _result;
    HRESULT _hr = get_LastRecord(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2627)
inline void Word::MailMergeDataSource::PutLastRecord ( long prop ) {
    HRESULT _hr = put_LastRecord(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2628)
inline Word::MailMergeFieldNamesPtr Word::MailMergeDataSource::GetFieldNames ( ) {
    struct MailMergeFieldNames * _result;
    HRESULT _hr = get_FieldNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldNamesPtr(_result, false);
}

#pragma implementation_key(2629)
inline Word::MailMergeDataFieldsPtr Word::MailMergeDataSource::GetDataFields ( ) {
    struct MailMergeDataFields * _result;
    HRESULT _hr = get_DataFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeDataFieldsPtr(_result, false);
}

#pragma implementation_key(2630)
inline VARIANT_BOOL Word::MailMergeDataSource::FindRecord2000 ( _bstr_t FindText, _bstr_t Field ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_FindRecord2000(FindText, Field, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2631)
inline long Word::MailMergeDataSource::GetRecordCount ( ) {
    long _result;
    HRESULT _hr = get_RecordCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2632)
inline VARIANT_BOOL Word::MailMergeDataSource::GetIncluded ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Included(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2633)
inline void Word::MailMergeDataSource::PutIncluded ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Included(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2634)
inline VARIANT_BOOL Word::MailMergeDataSource::GetInvalidAddress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_InvalidAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2635)
inline void Word::MailMergeDataSource::PutInvalidAddress ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_InvalidAddress(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2636)
inline _bstr_t Word::MailMergeDataSource::GetInvalidComments ( ) {
    BSTR _result;
    HRESULT _hr = get_InvalidComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2637)
inline void Word::MailMergeDataSource::PutInvalidComments ( _bstr_t prop ) {
    HRESULT _hr = put_InvalidComments(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2638)
inline Word::MappedDataFieldsPtr Word::MailMergeDataSource::GetMappedDataFields ( ) {
    struct MappedDataFields * _result;
    HRESULT _hr = get_MappedDataFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MappedDataFieldsPtr(_result, false);
}

#pragma implementation_key(2639)
inline _bstr_t Word::MailMergeDataSource::GetTableName ( ) {
    BSTR _result;
    HRESULT _hr = get_TableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2640)
inline VARIANT_BOOL Word::MailMergeDataSource::FindRecord ( _bstr_t FindText, VARIANT * Field ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_FindRecord(FindText, Field, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2641)
inline HRESULT Word::MailMergeDataSource::SetAllIncludedFlags ( VARIANT_BOOL Included ) {
    HRESULT _hr = raw_SetAllIncludedFlags(Included);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2642)
inline HRESULT Word::MailMergeDataSource::SetAllErrorFlags ( VARIANT_BOOL Invalid, _bstr_t InvalidComment ) {
    HRESULT _hr = raw_SetAllErrorFlags(Invalid, InvalidComment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2643)
inline HRESULT Word::MailMergeDataSource::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MailMergeFieldNames wrapper method implementations
//

#pragma implementation_key(2644)
inline Word::_ApplicationPtr Word::MailMergeFieldNames::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2645)
inline long Word::MailMergeFieldNames::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2646)
inline IDispatchPtr Word::MailMergeFieldNames::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2647)
inline IUnknownPtr Word::MailMergeFieldNames::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2648)
inline long Word::MailMergeFieldNames::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2649)
inline Word::MailMergeFieldNamePtr Word::MailMergeFieldNames::Item ( VARIANT * Index ) {
    struct MailMergeFieldName * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeFieldNamePtr(_result, false);
}

//
// interface MailMergeFieldName wrapper method implementations
//

#pragma implementation_key(2650)
inline Word::_ApplicationPtr Word::MailMergeFieldName::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2651)
inline long Word::MailMergeFieldName::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2652)
inline IDispatchPtr Word::MailMergeFieldName::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2653)
inline _bstr_t Word::MailMergeFieldName::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2654)
inline long Word::MailMergeFieldName::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface MailMergeDataFields wrapper method implementations
//

#pragma implementation_key(2655)
inline Word::_ApplicationPtr Word::MailMergeDataFields::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2656)
inline long Word::MailMergeDataFields::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2657)
inline IDispatchPtr Word::MailMergeDataFields::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2658)
inline IUnknownPtr Word::MailMergeDataFields::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2659)
inline long Word::MailMergeDataFields::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2660)
inline Word::MailMergeDataFieldPtr Word::MailMergeDataFields::Item ( VARIANT * Index ) {
    struct MailMergeDataField * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MailMergeDataFieldPtr(_result, false);
}

//
// interface MailMergeDataField wrapper method implementations
//

#pragma implementation_key(2661)
inline Word::_ApplicationPtr Word::MailMergeDataField::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2662)
inline long Word::MailMergeDataField::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2663)
inline IDispatchPtr Word::MailMergeDataField::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2664)
inline _bstr_t Word::MailMergeDataField::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2665)
inline _bstr_t Word::MailMergeDataField::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2666)
inline long Word::MailMergeDataField::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Envelope wrapper method implementations
//

#pragma implementation_key(2667)
inline Word::_ApplicationPtr Word::Envelope::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2668)
inline long Word::Envelope::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2669)
inline IDispatchPtr Word::Envelope::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2670)
inline Word::RangePtr Word::Envelope::GetAddress ( ) {
    struct Range * _result;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2671)
inline Word::RangePtr Word::Envelope::GetReturnAddress ( ) {
    struct Range * _result;
    HRESULT _hr = get_ReturnAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2672)
inline VARIANT_BOOL Word::Envelope::GetDefaultPrintBarCode ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DefaultPrintBarCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2673)
inline void Word::Envelope::PutDefaultPrintBarCode ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DefaultPrintBarCode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2674)
inline VARIANT_BOOL Word::Envelope::GetDefaultPrintFIMA ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DefaultPrintFIMA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2675)
inline void Word::Envelope::PutDefaultPrintFIMA ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DefaultPrintFIMA(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2676)
inline float Word::Envelope::GetDefaultHeight ( ) {
    float _result;
    HRESULT _hr = get_DefaultHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2677)
inline void Word::Envelope::PutDefaultHeight ( float prop ) {
    HRESULT _hr = put_DefaultHeight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2678)
inline float Word::Envelope::GetDefaultWidth ( ) {
    float _result;
    HRESULT _hr = get_DefaultWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2679)
inline void Word::Envelope::PutDefaultWidth ( float prop ) {
    HRESULT _hr = put_DefaultWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2680)
inline _bstr_t Word::Envelope::GetDefaultSize ( ) {
    BSTR _result;
    HRESULT _hr = get_DefaultSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2681)
inline void Word::Envelope::PutDefaultSize ( _bstr_t prop ) {
    HRESULT _hr = put_DefaultSize(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2682)
inline VARIANT_BOOL Word::Envelope::GetDefaultOmitReturnAddress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DefaultOmitReturnAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2683)
inline void Word::Envelope::PutDefaultOmitReturnAddress ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DefaultOmitReturnAddress(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2684)
inline enum WdPaperTray Word::Envelope::GetFeedSource ( ) {
    enum WdPaperTray _result;
    HRESULT _hr = get_FeedSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2685)
inline void Word::Envelope::PutFeedSource ( enum WdPaperTray prop ) {
    HRESULT _hr = put_FeedSource(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2686)
inline float Word::Envelope::GetAddressFromLeft ( ) {
    float _result;
    HRESULT _hr = get_AddressFromLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2687)
inline void Word::Envelope::PutAddressFromLeft ( float prop ) {
    HRESULT _hr = put_AddressFromLeft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2688)
inline float Word::Envelope::GetAddressFromTop ( ) {
    float _result;
    HRESULT _hr = get_AddressFromTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2689)
inline void Word::Envelope::PutAddressFromTop ( float prop ) {
    HRESULT _hr = put_AddressFromTop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2690)
inline float Word::Envelope::GetReturnAddressFromLeft ( ) {
    float _result;
    HRESULT _hr = get_ReturnAddressFromLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2691)
inline void Word::Envelope::PutReturnAddressFromLeft ( float prop ) {
    HRESULT _hr = put_ReturnAddressFromLeft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2692)
inline float Word::Envelope::GetReturnAddressFromTop ( ) {
    float _result;
    HRESULT _hr = get_ReturnAddressFromTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2693)
inline void Word::Envelope::PutReturnAddressFromTop ( float prop ) {
    HRESULT _hr = put_ReturnAddressFromTop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2694)
inline Word::StylePtr Word::Envelope::GetAddressStyle ( ) {
    struct Style * _result;
    HRESULT _hr = get_AddressStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

#pragma implementation_key(2695)
inline Word::StylePtr Word::Envelope::GetReturnAddressStyle ( ) {
    struct Style * _result;
    HRESULT _hr = get_ReturnAddressStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

#pragma implementation_key(2696)
inline enum WdEnvelopeOrientation Word::Envelope::GetDefaultOrientation ( ) {
    enum WdEnvelopeOrientation _result;
    HRESULT _hr = get_DefaultOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2697)
inline void Word::Envelope::PutDefaultOrientation ( enum WdEnvelopeOrientation prop ) {
    HRESULT _hr = put_DefaultOrientation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2698)
inline VARIANT_BOOL Word::Envelope::GetDefaultFaceUp ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DefaultFaceUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2699)
inline void Word::Envelope::PutDefaultFaceUp ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DefaultFaceUp(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2700)
inline HRESULT Word::Envelope::Insert2000 ( VARIANT * ExtractAddress, VARIANT * Address, VARIANT * AutoText, VARIANT * OmitReturnAddress, VARIANT * ReturnAddress, VARIANT * ReturnAutoText, VARIANT * PrintBarCode, VARIANT * PrintFIMA, VARIANT * Size, VARIANT * Height, VARIANT * Width, VARIANT * FeedSource, VARIANT * AddressFromLeft, VARIANT * AddressFromTop, VARIANT * ReturnAddressFromLeft, VARIANT * ReturnAddressFromTop, VARIANT * DefaultFaceUp, VARIANT * DefaultOrientation ) {
    HRESULT _hr = raw_Insert2000(ExtractAddress, Address, AutoText, OmitReturnAddress, ReturnAddress, ReturnAutoText, PrintBarCode, PrintFIMA, Size, Height, Width, FeedSource, AddressFromLeft, AddressFromTop, ReturnAddressFromLeft, ReturnAddressFromTop, DefaultFaceUp, DefaultOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2701)
inline HRESULT Word::Envelope::PrintOut2000 ( VARIANT * ExtractAddress, VARIANT * Address, VARIANT * AutoText, VARIANT * OmitReturnAddress, VARIANT * ReturnAddress, VARIANT * ReturnAutoText, VARIANT * PrintBarCode, VARIANT * PrintFIMA, VARIANT * Size, VARIANT * Height, VARIANT * Width, VARIANT * FeedSource, VARIANT * AddressFromLeft, VARIANT * AddressFromTop, VARIANT * ReturnAddressFromLeft, VARIANT * ReturnAddressFromTop, VARIANT * DefaultFaceUp, VARIANT * DefaultOrientation ) {
    HRESULT _hr = raw_PrintOut2000(ExtractAddress, Address, AutoText, OmitReturnAddress, ReturnAddress, ReturnAutoText, PrintBarCode, PrintFIMA, Size, Height, Width, FeedSource, AddressFromLeft, AddressFromTop, ReturnAddressFromLeft, ReturnAddressFromTop, DefaultFaceUp, DefaultOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2702)
inline HRESULT Word::Envelope::UpdateDocument ( ) {
    HRESULT _hr = raw_UpdateDocument();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2703)
inline HRESULT Word::Envelope::Options ( ) {
    HRESULT _hr = raw_Options();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2704)
inline VARIANT_BOOL Word::Envelope::GetVertical ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Vertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2705)
inline void Word::Envelope::PutVertical ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Vertical(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2706)
inline float Word::Envelope::GetRecipientNamefromLeft ( ) {
    float _result;
    HRESULT _hr = get_RecipientNamefromLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2707)
inline void Word::Envelope::PutRecipientNamefromLeft ( float prop ) {
    HRESULT _hr = put_RecipientNamefromLeft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2708)
inline float Word::Envelope::GetRecipientNamefromTop ( ) {
    float _result;
    HRESULT _hr = get_RecipientNamefromTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2709)
inline void Word::Envelope::PutRecipientNamefromTop ( float prop ) {
    HRESULT _hr = put_RecipientNamefromTop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2710)
inline float Word::Envelope::GetRecipientPostalfromLeft ( ) {
    float _result;
    HRESULT _hr = get_RecipientPostalfromLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2711)
inline void Word::Envelope::PutRecipientPostalfromLeft ( float prop ) {
    HRESULT _hr = put_RecipientPostalfromLeft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2712)
inline float Word::Envelope::GetRecipientPostalfromTop ( ) {
    float _result;
    HRESULT _hr = get_RecipientPostalfromTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2713)
inline void Word::Envelope::PutRecipientPostalfromTop ( float prop ) {
    HRESULT _hr = put_RecipientPostalfromTop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2714)
inline float Word::Envelope::GetSenderNamefromLeft ( ) {
    float _result;
    HRESULT _hr = get_SenderNamefromLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2715)
inline void Word::Envelope::PutSenderNamefromLeft ( float prop ) {
    HRESULT _hr = put_SenderNamefromLeft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2716)
inline float Word::Envelope::GetSenderNamefromTop ( ) {
    float _result;
    HRESULT _hr = get_SenderNamefromTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2717)
inline void Word::Envelope::PutSenderNamefromTop ( float prop ) {
    HRESULT _hr = put_SenderNamefromTop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2718)
inline float Word::Envelope::GetSenderPostalfromLeft ( ) {
    float _result;
    HRESULT _hr = get_SenderPostalfromLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2719)
inline void Word::Envelope::PutSenderPostalfromLeft ( float prop ) {
    HRESULT _hr = put_SenderPostalfromLeft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2720)
inline float Word::Envelope::GetSenderPostalfromTop ( ) {
    float _result;
    HRESULT _hr = get_SenderPostalfromTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2721)
inline void Word::Envelope::PutSenderPostalfromTop ( float prop ) {
    HRESULT _hr = put_SenderPostalfromTop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2722)
inline HRESULT Word::Envelope::Insert ( VARIANT * ExtractAddress, VARIANT * Address, VARIANT * AutoText, VARIANT * OmitReturnAddress, VARIANT * ReturnAddress, VARIANT * ReturnAutoText, VARIANT * PrintBarCode, VARIANT * PrintFIMA, VARIANT * Size, VARIANT * Height, VARIANT * Width, VARIANT * FeedSource, VARIANT * AddressFromLeft, VARIANT * AddressFromTop, VARIANT * ReturnAddressFromLeft, VARIANT * ReturnAddressFromTop, VARIANT * DefaultFaceUp, VARIANT * DefaultOrientation, VARIANT * PrintEPostage, VARIANT * Vertical, VARIANT * RecipientNamefromLeft, VARIANT * RecipientNamefromTop, VARIANT * RecipientPostalfromLeft, VARIANT * RecipientPostalfromTop, VARIANT * SenderNamefromLeft, VARIANT * SenderNamefromTop, VARIANT * SenderPostalfromLeft, VARIANT * SenderPostalfromTop ) {
    HRESULT _hr = raw_Insert(ExtractAddress, Address, AutoText, OmitReturnAddress, ReturnAddress, ReturnAutoText, PrintBarCode, PrintFIMA, Size, Height, Width, FeedSource, AddressFromLeft, AddressFromTop, ReturnAddressFromLeft, ReturnAddressFromTop, DefaultFaceUp, DefaultOrientation, PrintEPostage, Vertical, RecipientNamefromLeft, RecipientNamefromTop, RecipientPostalfromLeft, RecipientPostalfromTop, SenderNamefromLeft, SenderNamefromTop, SenderPostalfromLeft, SenderPostalfromTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2723)
inline HRESULT Word::Envelope::PrintOut ( VARIANT * ExtractAddress, VARIANT * Address, VARIANT * AutoText, VARIANT * OmitReturnAddress, VARIANT * ReturnAddress, VARIANT * ReturnAutoText, VARIANT * PrintBarCode, VARIANT * PrintFIMA, VARIANT * Size, VARIANT * Height, VARIANT * Width, VARIANT * FeedSource, VARIANT * AddressFromLeft, VARIANT * AddressFromTop, VARIANT * ReturnAddressFromLeft, VARIANT * ReturnAddressFromTop, VARIANT * DefaultFaceUp, VARIANT * DefaultOrientation, VARIANT * PrintEPostage, VARIANT * Vertical, VARIANT * RecipientNamefromLeft, VARIANT * RecipientNamefromTop, VARIANT * RecipientPostalfromLeft, VARIANT * RecipientPostalfromTop, VARIANT * SenderNamefromLeft, VARIANT * SenderNamefromTop, VARIANT * SenderPostalfromLeft, VARIANT * SenderPostalfromTop ) {
    HRESULT _hr = raw_PrintOut(ExtractAddress, Address, AutoText, OmitReturnAddress, ReturnAddress, ReturnAutoText, PrintBarCode, PrintFIMA, Size, Height, Width, FeedSource, AddressFromLeft, AddressFromTop, ReturnAddressFromLeft, ReturnAddressFromTop, DefaultFaceUp, DefaultOrientation, PrintEPostage, Vertical, RecipientNamefromLeft, RecipientNamefromTop, RecipientPostalfromLeft, RecipientPostalfromTop, SenderNamefromLeft, SenderNamefromTop, SenderPostalfromLeft, SenderPostalfromTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MailingLabel wrapper method implementations
//

#pragma implementation_key(2724)
inline Word::_ApplicationPtr Word::MailingLabel::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2725)
inline long Word::MailingLabel::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2726)
inline IDispatchPtr Word::MailingLabel::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2727)
inline VARIANT_BOOL Word::MailingLabel::GetDefaultPrintBarCode ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DefaultPrintBarCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2728)
inline void Word::MailingLabel::PutDefaultPrintBarCode ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DefaultPrintBarCode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2729)
inline enum WdPaperTray Word::MailingLabel::GetDefaultLaserTray ( ) {
    enum WdPaperTray _result;
    HRESULT _hr = get_DefaultLaserTray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2730)
inline void Word::MailingLabel::PutDefaultLaserTray ( enum WdPaperTray prop ) {
    HRESULT _hr = put_DefaultLaserTray(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2731)
inline Word::CustomLabelsPtr Word::MailingLabel::GetCustomLabels ( ) {
    struct CustomLabels * _result;
    HRESULT _hr = get_CustomLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLabelsPtr(_result, false);
}

#pragma implementation_key(2732)
inline _bstr_t Word::MailingLabel::GetDefaultLabelName ( ) {
    BSTR _result;
    HRESULT _hr = get_DefaultLabelName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2733)
inline void Word::MailingLabel::PutDefaultLabelName ( _bstr_t prop ) {
    HRESULT _hr = put_DefaultLabelName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2734)
inline Word::_DocumentPtr Word::MailingLabel::CreateNewDocument2000 ( VARIANT * Name, VARIANT * Address, VARIANT * AutoText, VARIANT * ExtractAddress, VARIANT * LaserTray ) {
    struct _Document * _result;
    HRESULT _hr = raw_CreateNewDocument2000(Name, Address, AutoText, ExtractAddress, LaserTray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(2735)
inline HRESULT Word::MailingLabel::PrintOut2000 ( VARIANT * Name, VARIANT * Address, VARIANT * ExtractAddress, VARIANT * LaserTray, VARIANT * SingleLabel, VARIANT * Row, VARIANT * Column ) {
    HRESULT _hr = raw_PrintOut2000(Name, Address, ExtractAddress, LaserTray, SingleLabel, Row, Column);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2736)
inline HRESULT Word::MailingLabel::LabelOptions ( ) {
    HRESULT _hr = raw_LabelOptions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2737)
inline Word::_DocumentPtr Word::MailingLabel::CreateNewDocument ( VARIANT * Name, VARIANT * Address, VARIANT * AutoText, VARIANT * ExtractAddress, VARIANT * LaserTray, VARIANT * PrintEPostageLabel, VARIANT * Vertical ) {
    struct _Document * _result;
    HRESULT _hr = raw_CreateNewDocument(Name, Address, AutoText, ExtractAddress, LaserTray, PrintEPostageLabel, Vertical, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(2738)
inline HRESULT Word::MailingLabel::PrintOut ( VARIANT * Name, VARIANT * Address, VARIANT * ExtractAddress, VARIANT * LaserTray, VARIANT * SingleLabel, VARIANT * Row, VARIANT * Column, VARIANT * PrintEPostageLabel, VARIANT * Vertical ) {
    HRESULT _hr = raw_PrintOut(Name, Address, ExtractAddress, LaserTray, SingleLabel, Row, Column, PrintEPostageLabel, Vertical);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2739)
inline VARIANT_BOOL Word::MailingLabel::GetVertical ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Vertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2740)
inline void Word::MailingLabel::PutVertical ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Vertical(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CustomLabels wrapper method implementations
//

#pragma implementation_key(2741)
inline Word::_ApplicationPtr Word::CustomLabels::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2742)
inline long Word::CustomLabels::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2743)
inline IDispatchPtr Word::CustomLabels::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2744)
inline IUnknownPtr Word::CustomLabels::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2745)
inline long Word::CustomLabels::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2746)
inline Word::CustomLabelPtr Word::CustomLabels::Item ( VARIANT * Index ) {
    struct CustomLabel * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLabelPtr(_result, false);
}

#pragma implementation_key(2747)
inline Word::CustomLabelPtr Word::CustomLabels::Add ( _bstr_t Name, VARIANT * DotMatrix ) {
    struct CustomLabel * _result;
    HRESULT _hr = raw_Add(Name, DotMatrix, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomLabelPtr(_result, false);
}

//
// interface CustomLabel wrapper method implementations
//

#pragma implementation_key(2748)
inline Word::_ApplicationPtr Word::CustomLabel::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2749)
inline long Word::CustomLabel::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2750)
inline IDispatchPtr Word::CustomLabel::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2751)
inline long Word::CustomLabel::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2752)
inline _bstr_t Word::CustomLabel::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2753)
inline void Word::CustomLabel::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2754)
inline float Word::CustomLabel::GetTopMargin ( ) {
    float _result;
    HRESULT _hr = get_TopMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2755)
inline void Word::CustomLabel::PutTopMargin ( float prop ) {
    HRESULT _hr = put_TopMargin(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2756)
inline float Word::CustomLabel::GetSideMargin ( ) {
    float _result;
    HRESULT _hr = get_SideMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2757)
inline void Word::CustomLabel::PutSideMargin ( float prop ) {
    HRESULT _hr = put_SideMargin(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2758)
inline float Word::CustomLabel::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2759)
inline void Word::CustomLabel::PutHeight ( float prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2760)
inline float Word::CustomLabel::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2761)
inline void Word::CustomLabel::PutWidth ( float prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2762)
inline float Word::CustomLabel::GetVerticalPitch ( ) {
    float _result;
    HRESULT _hr = get_VerticalPitch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2763)
inline void Word::CustomLabel::PutVerticalPitch ( float prop ) {
    HRESULT _hr = put_VerticalPitch(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2764)
inline float Word::CustomLabel::GetHorizontalPitch ( ) {
    float _result;
    HRESULT _hr = get_HorizontalPitch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2765)
inline void Word::CustomLabel::PutHorizontalPitch ( float prop ) {
    HRESULT _hr = put_HorizontalPitch(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2766)
inline long Word::CustomLabel::GetNumberAcross ( ) {
    long _result;
    HRESULT _hr = get_NumberAcross(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2767)
inline void Word::CustomLabel::PutNumberAcross ( long prop ) {
    HRESULT _hr = put_NumberAcross(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2768)
inline long Word::CustomLabel::GetNumberDown ( ) {
    long _result;
    HRESULT _hr = get_NumberDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2769)
inline void Word::CustomLabel::PutNumberDown ( long prop ) {
    HRESULT _hr = put_NumberDown(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2770)
inline VARIANT_BOOL Word::CustomLabel::GetDotMatrix ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DotMatrix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2771)
inline enum WdCustomLabelPageSize Word::CustomLabel::GetPageSize ( ) {
    enum WdCustomLabelPageSize _result;
    HRESULT _hr = get_PageSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2772)
inline void Word::CustomLabel::PutPageSize ( enum WdCustomLabelPageSize prop ) {
    HRESULT _hr = put_PageSize(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2773)
inline VARIANT_BOOL Word::CustomLabel::GetValid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2774)
inline HRESULT Word::CustomLabel::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TablesOfContents wrapper method implementations
//

#pragma implementation_key(2775)
inline Word::_ApplicationPtr Word::TablesOfContents::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2776)
inline long Word::TablesOfContents::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2777)
inline IDispatchPtr Word::TablesOfContents::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2778)
inline IUnknownPtr Word::TablesOfContents::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2779)
inline long Word::TablesOfContents::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2780)
inline enum WdTocFormat Word::TablesOfContents::GetFormat ( ) {
    enum WdTocFormat _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2781)
inline void Word::TablesOfContents::PutFormat ( enum WdTocFormat prop ) {
    HRESULT _hr = put_Format(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2782)
inline Word::TableOfContentsPtr Word::TablesOfContents::Item ( long Index ) {
    struct TableOfContents * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableOfContentsPtr(_result, false);
}

#pragma implementation_key(2783)
inline Word::TableOfContentsPtr Word::TablesOfContents::AddOld ( struct Range * Range, VARIANT * UseHeadingStyles, VARIANT * UpperHeadingLevel, VARIANT * LowerHeadingLevel, VARIANT * UseFields, VARIANT * TableID, VARIANT * RightAlignPageNumbers, VARIANT * IncludePageNumbers, VARIANT * AddedStyles ) {
    struct TableOfContents * _result;
    HRESULT _hr = raw_AddOld(Range, UseHeadingStyles, UpperHeadingLevel, LowerHeadingLevel, UseFields, TableID, RightAlignPageNumbers, IncludePageNumbers, AddedStyles, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableOfContentsPtr(_result, false);
}

#pragma implementation_key(2784)
inline Word::FieldPtr Word::TablesOfContents::MarkEntry ( struct Range * Range, VARIANT * Entry, VARIANT * EntryAutoText, VARIANT * TableID, VARIANT * Level ) {
    struct Field * _result;
    HRESULT _hr = raw_MarkEntry(Range, Entry, EntryAutoText, TableID, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldPtr(_result, false);
}

#pragma implementation_key(2785)
inline Word::TableOfContentsPtr Word::TablesOfContents::Add2000 ( struct Range * Range, VARIANT * UseHeadingStyles, VARIANT * UpperHeadingLevel, VARIANT * LowerHeadingLevel, VARIANT * UseFields, VARIANT * TableID, VARIANT * RightAlignPageNumbers, VARIANT * IncludePageNumbers, VARIANT * AddedStyles, VARIANT * UseHyperlinks, VARIANT * HidePageNumbersInWeb ) {
    struct TableOfContents * _result;
    HRESULT _hr = raw_Add2000(Range, UseHeadingStyles, UpperHeadingLevel, LowerHeadingLevel, UseFields, TableID, RightAlignPageNumbers, IncludePageNumbers, AddedStyles, UseHyperlinks, HidePageNumbersInWeb, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableOfContentsPtr(_result, false);
}

#pragma implementation_key(2786)
inline Word::TableOfContentsPtr Word::TablesOfContents::Add ( struct Range * Range, VARIANT * UseHeadingStyles, VARIANT * UpperHeadingLevel, VARIANT * LowerHeadingLevel, VARIANT * UseFields, VARIANT * TableID, VARIANT * RightAlignPageNumbers, VARIANT * IncludePageNumbers, VARIANT * AddedStyles, VARIANT * UseHyperlinks, VARIANT * HidePageNumbersInWeb, VARIANT * UseOutlineLevels ) {
    struct TableOfContents * _result;
    HRESULT _hr = raw_Add(Range, UseHeadingStyles, UpperHeadingLevel, LowerHeadingLevel, UseFields, TableID, RightAlignPageNumbers, IncludePageNumbers, AddedStyles, UseHyperlinks, HidePageNumbersInWeb, UseOutlineLevels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableOfContentsPtr(_result, false);
}

//
// interface TableOfContents wrapper method implementations
//

#pragma implementation_key(2787)
inline Word::_ApplicationPtr Word::TableOfContents::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2788)
inline long Word::TableOfContents::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2789)
inline IDispatchPtr Word::TableOfContents::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2790)
inline VARIANT_BOOL Word::TableOfContents::GetUseHeadingStyles ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseHeadingStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2791)
inline void Word::TableOfContents::PutUseHeadingStyles ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseHeadingStyles(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2792)
inline VARIANT_BOOL Word::TableOfContents::GetUseFields ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2793)
inline void Word::TableOfContents::PutUseFields ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseFields(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2794)
inline long Word::TableOfContents::GetUpperHeadingLevel ( ) {
    long _result;
    HRESULT _hr = get_UpperHeadingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2795)
inline void Word::TableOfContents::PutUpperHeadingLevel ( long prop ) {
    HRESULT _hr = put_UpperHeadingLevel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2796)
inline long Word::TableOfContents::GetLowerHeadingLevel ( ) {
    long _result;
    HRESULT _hr = get_LowerHeadingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2797)
inline void Word::TableOfContents::PutLowerHeadingLevel ( long prop ) {
    HRESULT _hr = put_LowerHeadingLevel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2798)
inline _bstr_t Word::TableOfContents::GetTableID ( ) {
    BSTR _result;
    HRESULT _hr = get_TableID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2799)
inline void Word::TableOfContents::PutTableID ( _bstr_t prop ) {
    HRESULT _hr = put_TableID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2800)
inline Word::HeadingStylesPtr Word::TableOfContents::GetHeadingStyles ( ) {
    struct HeadingStyles * _result;
    HRESULT _hr = get_HeadingStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadingStylesPtr(_result, false);
}

#pragma implementation_key(2801)
inline VARIANT_BOOL Word::TableOfContents::GetRightAlignPageNumbers ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RightAlignPageNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2802)
inline void Word::TableOfContents::PutRightAlignPageNumbers ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_RightAlignPageNumbers(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2803)
inline VARIANT_BOOL Word::TableOfContents::GetIncludePageNumbers ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludePageNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2804)
inline void Word::TableOfContents::PutIncludePageNumbers ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IncludePageNumbers(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2805)
inline Word::RangePtr Word::TableOfContents::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2806)
inline enum WdTabLeader Word::TableOfContents::GetTabLeader ( ) {
    enum WdTabLeader _result;
    HRESULT _hr = get_TabLeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2807)
inline void Word::TableOfContents::PutTabLeader ( enum WdTabLeader prop ) {
    HRESULT _hr = put_TabLeader(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2808)
inline HRESULT Word::TableOfContents::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2809)
inline HRESULT Word::TableOfContents::UpdatePageNumbers ( ) {
    HRESULT _hr = raw_UpdatePageNumbers();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2810)
inline HRESULT Word::TableOfContents::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2811)
inline VARIANT_BOOL Word::TableOfContents::GetUseHyperlinks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseHyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2812)
inline void Word::TableOfContents::PutUseHyperlinks ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseHyperlinks(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2813)
inline VARIANT_BOOL Word::TableOfContents::GetHidePageNumbersInWeb ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HidePageNumbersInWeb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2814)
inline void Word::TableOfContents::PutHidePageNumbersInWeb ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_HidePageNumbersInWeb(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TablesOfAuthorities wrapper method implementations
//

#pragma implementation_key(2815)
inline Word::_ApplicationPtr Word::TablesOfAuthorities::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2816)
inline long Word::TablesOfAuthorities::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2817)
inline IDispatchPtr Word::TablesOfAuthorities::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2818)
inline IUnknownPtr Word::TablesOfAuthorities::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2819)
inline long Word::TablesOfAuthorities::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2820)
inline enum WdToaFormat Word::TablesOfAuthorities::GetFormat ( ) {
    enum WdToaFormat _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2821)
inline void Word::TablesOfAuthorities::PutFormat ( enum WdToaFormat prop ) {
    HRESULT _hr = put_Format(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2822)
inline Word::TableOfAuthoritiesPtr Word::TablesOfAuthorities::Item ( long Index ) {
    struct TableOfAuthorities * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableOfAuthoritiesPtr(_result, false);
}

#pragma implementation_key(2823)
inline Word::TableOfAuthoritiesPtr Word::TablesOfAuthorities::Add ( struct Range * Range, VARIANT * Category, VARIANT * Bookmark, VARIANT * Passim, VARIANT * KeepEntryFormatting, VARIANT * Separator, VARIANT * IncludeSequenceName, VARIANT * EntrySeparator, VARIANT * PageRangeSeparator, VARIANT * IncludeCategoryHeader, VARIANT * PageNumberSeparator ) {
    struct TableOfAuthorities * _result;
    HRESULT _hr = raw_Add(Range, Category, Bookmark, Passim, KeepEntryFormatting, Separator, IncludeSequenceName, EntrySeparator, PageRangeSeparator, IncludeCategoryHeader, PageNumberSeparator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableOfAuthoritiesPtr(_result, false);
}

#pragma implementation_key(2824)
inline HRESULT Word::TablesOfAuthorities::NextCitation ( _bstr_t ShortCitation ) {
    HRESULT _hr = raw_NextCitation(ShortCitation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2825)
inline Word::FieldPtr Word::TablesOfAuthorities::MarkCitation ( struct Range * Range, _bstr_t ShortCitation, VARIANT * LongCitation, VARIANT * LongCitationAutoText, VARIANT * Category ) {
    struct Field * _result;
    HRESULT _hr = raw_MarkCitation(Range, ShortCitation, LongCitation, LongCitationAutoText, Category, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldPtr(_result, false);
}

#pragma implementation_key(2826)
inline HRESULT Word::TablesOfAuthorities::MarkAllCitations ( _bstr_t ShortCitation, VARIANT * LongCitation, VARIANT * LongCitationAutoText, VARIANT * Category ) {
    HRESULT _hr = raw_MarkAllCitations(ShortCitation, LongCitation, LongCitationAutoText, Category);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TableOfAuthorities wrapper method implementations
//

#pragma implementation_key(2827)
inline Word::_ApplicationPtr Word::TableOfAuthorities::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2828)
inline long Word::TableOfAuthorities::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2829)
inline IDispatchPtr Word::TableOfAuthorities::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2830)
inline VARIANT_BOOL Word::TableOfAuthorities::GetPassim ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Passim(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2831)
inline void Word::TableOfAuthorities::PutPassim ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Passim(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2832)
inline VARIANT_BOOL Word::TableOfAuthorities::GetKeepEntryFormatting ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepEntryFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2833)
inline void Word::TableOfAuthorities::PutKeepEntryFormatting ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_KeepEntryFormatting(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2834)
inline long Word::TableOfAuthorities::GetCategory ( ) {
    long _result;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2835)
inline void Word::TableOfAuthorities::PutCategory ( long prop ) {
    HRESULT _hr = put_Category(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2836)
inline _bstr_t Word::TableOfAuthorities::GetBookmark ( ) {
    BSTR _result;
    HRESULT _hr = get_Bookmark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2837)
inline void Word::TableOfAuthorities::PutBookmark ( _bstr_t prop ) {
    HRESULT _hr = put_Bookmark(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2838)
inline _bstr_t Word::TableOfAuthorities::GetSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2839)
inline void Word::TableOfAuthorities::PutSeparator ( _bstr_t prop ) {
    HRESULT _hr = put_Separator(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2840)
inline _bstr_t Word::TableOfAuthorities::GetIncludeSequenceName ( ) {
    BSTR _result;
    HRESULT _hr = get_IncludeSequenceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2841)
inline void Word::TableOfAuthorities::PutIncludeSequenceName ( _bstr_t prop ) {
    HRESULT _hr = put_IncludeSequenceName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2842)
inline _bstr_t Word::TableOfAuthorities::GetEntrySeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_EntrySeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2843)
inline void Word::TableOfAuthorities::PutEntrySeparator ( _bstr_t prop ) {
    HRESULT _hr = put_EntrySeparator(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2844)
inline _bstr_t Word::TableOfAuthorities::GetPageRangeSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_PageRangeSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2845)
inline void Word::TableOfAuthorities::PutPageRangeSeparator ( _bstr_t prop ) {
    HRESULT _hr = put_PageRangeSeparator(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2846)
inline VARIANT_BOOL Word::TableOfAuthorities::GetIncludeCategoryHeader ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludeCategoryHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2847)
inline void Word::TableOfAuthorities::PutIncludeCategoryHeader ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IncludeCategoryHeader(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2848)
inline _bstr_t Word::TableOfAuthorities::GetPageNumberSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_PageNumberSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2849)
inline void Word::TableOfAuthorities::PutPageNumberSeparator ( _bstr_t prop ) {
    HRESULT _hr = put_PageNumberSeparator(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2850)
inline Word::RangePtr Word::TableOfAuthorities::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2851)
inline enum WdTabLeader Word::TableOfAuthorities::GetTabLeader ( ) {
    enum WdTabLeader _result;
    HRESULT _hr = get_TabLeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2852)
inline void Word::TableOfAuthorities::PutTabLeader ( enum WdTabLeader prop ) {
    HRESULT _hr = put_TabLeader(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2853)
inline HRESULT Word::TableOfAuthorities::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2854)
inline HRESULT Word::TableOfAuthorities::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Dialogs wrapper method implementations
//

#pragma implementation_key(2855)
inline Word::_ApplicationPtr Word::Dialogs::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2856)
inline long Word::Dialogs::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2857)
inline IDispatchPtr Word::Dialogs::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2858)
inline IUnknownPtr Word::Dialogs::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2859)
inline long Word::Dialogs::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2860)
inline Word::DialogPtr Word::Dialogs::Item ( enum WdWordDialog Index ) {
    struct Dialog * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DialogPtr(_result, false);
}

//
// interface Dialog wrapper method implementations
//

#pragma implementation_key(2861)
inline Word::_ApplicationPtr Word::Dialog::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2862)
inline long Word::Dialog::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2863)
inline IDispatchPtr Word::Dialog::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2864)
inline enum WdWordDialogTab Word::Dialog::GetDefaultTab ( ) {
    enum WdWordDialogTab _result;
    HRESULT _hr = get_DefaultTab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2865)
inline void Word::Dialog::PutDefaultTab ( enum WdWordDialogTab prop ) {
    HRESULT _hr = put_DefaultTab(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2866)
inline enum WdWordDialog Word::Dialog::GetType ( ) {
    enum WdWordDialog _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2867)
inline long Word::Dialog::Show ( VARIANT * TimeOut ) {
    long _result;
    HRESULT _hr = raw_Show(TimeOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2868)
inline long Word::Dialog::Display ( VARIANT * TimeOut ) {
    long _result;
    HRESULT _hr = raw_Display(TimeOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2869)
inline HRESULT Word::Dialog::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2870)
inline HRESULT Word::Dialog::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2871)
inline _bstr_t Word::Dialog::GetCommandName ( ) {
    BSTR _result;
    HRESULT _hr = get_CommandName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface PageSetup wrapper method implementations
//

#pragma implementation_key(2872)
inline Word::_ApplicationPtr Word::PageSetup::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2873)
inline long Word::PageSetup::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2874)
inline IDispatchPtr Word::PageSetup::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2875)
inline float Word::PageSetup::GetTopMargin ( ) {
    float _result;
    HRESULT _hr = get_TopMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2876)
inline void Word::PageSetup::PutTopMargin ( float prop ) {
    HRESULT _hr = put_TopMargin(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2877)
inline float Word::PageSetup::GetBottomMargin ( ) {
    float _result;
    HRESULT _hr = get_BottomMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2878)
inline void Word::PageSetup::PutBottomMargin ( float prop ) {
    HRESULT _hr = put_BottomMargin(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2879)
inline float Word::PageSetup::GetLeftMargin ( ) {
    float _result;
    HRESULT _hr = get_LeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2880)
inline void Word::PageSetup::PutLeftMargin ( float prop ) {
    HRESULT _hr = put_LeftMargin(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2881)
inline float Word::PageSetup::GetRightMargin ( ) {
    float _result;
    HRESULT _hr = get_RightMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2882)
inline void Word::PageSetup::PutRightMargin ( float prop ) {
    HRESULT _hr = put_RightMargin(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2883)
inline float Word::PageSetup::GetGutter ( ) {
    float _result;
    HRESULT _hr = get_Gutter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2884)
inline void Word::PageSetup::PutGutter ( float prop ) {
    HRESULT _hr = put_Gutter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2885)
inline float Word::PageSetup::GetPageWidth ( ) {
    float _result;
    HRESULT _hr = get_PageWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2886)
inline void Word::PageSetup::PutPageWidth ( float prop ) {
    HRESULT _hr = put_PageWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2887)
inline float Word::PageSetup::GetPageHeight ( ) {
    float _result;
    HRESULT _hr = get_PageHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2888)
inline void Word::PageSetup::PutPageHeight ( float prop ) {
    HRESULT _hr = put_PageHeight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2889)
inline enum WdOrientation Word::PageSetup::GetOrientation ( ) {
    enum WdOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2890)
inline void Word::PageSetup::PutOrientation ( enum WdOrientation prop ) {
    HRESULT _hr = put_Orientation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2891)
inline enum WdPaperTray Word::PageSetup::GetFirstPageTray ( ) {
    enum WdPaperTray _result;
    HRESULT _hr = get_FirstPageTray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2892)
inline void Word::PageSetup::PutFirstPageTray ( enum WdPaperTray prop ) {
    HRESULT _hr = put_FirstPageTray(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2893)
inline enum WdPaperTray Word::PageSetup::GetOtherPagesTray ( ) {
    enum WdPaperTray _result;
    HRESULT _hr = get_OtherPagesTray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2894)
inline void Word::PageSetup::PutOtherPagesTray ( enum WdPaperTray prop ) {
    HRESULT _hr = put_OtherPagesTray(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2895)
inline enum WdVerticalAlignment Word::PageSetup::GetVerticalAlignment ( ) {
    enum WdVerticalAlignment _result;
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2896)
inline void Word::PageSetup::PutVerticalAlignment ( enum WdVerticalAlignment prop ) {
    HRESULT _hr = put_VerticalAlignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2897)
inline long Word::PageSetup::GetMirrorMargins ( ) {
    long _result;
    HRESULT _hr = get_MirrorMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2898)
inline void Word::PageSetup::PutMirrorMargins ( long prop ) {
    HRESULT _hr = put_MirrorMargins(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2899)
inline float Word::PageSetup::GetHeaderDistance ( ) {
    float _result;
    HRESULT _hr = get_HeaderDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2900)
inline void Word::PageSetup::PutHeaderDistance ( float prop ) {
    HRESULT _hr = put_HeaderDistance(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2901)
inline float Word::PageSetup::GetFooterDistance ( ) {
    float _result;
    HRESULT _hr = get_FooterDistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2902)
inline void Word::PageSetup::PutFooterDistance ( float prop ) {
    HRESULT _hr = put_FooterDistance(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2903)
inline enum WdSectionStart Word::PageSetup::GetSectionStart ( ) {
    enum WdSectionStart _result;
    HRESULT _hr = get_SectionStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2904)
inline void Word::PageSetup::PutSectionStart ( enum WdSectionStart prop ) {
    HRESULT _hr = put_SectionStart(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2905)
inline long Word::PageSetup::GetOddAndEvenPagesHeaderFooter ( ) {
    long _result;
    HRESULT _hr = get_OddAndEvenPagesHeaderFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2906)
inline void Word::PageSetup::PutOddAndEvenPagesHeaderFooter ( long prop ) {
    HRESULT _hr = put_OddAndEvenPagesHeaderFooter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2907)
inline long Word::PageSetup::GetDifferentFirstPageHeaderFooter ( ) {
    long _result;
    HRESULT _hr = get_DifferentFirstPageHeaderFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2908)
inline void Word::PageSetup::PutDifferentFirstPageHeaderFooter ( long prop ) {
    HRESULT _hr = put_DifferentFirstPageHeaderFooter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2909)
inline long Word::PageSetup::GetSuppressEndnotes ( ) {
    long _result;
    HRESULT _hr = get_SuppressEndnotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2910)
inline void Word::PageSetup::PutSuppressEndnotes ( long prop ) {
    HRESULT _hr = put_SuppressEndnotes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2911)
inline Word::LineNumberingPtr Word::PageSetup::GetLineNumbering ( ) {
    struct LineNumbering * _result;
    HRESULT _hr = get_LineNumbering(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineNumberingPtr(_result, false);
}

#pragma implementation_key(2912)
inline void Word::PageSetup::PutLineNumbering ( struct LineNumbering * prop ) {
    HRESULT _hr = put_LineNumbering(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2913)
inline Word::TextColumnsPtr Word::PageSetup::GetTextColumns ( ) {
    struct TextColumns * _result;
    HRESULT _hr = get_TextColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextColumnsPtr(_result, false);
}

#pragma implementation_key(2914)
inline void Word::PageSetup::PutTextColumns ( struct TextColumns * prop ) {
    HRESULT _hr = put_TextColumns(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2915)
inline enum WdPaperSize Word::PageSetup::GetPaperSize ( ) {
    enum WdPaperSize _result;
    HRESULT _hr = get_PaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2916)
inline void Word::PageSetup::PutPaperSize ( enum WdPaperSize prop ) {
    HRESULT _hr = put_PaperSize(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2917)
inline VARIANT_BOOL Word::PageSetup::GetTwoPagesOnOne ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TwoPagesOnOne(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2918)
inline void Word::PageSetup::PutTwoPagesOnOne ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_TwoPagesOnOne(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2919)
inline VARIANT_BOOL Word::PageSetup::GetGutterOnTop ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_GutterOnTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2920)
inline void Word::PageSetup::PutGutterOnTop ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_GutterOnTop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2921)
inline float Word::PageSetup::GetCharsLine ( ) {
    float _result;
    HRESULT _hr = get_CharsLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2922)
inline void Word::PageSetup::PutCharsLine ( float prop ) {
    HRESULT _hr = put_CharsLine(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2923)
inline float Word::PageSetup::GetLinesPage ( ) {
    float _result;
    HRESULT _hr = get_LinesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2924)
inline void Word::PageSetup::PutLinesPage ( float prop ) {
    HRESULT _hr = put_LinesPage(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2925)
inline VARIANT_BOOL Word::PageSetup::GetShowGrid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2926)
inline void Word::PageSetup::PutShowGrid ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowGrid(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2927)
inline HRESULT Word::PageSetup::TogglePortrait ( ) {
    HRESULT _hr = raw_TogglePortrait();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2928)
inline HRESULT Word::PageSetup::SetAsTemplateDefault ( ) {
    HRESULT _hr = raw_SetAsTemplateDefault();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2929)
inline enum WdGutterStyleOld Word::PageSetup::GetGutterStyle ( ) {
    enum WdGutterStyleOld _result;
    HRESULT _hr = get_GutterStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2930)
inline void Word::PageSetup::PutGutterStyle ( enum WdGutterStyleOld prop ) {
    HRESULT _hr = put_GutterStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2931)
inline enum WdSectionDirection Word::PageSetup::GetSectionDirection ( ) {
    enum WdSectionDirection _result;
    HRESULT _hr = get_SectionDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2932)
inline void Word::PageSetup::PutSectionDirection ( enum WdSectionDirection prop ) {
    HRESULT _hr = put_SectionDirection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2933)
inline enum WdLayoutMode Word::PageSetup::GetLayoutMode ( ) {
    enum WdLayoutMode _result;
    HRESULT _hr = get_LayoutMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2934)
inline void Word::PageSetup::PutLayoutMode ( enum WdLayoutMode prop ) {
    HRESULT _hr = put_LayoutMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2935)
inline enum WdGutterStyle Word::PageSetup::GetGutterPos ( ) {
    enum WdGutterStyle _result;
    HRESULT _hr = get_GutterPos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2936)
inline void Word::PageSetup::PutGutterPos ( enum WdGutterStyle prop ) {
    HRESULT _hr = put_GutterPos(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2937)
inline VARIANT_BOOL Word::PageSetup::GetBookFoldPrinting ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BookFoldPrinting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2938)
inline void Word::PageSetup::PutBookFoldPrinting ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_BookFoldPrinting(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2939)
inline VARIANT_BOOL Word::PageSetup::GetBookFoldRevPrinting ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BookFoldRevPrinting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2940)
inline void Word::PageSetup::PutBookFoldRevPrinting ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_BookFoldRevPrinting(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2941)
inline long Word::PageSetup::GetBookFoldPrintingSheets ( ) {
    long _result;
    HRESULT _hr = get_BookFoldPrintingSheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2942)
inline void Word::PageSetup::PutBookFoldPrintingSheets ( long prop ) {
    HRESULT _hr = put_BookFoldPrintingSheets(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LineNumbering wrapper method implementations
//

#pragma implementation_key(2943)
inline Word::_ApplicationPtr Word::LineNumbering::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2944)
inline long Word::LineNumbering::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2945)
inline IDispatchPtr Word::LineNumbering::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2946)
inline enum WdNumberingRule Word::LineNumbering::GetRestartMode ( ) {
    enum WdNumberingRule _result;
    HRESULT _hr = get_RestartMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2947)
inline void Word::LineNumbering::PutRestartMode ( enum WdNumberingRule prop ) {
    HRESULT _hr = put_RestartMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2948)
inline long Word::LineNumbering::GetStartingNumber ( ) {
    long _result;
    HRESULT _hr = get_StartingNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2949)
inline void Word::LineNumbering::PutStartingNumber ( long prop ) {
    HRESULT _hr = put_StartingNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2950)
inline float Word::LineNumbering::GetDistanceFromText ( ) {
    float _result;
    HRESULT _hr = get_DistanceFromText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2951)
inline void Word::LineNumbering::PutDistanceFromText ( float prop ) {
    HRESULT _hr = put_DistanceFromText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2952)
inline long Word::LineNumbering::GetCountBy ( ) {
    long _result;
    HRESULT _hr = get_CountBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2953)
inline void Word::LineNumbering::PutCountBy ( long prop ) {
    HRESULT _hr = put_CountBy(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2954)
inline long Word::LineNumbering::GetActive ( ) {
    long _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2955)
inline void Word::LineNumbering::PutActive ( long prop ) {
    HRESULT _hr = put_Active(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextColumns wrapper method implementations
//

#pragma implementation_key(2956)
inline IUnknownPtr Word::TextColumns::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2957)
inline long Word::TextColumns::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2958)
inline Word::_ApplicationPtr Word::TextColumns::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2959)
inline long Word::TextColumns::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2960)
inline IDispatchPtr Word::TextColumns::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2961)
inline long Word::TextColumns::GetEvenlySpaced ( ) {
    long _result;
    HRESULT _hr = get_EvenlySpaced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2962)
inline void Word::TextColumns::PutEvenlySpaced ( long prop ) {
    HRESULT _hr = put_EvenlySpaced(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2963)
inline long Word::TextColumns::GetLineBetween ( ) {
    long _result;
    HRESULT _hr = get_LineBetween(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2964)
inline void Word::TextColumns::PutLineBetween ( long prop ) {
    HRESULT _hr = put_LineBetween(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2965)
inline float Word::TextColumns::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2966)
inline void Word::TextColumns::PutWidth ( float prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2967)
inline float Word::TextColumns::GetSpacing ( ) {
    float _result;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2968)
inline void Word::TextColumns::PutSpacing ( float prop ) {
    HRESULT _hr = put_Spacing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2969)
inline Word::TextColumnPtr Word::TextColumns::Item ( long Index ) {
    struct TextColumn * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextColumnPtr(_result, false);
}

#pragma implementation_key(2970)
inline Word::TextColumnPtr Word::TextColumns::Add ( VARIANT * Width, VARIANT * Spacing, VARIANT * EvenlySpaced ) {
    struct TextColumn * _result;
    HRESULT _hr = raw_Add(Width, Spacing, EvenlySpaced, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextColumnPtr(_result, false);
}

#pragma implementation_key(2971)
inline HRESULT Word::TextColumns::SetCount ( long NumColumns ) {
    HRESULT _hr = raw_SetCount(NumColumns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2972)
inline enum WdFlowDirection Word::TextColumns::GetFlowDirection ( ) {
    enum WdFlowDirection _result;
    HRESULT _hr = get_FlowDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2973)
inline void Word::TextColumns::PutFlowDirection ( enum WdFlowDirection prop ) {
    HRESULT _hr = put_FlowDirection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextColumn wrapper method implementations
//

#pragma implementation_key(2974)
inline Word::_ApplicationPtr Word::TextColumn::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2975)
inline long Word::TextColumn::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2976)
inline IDispatchPtr Word::TextColumn::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2977)
inline float Word::TextColumn::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2978)
inline void Word::TextColumn::PutWidth ( float prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2979)
inline float Word::TextColumn::GetSpaceAfter ( ) {
    float _result;
    HRESULT _hr = get_SpaceAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2980)
inline void Word::TextColumn::PutSpaceAfter ( float prop ) {
    HRESULT _hr = put_SpaceAfter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Selection wrapper method implementations
//

#pragma implementation_key(2981)
inline _bstr_t Word::Selection::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2982)
inline void Word::Selection::PutText ( _bstr_t prop ) {
    HRESULT _hr = put_Text(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2983)
inline Word::RangePtr Word::Selection::GetFormattedText ( ) {
    struct Range * _result;
    HRESULT _hr = get_FormattedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(2984)
inline void Word::Selection::PutFormattedText ( struct Range * prop ) {
    HRESULT _hr = put_FormattedText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2985)
inline long Word::Selection::GetStart ( ) {
    long _result;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2986)
inline void Word::Selection::PutStart ( long prop ) {
    HRESULT _hr = put_Start(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2987)
inline long Word::Selection::GetEnd ( ) {
    long _result;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2988)
inline void Word::Selection::PutEnd ( long prop ) {
    HRESULT _hr = put_End(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2989)
inline Word::_FontPtr Word::Selection::GetFont ( ) {
    struct _Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FontPtr(_result, false);
}

#pragma implementation_key(2990)
inline void Word::Selection::PutFont ( struct _Font * prop ) {
    HRESULT _hr = put_Font(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2991)
inline enum WdSelectionType Word::Selection::GetType ( ) {
    enum WdSelectionType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2992)
inline enum WdStoryType Word::Selection::GetStoryType ( ) {
    enum WdStoryType _result;
    HRESULT _hr = get_StoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2993)
inline _variant_t Word::Selection::GetStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2994)
inline void Word::Selection::PutStyle ( VARIANT * prop ) {
    HRESULT _hr = put_Style(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2995)
inline Word::TablesPtr Word::Selection::GetTables ( ) {
    struct Tables * _result;
    HRESULT _hr = get_Tables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablesPtr(_result, false);
}

#pragma implementation_key(2996)
inline Word::WordsPtr Word::Selection::GetWords ( ) {
    struct Words * _result;
    HRESULT _hr = get_Words(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WordsPtr(_result, false);
}

#pragma implementation_key(2997)
inline Word::SentencesPtr Word::Selection::GetSentences ( ) {
    struct Sentences * _result;
    HRESULT _hr = get_Sentences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SentencesPtr(_result, false);
}

#pragma implementation_key(2998)
inline Word::CharactersPtr Word::Selection::GetCharacters ( ) {
    struct Characters * _result;
    HRESULT _hr = get_Characters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CharactersPtr(_result, false);
}

#pragma implementation_key(2999)
inline Word::FootnotesPtr Word::Selection::GetFootnotes ( ) {
    struct Footnotes * _result;
    HRESULT _hr = get_Footnotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FootnotesPtr(_result, false);
}

#pragma implementation_key(3000)
inline Word::EndnotesPtr Word::Selection::GetEndnotes ( ) {
    struct Endnotes * _result;
    HRESULT _hr = get_Endnotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EndnotesPtr(_result, false);
}

#pragma implementation_key(3001)
inline Word::CommentsPtr Word::Selection::GetComments ( ) {
    struct Comments * _result;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommentsPtr(_result, false);
}

#pragma implementation_key(3002)
inline Word::CellsPtr Word::Selection::GetCells ( ) {
    struct Cells * _result;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellsPtr(_result, false);
}

#pragma implementation_key(3003)
inline Word::SectionsPtr Word::Selection::GetSections ( ) {
    struct Sections * _result;
    HRESULT _hr = get_Sections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SectionsPtr(_result, false);
}

#pragma implementation_key(3004)
inline Word::ParagraphsPtr Word::Selection::GetParagraphs ( ) {
    struct Paragraphs * _result;
    HRESULT _hr = get_Paragraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphsPtr(_result, false);
}

#pragma implementation_key(3005)
inline Word::BordersPtr Word::Selection::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(3006)
inline void Word::Selection::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3007)
inline Word::ShadingPtr Word::Selection::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(3008)
inline Word::FieldsPtr Word::Selection::GetFields ( ) {
    struct Fields * _result;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldsPtr(_result, false);
}

#pragma implementation_key(3009)
inline Word::FormFieldsPtr Word::Selection::GetFormFields ( ) {
    struct FormFields * _result;
    HRESULT _hr = get_FormFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormFieldsPtr(_result, false);
}

#pragma implementation_key(3010)
inline Word::FramesPtr Word::Selection::GetFrames ( ) {
    struct Frames * _result;
    HRESULT _hr = get_Frames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramesPtr(_result, false);
}

#pragma implementation_key(3011)
inline Word::_ParagraphFormatPtr Word::Selection::GetParagraphFormat ( ) {
    struct _ParagraphFormat * _result;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(3012)
inline void Word::Selection::PutParagraphFormat ( struct _ParagraphFormat * prop ) {
    HRESULT _hr = put_ParagraphFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3013)
inline Word::PageSetupPtr Word::Selection::GetPageSetup ( ) {
    struct PageSetup * _result;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(3014)
inline void Word::Selection::PutPageSetup ( struct PageSetup * prop ) {
    HRESULT _hr = put_PageSetup(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3015)
inline Word::BookmarksPtr Word::Selection::GetBookmarks ( ) {
    struct Bookmarks * _result;
    HRESULT _hr = get_Bookmarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BookmarksPtr(_result, false);
}

#pragma implementation_key(3016)
inline long Word::Selection::GetStoryLength ( ) {
    long _result;
    HRESULT _hr = get_StoryLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3017)
inline enum WdLanguageID Word::Selection::GetLanguageID ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3018)
inline void Word::Selection::PutLanguageID ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3019)
inline enum WdLanguageID Word::Selection::GetLanguageIDFarEast ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageIDFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3020)
inline void Word::Selection::PutLanguageIDFarEast ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageIDFarEast(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3021)
inline enum WdLanguageID Word::Selection::GetLanguageIDOther ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageIDOther(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3022)
inline void Word::Selection::PutLanguageIDOther ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageIDOther(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3023)
inline Word::HyperlinksPtr Word::Selection::GetHyperlinks ( ) {
    struct Hyperlinks * _result;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(3024)
inline Word::ColumnsPtr Word::Selection::GetColumns ( ) {
    struct Columns * _result;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnsPtr(_result, false);
}

#pragma implementation_key(3025)
inline Word::RowsPtr Word::Selection::GetRows ( ) {
    struct Rows * _result;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowsPtr(_result, false);
}

#pragma implementation_key(3026)
inline Word::HeaderFooterPtr Word::Selection::GetHeaderFooter ( ) {
    struct HeaderFooter * _result;
    HRESULT _hr = get_HeaderFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(3027)
inline VARIANT_BOOL Word::Selection::GetIsEndOfRowMark ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsEndOfRowMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3028)
inline long Word::Selection::GetBookmarkID ( ) {
    long _result;
    HRESULT _hr = get_BookmarkID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3029)
inline long Word::Selection::GetPreviousBookmarkID ( ) {
    long _result;
    HRESULT _hr = get_PreviousBookmarkID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3030)
inline Word::FindPtr Word::Selection::GetFind ( ) {
    struct Find * _result;
    HRESULT _hr = get_Find(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FindPtr(_result, false);
}

#pragma implementation_key(3031)
inline Word::RangePtr Word::Selection::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3032)
inline _variant_t Word::Selection::GetInformation ( enum WdInformation Type ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Information(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3033)
inline enum WdSelectionFlags Word::Selection::GetFlags ( ) {
    enum WdSelectionFlags _result;
    HRESULT _hr = get_Flags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3034)
inline void Word::Selection::PutFlags ( enum WdSelectionFlags prop ) {
    HRESULT _hr = put_Flags(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3035)
inline VARIANT_BOOL Word::Selection::GetActive ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3036)
inline VARIANT_BOOL Word::Selection::GetStartIsActive ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_StartIsActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3037)
inline void Word::Selection::PutStartIsActive ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_StartIsActive(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3038)
inline VARIANT_BOOL Word::Selection::GetIPAtEndOfLine ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IPAtEndOfLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3039)
inline VARIANT_BOOL Word::Selection::GetExtendMode ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExtendMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3040)
inline void Word::Selection::PutExtendMode ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ExtendMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3041)
inline VARIANT_BOOL Word::Selection::GetColumnSelectMode ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ColumnSelectMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3042)
inline void Word::Selection::PutColumnSelectMode ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ColumnSelectMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3043)
inline enum WdTextOrientation Word::Selection::GetOrientation ( ) {
    enum WdTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3044)
inline void Word::Selection::PutOrientation ( enum WdTextOrientation prop ) {
    HRESULT _hr = put_Orientation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3045)
inline Word::InlineShapesPtr Word::Selection::GetInlineShapes ( ) {
    struct InlineShapes * _result;
    HRESULT _hr = get_InlineShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapesPtr(_result, false);
}

#pragma implementation_key(3046)
inline Word::_ApplicationPtr Word::Selection::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3047)
inline long Word::Selection::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3048)
inline IDispatchPtr Word::Selection::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3049)
inline Word::_DocumentPtr Word::Selection::GetDocument ( ) {
    struct _Document * _result;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

#pragma implementation_key(3050)
inline Word::ShapeRangePtr Word::Selection::GetShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3051)
inline HRESULT Word::Selection::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3052)
inline HRESULT Word::Selection::SetRange ( long Start, long End ) {
    HRESULT _hr = raw_SetRange(Start, End);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3053)
inline HRESULT Word::Selection::Collapse ( VARIANT * Direction ) {
    HRESULT _hr = raw_Collapse(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3054)
inline HRESULT Word::Selection::InsertBefore ( _bstr_t Text ) {
    HRESULT _hr = raw_InsertBefore(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3055)
inline HRESULT Word::Selection::InsertAfter ( _bstr_t Text ) {
    HRESULT _hr = raw_InsertAfter(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3056)
inline Word::RangePtr Word::Selection::Next ( VARIANT * Unit, VARIANT * Count ) {
    struct Range * _result;
    HRESULT _hr = raw_Next(Unit, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3057)
inline Word::RangePtr Word::Selection::Previous ( VARIANT * Unit, VARIANT * Count ) {
    struct Range * _result;
    HRESULT _hr = raw_Previous(Unit, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3058)
inline long Word::Selection::StartOf ( VARIANT * Unit, VARIANT * Extend ) {
    long _result;
    HRESULT _hr = raw_StartOf(Unit, Extend, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3059)
inline long Word::Selection::EndOf ( VARIANT * Unit, VARIANT * Extend ) {
    long _result;
    HRESULT _hr = raw_EndOf(Unit, Extend, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3060)
inline long Word::Selection::Move ( VARIANT * Unit, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_Move(Unit, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3061)
inline long Word::Selection::MoveStart ( VARIANT * Unit, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveStart(Unit, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3062)
inline long Word::Selection::MoveEnd ( VARIANT * Unit, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveEnd(Unit, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3063)
inline long Word::Selection::MoveWhile ( VARIANT * Cset, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveWhile(Cset, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3064)
inline long Word::Selection::MoveStartWhile ( VARIANT * Cset, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveStartWhile(Cset, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3065)
inline long Word::Selection::MoveEndWhile ( VARIANT * Cset, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveEndWhile(Cset, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3066)
inline long Word::Selection::MoveUntil ( VARIANT * Cset, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveUntil(Cset, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3067)
inline long Word::Selection::MoveStartUntil ( VARIANT * Cset, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveStartUntil(Cset, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3068)
inline long Word::Selection::MoveEndUntil ( VARIANT * Cset, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_MoveEndUntil(Cset, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3069)
inline HRESULT Word::Selection::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3070)
inline HRESULT Word::Selection::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3071)
inline HRESULT Word::Selection::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3072)
inline HRESULT Word::Selection::InsertBreak ( VARIANT * Type ) {
    HRESULT _hr = raw_InsertBreak(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3073)
inline HRESULT Word::Selection::InsertFile ( _bstr_t FileName, VARIANT * Range, VARIANT * ConfirmConversions, VARIANT * Link, VARIANT * Attachment ) {
    HRESULT _hr = raw_InsertFile(FileName, Range, ConfirmConversions, Link, Attachment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3074)
inline VARIANT_BOOL Word::Selection::InStory ( struct Range * Range ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_InStory(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3075)
inline VARIANT_BOOL Word::Selection::InRange ( struct Range * Range ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_InRange(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3076)
inline long Word::Selection::Delete ( VARIANT * Unit, VARIANT * Count ) {
    long _result;
    HRESULT _hr = raw_Delete(Unit, Count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3077)
inline long Word::Selection::Expand ( VARIANT * Unit ) {
    long _result;
    HRESULT _hr = raw_Expand(Unit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3078)
inline HRESULT Word::Selection::InsertParagraph ( ) {
    HRESULT _hr = raw_InsertParagraph();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3079)
inline HRESULT Word::Selection::InsertParagraphAfter ( ) {
    HRESULT _hr = raw_InsertParagraphAfter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3080)
inline Word::TablePtr Word::Selection::ConvertToTableOld ( VARIANT * Separator, VARIANT * NumRows, VARIANT * NumColumns, VARIANT * InitialColumnWidth, VARIANT * Format, VARIANT * ApplyBorders, VARIANT * ApplyShading, VARIANT * ApplyFont, VARIANT * ApplyColor, VARIANT * ApplyHeadingRows, VARIANT * ApplyLastRow, VARIANT * ApplyFirstColumn, VARIANT * ApplyLastColumn, VARIANT * AutoFit ) {
    struct Table * _result;
    HRESULT _hr = raw_ConvertToTableOld(Separator, NumRows, NumColumns, InitialColumnWidth, Format, ApplyBorders, ApplyShading, ApplyFont, ApplyColor, ApplyHeadingRows, ApplyLastRow, ApplyFirstColumn, ApplyLastColumn, AutoFit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(3081)
inline HRESULT Word::Selection::InsertDateTimeOld ( VARIANT * DateTimeFormat, VARIANT * InsertAsField, VARIANT * InsertAsFullWidth ) {
    HRESULT _hr = raw_InsertDateTimeOld(DateTimeFormat, InsertAsField, InsertAsFullWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3082)
inline HRESULT Word::Selection::InsertSymbol ( long CharacterNumber, VARIANT * Font, VARIANT * Unicode, VARIANT * Bias ) {
    HRESULT _hr = raw_InsertSymbol(CharacterNumber, Font, Unicode, Bias);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3083)
inline HRESULT Word::Selection::InsertCrossReference ( VARIANT * ReferenceType, enum WdReferenceKind ReferenceKind, VARIANT * ReferenceItem, VARIANT * InsertAsHyperlink, VARIANT * IncludePosition ) {
    HRESULT _hr = raw_InsertCrossReference(ReferenceType, ReferenceKind, ReferenceItem, InsertAsHyperlink, IncludePosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3084)
inline HRESULT Word::Selection::InsertCaption ( VARIANT * Label, VARIANT * Title, VARIANT * TitleAutoText, VARIANT * Position ) {
    HRESULT _hr = raw_InsertCaption(Label, Title, TitleAutoText, Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3085)
inline HRESULT Word::Selection::CopyAsPicture ( ) {
    HRESULT _hr = raw_CopyAsPicture();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3086)
inline HRESULT Word::Selection::SortOld ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * SortColumn, VARIANT * Separator, VARIANT * CaseSensitive, VARIANT * LanguageID ) {
    HRESULT _hr = raw_SortOld(ExcludeHeader, FieldNumber, SortFieldType, SortOrder, FieldNumber2, SortFieldType2, SortOrder2, FieldNumber3, SortFieldType3, SortOrder3, SortColumn, Separator, CaseSensitive, LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3087)
inline HRESULT Word::Selection::SortAscending ( ) {
    HRESULT _hr = raw_SortAscending();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3088)
inline HRESULT Word::Selection::SortDescending ( ) {
    HRESULT _hr = raw_SortDescending();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3089)
inline VARIANT_BOOL Word::Selection::IsEqual ( struct Range * Range ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsEqual(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3090)
inline float Word::Selection::Calculate ( ) {
    float _result;
    HRESULT _hr = raw_Calculate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3091)
inline Word::RangePtr Word::Selection::GoTo ( VARIANT * What, VARIANT * Which, VARIANT * Count, VARIANT * Name ) {
    struct Range * _result;
    HRESULT _hr = raw_GoTo(What, Which, Count, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3092)
inline Word::RangePtr Word::Selection::GoToNext ( enum WdGoToItem What ) {
    struct Range * _result;
    HRESULT _hr = raw_GoToNext(What, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3093)
inline Word::RangePtr Word::Selection::GoToPrevious ( enum WdGoToItem What ) {
    struct Range * _result;
    HRESULT _hr = raw_GoToPrevious(What, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3094)
inline HRESULT Word::Selection::PasteSpecial ( VARIANT * IconIndex, VARIANT * Link, VARIANT * Placement, VARIANT * DisplayAsIcon, VARIANT * DataType, VARIANT * IconFileName, VARIANT * IconLabel ) {
    HRESULT _hr = raw_PasteSpecial(IconIndex, Link, Placement, DisplayAsIcon, DataType, IconFileName, IconLabel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3095)
inline Word::FieldPtr Word::Selection::PreviousField ( ) {
    struct Field * _result;
    HRESULT _hr = raw_PreviousField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldPtr(_result, false);
}

#pragma implementation_key(3096)
inline Word::FieldPtr Word::Selection::NextField ( ) {
    struct Field * _result;
    HRESULT _hr = raw_NextField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldPtr(_result, false);
}

#pragma implementation_key(3097)
inline HRESULT Word::Selection::InsertParagraphBefore ( ) {
    HRESULT _hr = raw_InsertParagraphBefore();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3098)
inline HRESULT Word::Selection::InsertCells ( VARIANT * ShiftCells ) {
    HRESULT _hr = raw_InsertCells(ShiftCells);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3099)
inline HRESULT Word::Selection::Extend ( VARIANT * Character ) {
    HRESULT _hr = raw_Extend(Character);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3100)
inline HRESULT Word::Selection::Shrink ( ) {
    HRESULT _hr = raw_Shrink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3101)
inline long Word::Selection::MoveLeft ( VARIANT * Unit, VARIANT * Count, VARIANT * Extend ) {
    long _result;
    HRESULT _hr = raw_MoveLeft(Unit, Count, Extend, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3102)
inline long Word::Selection::MoveRight ( VARIANT * Unit, VARIANT * Count, VARIANT * Extend ) {
    long _result;
    HRESULT _hr = raw_MoveRight(Unit, Count, Extend, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3103)
inline long Word::Selection::MoveUp ( VARIANT * Unit, VARIANT * Count, VARIANT * Extend ) {
    long _result;
    HRESULT _hr = raw_MoveUp(Unit, Count, Extend, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3104)
inline long Word::Selection::MoveDown ( VARIANT * Unit, VARIANT * Count, VARIANT * Extend ) {
    long _result;
    HRESULT _hr = raw_MoveDown(Unit, Count, Extend, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3105)
inline long Word::Selection::HomeKey ( VARIANT * Unit, VARIANT * Extend ) {
    long _result;
    HRESULT _hr = raw_HomeKey(Unit, Extend, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3106)
inline long Word::Selection::EndKey ( VARIANT * Unit, VARIANT * Extend ) {
    long _result;
    HRESULT _hr = raw_EndKey(Unit, Extend, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3107)
inline HRESULT Word::Selection::EscapeKey ( ) {
    HRESULT _hr = raw_EscapeKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3108)
inline HRESULT Word::Selection::TypeText ( _bstr_t Text ) {
    HRESULT _hr = raw_TypeText(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3109)
inline HRESULT Word::Selection::CopyFormat ( ) {
    HRESULT _hr = raw_CopyFormat();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3110)
inline HRESULT Word::Selection::PasteFormat ( ) {
    HRESULT _hr = raw_PasteFormat();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3111)
inline HRESULT Word::Selection::TypeParagraph ( ) {
    HRESULT _hr = raw_TypeParagraph();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3112)
inline HRESULT Word::Selection::TypeBackspace ( ) {
    HRESULT _hr = raw_TypeBackspace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3113)
inline HRESULT Word::Selection::NextSubdocument ( ) {
    HRESULT _hr = raw_NextSubdocument();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3114)
inline HRESULT Word::Selection::PreviousSubdocument ( ) {
    HRESULT _hr = raw_PreviousSubdocument();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3115)
inline HRESULT Word::Selection::SelectColumn ( ) {
    HRESULT _hr = raw_SelectColumn();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3116)
inline HRESULT Word::Selection::SelectCurrentFont ( ) {
    HRESULT _hr = raw_SelectCurrentFont();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3117)
inline HRESULT Word::Selection::SelectCurrentAlignment ( ) {
    HRESULT _hr = raw_SelectCurrentAlignment();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3118)
inline HRESULT Word::Selection::SelectCurrentSpacing ( ) {
    HRESULT _hr = raw_SelectCurrentSpacing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3119)
inline HRESULT Word::Selection::SelectCurrentIndent ( ) {
    HRESULT _hr = raw_SelectCurrentIndent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3120)
inline HRESULT Word::Selection::SelectCurrentTabs ( ) {
    HRESULT _hr = raw_SelectCurrentTabs();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3121)
inline HRESULT Word::Selection::SelectCurrentColor ( ) {
    HRESULT _hr = raw_SelectCurrentColor();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3122)
inline HRESULT Word::Selection::CreateTextbox ( ) {
    HRESULT _hr = raw_CreateTextbox();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3123)
inline HRESULT Word::Selection::WholeStory ( ) {
    HRESULT _hr = raw_WholeStory();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3124)
inline HRESULT Word::Selection::SelectRow ( ) {
    HRESULT _hr = raw_SelectRow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3125)
inline HRESULT Word::Selection::SplitTable ( ) {
    HRESULT _hr = raw_SplitTable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3126)
inline HRESULT Word::Selection::InsertRows ( VARIANT * NumRows ) {
    HRESULT _hr = raw_InsertRows(NumRows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3127)
inline HRESULT Word::Selection::InsertColumns ( ) {
    HRESULT _hr = raw_InsertColumns();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3128)
inline HRESULT Word::Selection::InsertFormula ( VARIANT * Formula, VARIANT * NumberFormat ) {
    HRESULT _hr = raw_InsertFormula(Formula, NumberFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3129)
inline Word::RevisionPtr Word::Selection::NextRevision ( VARIANT * Wrap ) {
    struct Revision * _result;
    HRESULT _hr = raw_NextRevision(Wrap, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RevisionPtr(_result, false);
}

#pragma implementation_key(3130)
inline Word::RevisionPtr Word::Selection::PreviousRevision ( VARIANT * Wrap ) {
    struct Revision * _result;
    HRESULT _hr = raw_PreviousRevision(Wrap, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RevisionPtr(_result, false);
}

#pragma implementation_key(3131)
inline HRESULT Word::Selection::PasteAsNestedTable ( ) {
    HRESULT _hr = raw_PasteAsNestedTable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3132)
inline Word::AutoTextEntryPtr Word::Selection::CreateAutoTextEntry ( _bstr_t Name, _bstr_t StyleName ) {
    struct AutoTextEntry * _result;
    HRESULT _hr = raw_CreateAutoTextEntry(Name, StyleName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoTextEntryPtr(_result, false);
}

#pragma implementation_key(3133)
inline HRESULT Word::Selection::DetectLanguage ( ) {
    HRESULT _hr = raw_DetectLanguage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3134)
inline HRESULT Word::Selection::SelectCell ( ) {
    HRESULT _hr = raw_SelectCell();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3135)
inline HRESULT Word::Selection::InsertRowsBelow ( VARIANT * NumRows ) {
    HRESULT _hr = raw_InsertRowsBelow(NumRows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3136)
inline HRESULT Word::Selection::InsertColumnsRight ( ) {
    HRESULT _hr = raw_InsertColumnsRight();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3137)
inline HRESULT Word::Selection::InsertRowsAbove ( VARIANT * NumRows ) {
    HRESULT _hr = raw_InsertRowsAbove(NumRows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3138)
inline HRESULT Word::Selection::RtlRun ( ) {
    HRESULT _hr = raw_RtlRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3139)
inline HRESULT Word::Selection::LtrRun ( ) {
    HRESULT _hr = raw_LtrRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3140)
inline HRESULT Word::Selection::BoldRun ( ) {
    HRESULT _hr = raw_BoldRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3141)
inline HRESULT Word::Selection::ItalicRun ( ) {
    HRESULT _hr = raw_ItalicRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3142)
inline HRESULT Word::Selection::RtlPara ( ) {
    HRESULT _hr = raw_RtlPara();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3143)
inline HRESULT Word::Selection::LtrPara ( ) {
    HRESULT _hr = raw_LtrPara();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3144)
inline HRESULT Word::Selection::InsertDateTime ( VARIANT * DateTimeFormat, VARIANT * InsertAsField, VARIANT * InsertAsFullWidth, VARIANT * DateLanguage, VARIANT * CalendarType ) {
    HRESULT _hr = raw_InsertDateTime(DateTimeFormat, InsertAsField, InsertAsFullWidth, DateLanguage, CalendarType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3145)
inline HRESULT Word::Selection::Sort2000 ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * SortColumn, VARIANT * Separator, VARIANT * CaseSensitive, VARIANT * BidiSort, VARIANT * IgnoreThe, VARIANT * IgnoreKashida, VARIANT * IgnoreDiacritics, VARIANT * IgnoreHe, VARIANT * LanguageID ) {
    HRESULT _hr = raw_Sort2000(ExcludeHeader, FieldNumber, SortFieldType, SortOrder, FieldNumber2, SortFieldType2, SortOrder2, FieldNumber3, SortFieldType3, SortOrder3, SortColumn, Separator, CaseSensitive, BidiSort, IgnoreThe, IgnoreKashida, IgnoreDiacritics, IgnoreHe, LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3146)
inline Word::TablePtr Word::Selection::ConvertToTable ( VARIANT * Separator, VARIANT * NumRows, VARIANT * NumColumns, VARIANT * InitialColumnWidth, VARIANT * Format, VARIANT * ApplyBorders, VARIANT * ApplyShading, VARIANT * ApplyFont, VARIANT * ApplyColor, VARIANT * ApplyHeadingRows, VARIANT * ApplyLastRow, VARIANT * ApplyFirstColumn, VARIANT * ApplyLastColumn, VARIANT * AutoFit, VARIANT * AutoFitBehavior, VARIANT * DefaultTableBehavior ) {
    struct Table * _result;
    HRESULT _hr = raw_ConvertToTable(Separator, NumRows, NumColumns, InitialColumnWidth, Format, ApplyBorders, ApplyShading, ApplyFont, ApplyColor, ApplyHeadingRows, ApplyLastRow, ApplyFirstColumn, ApplyLastColumn, AutoFit, AutoFitBehavior, DefaultTableBehavior, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(3147)
inline long Word::Selection::GetNoProofing ( ) {
    long _result;
    HRESULT _hr = get_NoProofing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3148)
inline void Word::Selection::PutNoProofing ( long prop ) {
    HRESULT _hr = put_NoProofing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3149)
inline Word::TablesPtr Word::Selection::GetTopLevelTables ( ) {
    struct Tables * _result;
    HRESULT _hr = get_TopLevelTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablesPtr(_result, false);
}

#pragma implementation_key(3150)
inline VARIANT_BOOL Word::Selection::GetLanguageDetected ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LanguageDetected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3151)
inline void Word::Selection::PutLanguageDetected ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_LanguageDetected(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3152)
inline float Word::Selection::GetFitTextWidth ( ) {
    float _result;
    HRESULT _hr = get_FitTextWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3153)
inline void Word::Selection::PutFitTextWidth ( float prop ) {
    HRESULT _hr = put_FitTextWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3154)
inline HRESULT Word::Selection::ClearFormatting ( ) {
    HRESULT _hr = raw_ClearFormatting();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3155)
inline HRESULT Word::Selection::PasteAppendTable ( ) {
    HRESULT _hr = raw_PasteAppendTable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3156)
inline Word::HTMLDivisionsPtr Word::Selection::GetHTMLDivisions ( ) {
    struct HTMLDivisions * _result;
    HRESULT _hr = get_HTMLDivisions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLDivisionsPtr(_result, false);
}

#pragma implementation_key(3157)
inline Word::SmartTagsPtr Word::Selection::GetSmartTags ( ) {
    struct SmartTags * _result;
    HRESULT _hr = get_SmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagsPtr(_result, false);
}

#pragma implementation_key(3158)
inline Word::ShapeRangePtr Word::Selection::GetChildShapeRange ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = get_ChildShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3159)
inline VARIANT_BOOL Word::Selection::GetHasChildShapeRange ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasChildShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3160)
inline Word::FootnoteOptionsPtr Word::Selection::GetFootnoteOptions ( ) {
    struct FootnoteOptions * _result;
    HRESULT _hr = get_FootnoteOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FootnoteOptionsPtr(_result, false);
}

#pragma implementation_key(3161)
inline Word::EndnoteOptionsPtr Word::Selection::GetEndnoteOptions ( ) {
    struct EndnoteOptions * _result;
    HRESULT _hr = get_EndnoteOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EndnoteOptionsPtr(_result, false);
}

#pragma implementation_key(3162)
inline HRESULT Word::Selection::ToggleCharacterCode ( ) {
    HRESULT _hr = raw_ToggleCharacterCode();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3163)
inline HRESULT Word::Selection::PasteAndFormat ( enum WdRecoveryType Type ) {
    HRESULT _hr = raw_PasteAndFormat(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3164)
inline HRESULT Word::Selection::PasteExcelTable ( VARIANT_BOOL LinkedToExcel, VARIANT_BOOL WordFormatting, VARIANT_BOOL RTF ) {
    HRESULT _hr = raw_PasteExcelTable(LinkedToExcel, WordFormatting, RTF);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3165)
inline HRESULT Word::Selection::ShrinkDiscontiguousSelection ( ) {
    HRESULT _hr = raw_ShrinkDiscontiguousSelection();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3166)
inline HRESULT Word::Selection::InsertStyleSeparator ( ) {
    HRESULT _hr = raw_InsertStyleSeparator();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3167)
inline HRESULT Word::Selection::Sort ( VARIANT * ExcludeHeader, VARIANT * FieldNumber, VARIANT * SortFieldType, VARIANT * SortOrder, VARIANT * FieldNumber2, VARIANT * SortFieldType2, VARIANT * SortOrder2, VARIANT * FieldNumber3, VARIANT * SortFieldType3, VARIANT * SortOrder3, VARIANT * SortColumn, VARIANT * Separator, VARIANT * CaseSensitive, VARIANT * BidiSort, VARIANT * IgnoreThe, VARIANT * IgnoreKashida, VARIANT * IgnoreDiacritics, VARIANT * IgnoreHe, VARIANT * LanguageID, VARIANT * SubFieldNumber, VARIANT * SubFieldNumber2, VARIANT * SubFieldNumber3 ) {
    HRESULT _hr = raw_Sort(ExcludeHeader, FieldNumber, SortFieldType, SortOrder, FieldNumber2, SortFieldType2, SortOrder2, FieldNumber3, SortFieldType3, SortOrder3, SortColumn, Separator, CaseSensitive, BidiSort, IgnoreThe, IgnoreKashida, IgnoreDiacritics, IgnoreHe, LanguageID, SubFieldNumber, SubFieldNumber2, SubFieldNumber3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TablesOfAuthoritiesCategories wrapper method implementations
//

#pragma implementation_key(3168)
inline Word::_ApplicationPtr Word::TablesOfAuthoritiesCategories::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3169)
inline long Word::TablesOfAuthoritiesCategories::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3170)
inline IDispatchPtr Word::TablesOfAuthoritiesCategories::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3171)
inline IUnknownPtr Word::TablesOfAuthoritiesCategories::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3172)
inline long Word::TablesOfAuthoritiesCategories::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3173)
inline Word::TableOfAuthoritiesCategoryPtr Word::TablesOfAuthoritiesCategories::Item ( VARIANT * Index ) {
    struct TableOfAuthoritiesCategory * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TableOfAuthoritiesCategoryPtr(_result, false);
}

//
// interface TableOfAuthoritiesCategory wrapper method implementations
//

#pragma implementation_key(3174)
inline Word::_ApplicationPtr Word::TableOfAuthoritiesCategory::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3175)
inline long Word::TableOfAuthoritiesCategory::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3176)
inline IDispatchPtr Word::TableOfAuthoritiesCategory::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3177)
inline _bstr_t Word::TableOfAuthoritiesCategory::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3178)
inline void Word::TableOfAuthoritiesCategory::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3179)
inline long Word::TableOfAuthoritiesCategory::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface CaptionLabels wrapper method implementations
//

#pragma implementation_key(3180)
inline Word::_ApplicationPtr Word::CaptionLabels::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3181)
inline long Word::CaptionLabels::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3182)
inline IDispatchPtr Word::CaptionLabels::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3183)
inline IUnknownPtr Word::CaptionLabels::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3184)
inline long Word::CaptionLabels::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3185)
inline Word::CaptionLabelPtr Word::CaptionLabels::Item ( VARIANT * Index ) {
    struct CaptionLabel * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CaptionLabelPtr(_result, false);
}

#pragma implementation_key(3186)
inline Word::CaptionLabelPtr Word::CaptionLabels::Add ( _bstr_t Name ) {
    struct CaptionLabel * _result;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CaptionLabelPtr(_result, false);
}

//
// interface CaptionLabel wrapper method implementations
//

#pragma implementation_key(3187)
inline Word::_ApplicationPtr Word::CaptionLabel::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3188)
inline long Word::CaptionLabel::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3189)
inline IDispatchPtr Word::CaptionLabel::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3190)
inline _bstr_t Word::CaptionLabel::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3191)
inline VARIANT_BOOL Word::CaptionLabel::GetBuiltIn ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3192)
inline enum WdCaptionLabelID Word::CaptionLabel::GetID ( ) {
    enum WdCaptionLabelID _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3193)
inline VARIANT_BOOL Word::CaptionLabel::GetIncludeChapterNumber ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludeChapterNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3194)
inline void Word::CaptionLabel::PutIncludeChapterNumber ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IncludeChapterNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3195)
inline enum WdCaptionNumberStyle Word::CaptionLabel::GetNumberStyle ( ) {
    enum WdCaptionNumberStyle _result;
    HRESULT _hr = get_NumberStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3196)
inline void Word::CaptionLabel::PutNumberStyle ( enum WdCaptionNumberStyle prop ) {
    HRESULT _hr = put_NumberStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3197)
inline long Word::CaptionLabel::GetChapterStyleLevel ( ) {
    long _result;
    HRESULT _hr = get_ChapterStyleLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3198)
inline void Word::CaptionLabel::PutChapterStyleLevel ( long prop ) {
    HRESULT _hr = put_ChapterStyleLevel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3199)
inline enum WdSeparatorType Word::CaptionLabel::GetSeparator ( ) {
    enum WdSeparatorType _result;
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3200)
inline void Word::CaptionLabel::PutSeparator ( enum WdSeparatorType prop ) {
    HRESULT _hr = put_Separator(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3201)
inline enum WdCaptionPosition Word::CaptionLabel::GetPosition ( ) {
    enum WdCaptionPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3202)
inline void Word::CaptionLabel::PutPosition ( enum WdCaptionPosition prop ) {
    HRESULT _hr = put_Position(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3203)
inline HRESULT Word::CaptionLabel::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface AutoCaptions wrapper method implementations
//

#pragma implementation_key(3204)
inline Word::_ApplicationPtr Word::AutoCaptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3205)
inline long Word::AutoCaptions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3206)
inline IDispatchPtr Word::AutoCaptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3207)
inline IUnknownPtr Word::AutoCaptions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3208)
inline long Word::AutoCaptions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3209)
inline Word::AutoCaptionPtr Word::AutoCaptions::Item ( VARIANT * Index ) {
    struct AutoCaption * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AutoCaptionPtr(_result, false);
}

#pragma implementation_key(3210)
inline HRESULT Word::AutoCaptions::CancelAutoInsert ( ) {
    HRESULT _hr = raw_CancelAutoInsert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface AutoCaption wrapper method implementations
//

#pragma implementation_key(3211)
inline Word::_ApplicationPtr Word::AutoCaption::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3212)
inline long Word::AutoCaption::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3213)
inline IDispatchPtr Word::AutoCaption::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3214)
inline _bstr_t Word::AutoCaption::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3215)
inline VARIANT_BOOL Word::AutoCaption::GetAutoInsert ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoInsert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3216)
inline void Word::AutoCaption::PutAutoInsert ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoInsert(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3217)
inline long Word::AutoCaption::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3218)
inline _variant_t Word::AutoCaption::GetCaptionLabel ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CaptionLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3219)
inline void Word::AutoCaption::PutCaptionLabel ( VARIANT * prop ) {
    HRESULT _hr = put_CaptionLabel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Indexes wrapper method implementations
//

#pragma implementation_key(3220)
inline Word::_ApplicationPtr Word::Indexes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3221)
inline long Word::Indexes::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3222)
inline IDispatchPtr Word::Indexes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3223)
inline IUnknownPtr Word::Indexes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3224)
inline long Word::Indexes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3225)
inline enum WdIndexFormat Word::Indexes::GetFormat ( ) {
    enum WdIndexFormat _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3226)
inline void Word::Indexes::PutFormat ( enum WdIndexFormat prop ) {
    HRESULT _hr = put_Format(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3227)
inline Word::IndexPtr Word::Indexes::Item ( long Index ) {
    struct Index * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IndexPtr(_result, false);
}

#pragma implementation_key(3228)
inline Word::IndexPtr Word::Indexes::AddOld ( struct Range * Range, VARIANT * HeadingSeparator, VARIANT * RightAlignPageNumbers, VARIANT * Type, VARIANT * NumberOfColumns, VARIANT * AccentedLetters ) {
    struct Index * _result;
    HRESULT _hr = raw_AddOld(Range, HeadingSeparator, RightAlignPageNumbers, Type, NumberOfColumns, AccentedLetters, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IndexPtr(_result, false);
}

#pragma implementation_key(3229)
inline Word::FieldPtr Word::Indexes::MarkEntry ( struct Range * Range, VARIANT * Entry, VARIANT * EntryAutoText, VARIANT * CrossReference, VARIANT * CrossReferenceAutoText, VARIANT * BookmarkName, VARIANT * Bold, VARIANT * Italic, VARIANT * Reading ) {
    struct Field * _result;
    HRESULT _hr = raw_MarkEntry(Range, Entry, EntryAutoText, CrossReference, CrossReferenceAutoText, BookmarkName, Bold, Italic, Reading, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldPtr(_result, false);
}

#pragma implementation_key(3230)
inline HRESULT Word::Indexes::MarkAllEntries ( struct Range * Range, VARIANT * Entry, VARIANT * EntryAutoText, VARIANT * CrossReference, VARIANT * CrossReferenceAutoText, VARIANT * BookmarkName, VARIANT * Bold, VARIANT * Italic ) {
    HRESULT _hr = raw_MarkAllEntries(Range, Entry, EntryAutoText, CrossReference, CrossReferenceAutoText, BookmarkName, Bold, Italic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3231)
inline HRESULT Word::Indexes::AutoMarkEntries ( _bstr_t ConcordanceFileName ) {
    HRESULT _hr = raw_AutoMarkEntries(ConcordanceFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3232)
inline Word::IndexPtr Word::Indexes::Add ( struct Range * Range, VARIANT * HeadingSeparator, VARIANT * RightAlignPageNumbers, VARIANT * Type, VARIANT * NumberOfColumns, VARIANT * AccentedLetters, VARIANT * SortBy, VARIANT * IndexLanguage ) {
    struct Index * _result;
    HRESULT _hr = raw_Add(Range, HeadingSeparator, RightAlignPageNumbers, Type, NumberOfColumns, AccentedLetters, SortBy, IndexLanguage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IndexPtr(_result, false);
}

//
// interface Index wrapper method implementations
//

#pragma implementation_key(3233)
inline Word::_ApplicationPtr Word::Index::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3234)
inline long Word::Index::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3235)
inline IDispatchPtr Word::Index::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3236)
inline enum WdHeadingSeparator Word::Index::GetHeadingSeparator ( ) {
    enum WdHeadingSeparator _result;
    HRESULT _hr = get_HeadingSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3237)
inline void Word::Index::PutHeadingSeparator ( enum WdHeadingSeparator prop ) {
    HRESULT _hr = put_HeadingSeparator(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3238)
inline VARIANT_BOOL Word::Index::GetRightAlignPageNumbers ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RightAlignPageNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3239)
inline void Word::Index::PutRightAlignPageNumbers ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_RightAlignPageNumbers(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3240)
inline enum WdIndexType Word::Index::GetType ( ) {
    enum WdIndexType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3241)
inline void Word::Index::PutType ( enum WdIndexType prop ) {
    HRESULT _hr = put_Type(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3242)
inline long Word::Index::GetNumberOfColumns ( ) {
    long _result;
    HRESULT _hr = get_NumberOfColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3243)
inline void Word::Index::PutNumberOfColumns ( long prop ) {
    HRESULT _hr = put_NumberOfColumns(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3244)
inline Word::RangePtr Word::Index::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3245)
inline enum WdTabLeader Word::Index::GetTabLeader ( ) {
    enum WdTabLeader _result;
    HRESULT _hr = get_TabLeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3246)
inline void Word::Index::PutTabLeader ( enum WdTabLeader prop ) {
    HRESULT _hr = put_TabLeader(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3247)
inline VARIANT_BOOL Word::Index::GetAccentedLetters ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AccentedLetters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3248)
inline void Word::Index::PutAccentedLetters ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AccentedLetters(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3249)
inline enum WdIndexSortBy Word::Index::GetSortBy ( ) {
    enum WdIndexSortBy _result;
    HRESULT _hr = get_SortBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3250)
inline void Word::Index::PutSortBy ( enum WdIndexSortBy prop ) {
    HRESULT _hr = put_SortBy(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3251)
inline enum WdIndexFilter Word::Index::GetFilter ( ) {
    enum WdIndexFilter _result;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3252)
inline void Word::Index::PutFilter ( enum WdIndexFilter prop ) {
    HRESULT _hr = put_Filter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3253)
inline HRESULT Word::Index::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3254)
inline HRESULT Word::Index::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3255)
inline enum WdLanguageID Word::Index::GetIndexLanguage ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_IndexLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3256)
inline void Word::Index::PutIndexLanguage ( enum WdLanguageID prop ) {
    HRESULT _hr = put_IndexLanguage(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AddIn wrapper method implementations
//

#pragma implementation_key(3257)
inline Word::_ApplicationPtr Word::AddIn::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3258)
inline long Word::AddIn::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3259)
inline IDispatchPtr Word::AddIn::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3260)
inline _bstr_t Word::AddIn::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3261)
inline long Word::AddIn::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3262)
inline _bstr_t Word::AddIn::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3263)
inline VARIANT_BOOL Word::AddIn::GetInstalled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Installed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3264)
inline void Word::AddIn::PutInstalled ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Installed(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3265)
inline VARIANT_BOOL Word::AddIn::GetCompiled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Compiled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3266)
inline VARIANT_BOOL Word::AddIn::GetAutoload ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Autoload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3267)
inline HRESULT Word::AddIn::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface AddIns wrapper method implementations
//

#pragma implementation_key(3268)
inline Word::_ApplicationPtr Word::AddIns::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3269)
inline long Word::AddIns::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3270)
inline IDispatchPtr Word::AddIns::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3271)
inline IUnknownPtr Word::AddIns::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3272)
inline long Word::AddIns::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3273)
inline Word::AddInPtr Word::AddIns::Item ( VARIANT * Index ) {
    struct AddIn * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

#pragma implementation_key(3274)
inline Word::AddInPtr Word::AddIns::Add ( _bstr_t FileName, VARIANT * Install ) {
    struct AddIn * _result;
    HRESULT _hr = raw_Add(FileName, Install, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

#pragma implementation_key(3275)
inline HRESULT Word::AddIns::Unload ( VARIANT_BOOL RemoveFromList ) {
    HRESULT _hr = raw_Unload(RemoveFromList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Revisions wrapper method implementations
//

#pragma implementation_key(3276)
inline Word::_ApplicationPtr Word::Revisions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3277)
inline long Word::Revisions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3278)
inline IDispatchPtr Word::Revisions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3279)
inline IUnknownPtr Word::Revisions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3280)
inline long Word::Revisions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3281)
inline Word::RevisionPtr Word::Revisions::Item ( long Index ) {
    struct Revision * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RevisionPtr(_result, false);
}

#pragma implementation_key(3282)
inline HRESULT Word::Revisions::AcceptAll ( ) {
    HRESULT _hr = raw_AcceptAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3283)
inline HRESULT Word::Revisions::RejectAll ( ) {
    HRESULT _hr = raw_RejectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Revision wrapper method implementations
//

#pragma implementation_key(3284)
inline Word::_ApplicationPtr Word::Revision::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3285)
inline long Word::Revision::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3286)
inline IDispatchPtr Word::Revision::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3287)
inline _bstr_t Word::Revision::GetAuthor ( ) {
    BSTR _result;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3288)
inline DATE Word::Revision::GetDate ( ) {
    DATE _result;
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3289)
inline Word::RangePtr Word::Revision::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3290)
inline enum WdRevisionType Word::Revision::GetType ( ) {
    enum WdRevisionType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3291)
inline long Word::Revision::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3292)
inline HRESULT Word::Revision::Accept ( ) {
    HRESULT _hr = raw_Accept();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3293)
inline HRESULT Word::Revision::Reject ( ) {
    HRESULT _hr = raw_Reject();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3294)
inline Word::StylePtr Word::Revision::GetStyle ( ) {
    struct Style * _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

#pragma implementation_key(3295)
inline _bstr_t Word::Revision::GetFormatDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_FormatDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Task wrapper method implementations
//

#pragma implementation_key(3296)
inline Word::_ApplicationPtr Word::Task::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3297)
inline long Word::Task::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3298)
inline IDispatchPtr Word::Task::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3299)
inline _bstr_t Word::Task::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3300)
inline long Word::Task::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3301)
inline void Word::Task::PutLeft ( long prop ) {
    HRESULT _hr = put_Left(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3302)
inline long Word::Task::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3303)
inline void Word::Task::PutTop ( long prop ) {
    HRESULT _hr = put_Top(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3304)
inline long Word::Task::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3305)
inline void Word::Task::PutWidth ( long prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3306)
inline long Word::Task::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3307)
inline void Word::Task::PutHeight ( long prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3308)
inline enum WdWindowState Word::Task::GetWindowState ( ) {
    enum WdWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3309)
inline void Word::Task::PutWindowState ( enum WdWindowState prop ) {
    HRESULT _hr = put_WindowState(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3310)
inline VARIANT_BOOL Word::Task::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3311)
inline void Word::Task::PutVisible ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3312)
inline HRESULT Word::Task::Activate ( VARIANT * Wait ) {
    HRESULT _hr = raw_Activate(Wait);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3313)
inline HRESULT Word::Task::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3314)
inline HRESULT Word::Task::Move ( long Left, long Top ) {
    HRESULT _hr = raw_Move(Left, Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3315)
inline HRESULT Word::Task::Resize ( long Width, long Height ) {
    HRESULT _hr = raw_Resize(Width, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3316)
inline HRESULT Word::Task::SendWindowMessage ( long Message, long wParam, long lParam ) {
    HRESULT _hr = raw_SendWindowMessage(Message, wParam, lParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Tasks wrapper method implementations
//

#pragma implementation_key(3317)
inline Word::_ApplicationPtr Word::Tasks::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3318)
inline long Word::Tasks::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3319)
inline IDispatchPtr Word::Tasks::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3320)
inline IUnknownPtr Word::Tasks::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3321)
inline long Word::Tasks::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3322)
inline Word::TaskPtr Word::Tasks::Item ( VARIANT * Index ) {
    struct Task * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TaskPtr(_result, false);
}

#pragma implementation_key(3323)
inline VARIANT_BOOL Word::Tasks::Exists ( _bstr_t Name ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Exists(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3324)
inline HRESULT Word::Tasks::ExitWindows ( ) {
    HRESULT _hr = raw_ExitWindows();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface HeadersFooters wrapper method implementations
//

#pragma implementation_key(3325)
inline Word::_ApplicationPtr Word::HeadersFooters::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3326)
inline long Word::HeadersFooters::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3327)
inline IDispatchPtr Word::HeadersFooters::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3328)
inline IUnknownPtr Word::HeadersFooters::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3329)
inline long Word::HeadersFooters::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3330)
inline Word::HeaderFooterPtr Word::HeadersFooters::Item ( enum WdHeaderFooterIndex Index ) {
    struct HeaderFooter * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

//
// interface HeaderFooter wrapper method implementations
//

#pragma implementation_key(3331)
inline Word::_ApplicationPtr Word::HeaderFooter::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3332)
inline long Word::HeaderFooter::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3333)
inline IDispatchPtr Word::HeaderFooter::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3334)
inline Word::RangePtr Word::HeaderFooter::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3335)
inline enum WdHeaderFooterIndex Word::HeaderFooter::GetIndex ( ) {
    enum WdHeaderFooterIndex _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3336)
inline VARIANT_BOOL Word::HeaderFooter::GetIsHeader ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3337)
inline VARIANT_BOOL Word::HeaderFooter::GetExists ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Exists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3338)
inline void Word::HeaderFooter::PutExists ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Exists(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3339)
inline Word::PageNumbersPtr Word::HeaderFooter::GetPageNumbers ( ) {
    struct PageNumbers * _result;
    HRESULT _hr = get_PageNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageNumbersPtr(_result, false);
}

#pragma implementation_key(3340)
inline VARIANT_BOOL Word::HeaderFooter::GetLinkToPrevious ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LinkToPrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3341)
inline void Word::HeaderFooter::PutLinkToPrevious ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_LinkToPrevious(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3342)
inline Word::ShapesPtr Word::HeaderFooter::GetShapes ( ) {
    struct Shapes * _result;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

//
// interface PageNumbers wrapper method implementations
//

#pragma implementation_key(3343)
inline Word::_ApplicationPtr Word::PageNumbers::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3344)
inline long Word::PageNumbers::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3345)
inline IDispatchPtr Word::PageNumbers::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3346)
inline IUnknownPtr Word::PageNumbers::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3347)
inline long Word::PageNumbers::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3348)
inline enum WdPageNumberStyle Word::PageNumbers::GetNumberStyle ( ) {
    enum WdPageNumberStyle _result;
    HRESULT _hr = get_NumberStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3349)
inline void Word::PageNumbers::PutNumberStyle ( enum WdPageNumberStyle prop ) {
    HRESULT _hr = put_NumberStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3350)
inline VARIANT_BOOL Word::PageNumbers::GetIncludeChapterNumber ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludeChapterNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3351)
inline void Word::PageNumbers::PutIncludeChapterNumber ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IncludeChapterNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3352)
inline long Word::PageNumbers::GetHeadingLevelForChapter ( ) {
    long _result;
    HRESULT _hr = get_HeadingLevelForChapter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3353)
inline void Word::PageNumbers::PutHeadingLevelForChapter ( long prop ) {
    HRESULT _hr = put_HeadingLevelForChapter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3354)
inline enum WdSeparatorType Word::PageNumbers::GetChapterPageSeparator ( ) {
    enum WdSeparatorType _result;
    HRESULT _hr = get_ChapterPageSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3355)
inline void Word::PageNumbers::PutChapterPageSeparator ( enum WdSeparatorType prop ) {
    HRESULT _hr = put_ChapterPageSeparator(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3356)
inline VARIANT_BOOL Word::PageNumbers::GetRestartNumberingAtSection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RestartNumberingAtSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3357)
inline void Word::PageNumbers::PutRestartNumberingAtSection ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_RestartNumberingAtSection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3358)
inline long Word::PageNumbers::GetStartingNumber ( ) {
    long _result;
    HRESULT _hr = get_StartingNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3359)
inline void Word::PageNumbers::PutStartingNumber ( long prop ) {
    HRESULT _hr = put_StartingNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3360)
inline VARIANT_BOOL Word::PageNumbers::GetShowFirstPageNumber ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowFirstPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3361)
inline void Word::PageNumbers::PutShowFirstPageNumber ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowFirstPageNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3362)
inline Word::PageNumberPtr Word::PageNumbers::Item ( long Index ) {
    struct PageNumber * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageNumberPtr(_result, false);
}

#pragma implementation_key(3363)
inline Word::PageNumberPtr Word::PageNumbers::Add ( VARIANT * PageNumberAlignment, VARIANT * FirstPage ) {
    struct PageNumber * _result;
    HRESULT _hr = raw_Add(PageNumberAlignment, FirstPage, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageNumberPtr(_result, false);
}

#pragma implementation_key(3364)
inline VARIANT_BOOL Word::PageNumbers::GetDoubleQuote ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DoubleQuote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3365)
inline void Word::PageNumbers::PutDoubleQuote ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DoubleQuote(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PageNumber wrapper method implementations
//

#pragma implementation_key(3366)
inline Word::_ApplicationPtr Word::PageNumber::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3367)
inline long Word::PageNumber::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3368)
inline IDispatchPtr Word::PageNumber::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3369)
inline long Word::PageNumber::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3370)
inline enum WdPageNumberAlignment Word::PageNumber::GetAlignment ( ) {
    enum WdPageNumberAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3371)
inline void Word::PageNumber::PutAlignment ( enum WdPageNumberAlignment prop ) {
    HRESULT _hr = put_Alignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3372)
inline HRESULT Word::PageNumber::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3373)
inline HRESULT Word::PageNumber::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3374)
inline HRESULT Word::PageNumber::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3375)
inline HRESULT Word::PageNumber::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Subdocuments wrapper method implementations
//

#pragma implementation_key(3376)
inline Word::_ApplicationPtr Word::Subdocuments::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3377)
inline long Word::Subdocuments::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3378)
inline IDispatchPtr Word::Subdocuments::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3379)
inline long Word::Subdocuments::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3380)
inline IUnknownPtr Word::Subdocuments::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3381)
inline VARIANT_BOOL Word::Subdocuments::GetExpanded ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Expanded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3382)
inline void Word::Subdocuments::PutExpanded ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Expanded(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3383)
inline Word::SubdocumentPtr Word::Subdocuments::Item ( long Index ) {
    struct Subdocument * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SubdocumentPtr(_result, false);
}

#pragma implementation_key(3384)
inline Word::SubdocumentPtr Word::Subdocuments::AddFromFile ( VARIANT * Name, VARIANT * ConfirmConversions, VARIANT * ReadOnly, VARIANT * PasswordDocument, VARIANT * PasswordTemplate, VARIANT * Revert, VARIANT * WritePasswordDocument, VARIANT * WritePasswordTemplate ) {
    struct Subdocument * _result;
    HRESULT _hr = raw_AddFromFile(Name, ConfirmConversions, ReadOnly, PasswordDocument, PasswordTemplate, Revert, WritePasswordDocument, WritePasswordTemplate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SubdocumentPtr(_result, false);
}

#pragma implementation_key(3385)
inline Word::SubdocumentPtr Word::Subdocuments::AddFromRange ( struct Range * Range ) {
    struct Subdocument * _result;
    HRESULT _hr = raw_AddFromRange(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SubdocumentPtr(_result, false);
}

#pragma implementation_key(3386)
inline HRESULT Word::Subdocuments::Merge ( VARIANT * FirstSubdocument, VARIANT * LastSubdocument ) {
    HRESULT _hr = raw_Merge(FirstSubdocument, LastSubdocument);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3387)
inline HRESULT Word::Subdocuments::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3388)
inline HRESULT Word::Subdocuments::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Subdocument wrapper method implementations
//

#pragma implementation_key(3389)
inline Word::_ApplicationPtr Word::Subdocument::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3390)
inline long Word::Subdocument::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3391)
inline IDispatchPtr Word::Subdocument::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3392)
inline VARIANT_BOOL Word::Subdocument::GetLocked ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3393)
inline void Word::Subdocument::PutLocked ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Locked(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3394)
inline Word::RangePtr Word::Subdocument::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3395)
inline _bstr_t Word::Subdocument::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3396)
inline _bstr_t Word::Subdocument::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3397)
inline VARIANT_BOOL Word::Subdocument::GetHasFile ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3398)
inline long Word::Subdocument::GetLevel ( ) {
    long _result;
    HRESULT _hr = get_Level(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3399)
inline HRESULT Word::Subdocument::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3400)
inline HRESULT Word::Subdocument::Split ( struct Range * Range ) {
    HRESULT _hr = raw_Split(Range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3401)
inline Word::_DocumentPtr Word::Subdocument::Open ( ) {
    struct _Document * _result;
    HRESULT _hr = raw_Open(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

//
// interface HeadingStyles wrapper method implementations
//

#pragma implementation_key(3402)
inline Word::_ApplicationPtr Word::HeadingStyles::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3403)
inline long Word::HeadingStyles::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3404)
inline IDispatchPtr Word::HeadingStyles::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3405)
inline IUnknownPtr Word::HeadingStyles::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3406)
inline long Word::HeadingStyles::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3407)
inline Word::HeadingStylePtr Word::HeadingStyles::Item ( long Index ) {
    struct HeadingStyle * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadingStylePtr(_result, false);
}

#pragma implementation_key(3408)
inline Word::HeadingStylePtr Word::HeadingStyles::Add ( VARIANT * Style, short Level ) {
    struct HeadingStyle * _result;
    HRESULT _hr = raw_Add(Style, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadingStylePtr(_result, false);
}

//
// interface HeadingStyle wrapper method implementations
//

#pragma implementation_key(3409)
inline Word::_ApplicationPtr Word::HeadingStyle::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3410)
inline long Word::HeadingStyle::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3411)
inline IDispatchPtr Word::HeadingStyle::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3412)
inline _variant_t Word::HeadingStyle::GetStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3413)
inline void Word::HeadingStyle::PutStyle ( VARIANT * prop ) {
    HRESULT _hr = put_Style(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3414)
inline short Word::HeadingStyle::GetLevel ( ) {
    short _result;
    HRESULT _hr = get_Level(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3415)
inline void Word::HeadingStyle::PutLevel ( short prop ) {
    HRESULT _hr = put_Level(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3416)
inline HRESULT Word::HeadingStyle::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface StoryRanges wrapper method implementations
//

#pragma implementation_key(3417)
inline IUnknownPtr Word::StoryRanges::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3418)
inline long Word::StoryRanges::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3419)
inline Word::_ApplicationPtr Word::StoryRanges::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3420)
inline long Word::StoryRanges::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3421)
inline IDispatchPtr Word::StoryRanges::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3422)
inline Word::RangePtr Word::StoryRanges::Item ( enum WdStoryType Index ) {
    struct Range * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

//
// interface ListLevel wrapper method implementations
//

#pragma implementation_key(3423)
inline long Word::ListLevel::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3424)
inline _bstr_t Word::ListLevel::GetNumberFormat ( ) {
    BSTR _result;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3425)
inline void Word::ListLevel::PutNumberFormat ( _bstr_t prop ) {
    HRESULT _hr = put_NumberFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3426)
inline enum WdTrailingCharacter Word::ListLevel::GetTrailingCharacter ( ) {
    enum WdTrailingCharacter _result;
    HRESULT _hr = get_TrailingCharacter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3427)
inline void Word::ListLevel::PutTrailingCharacter ( enum WdTrailingCharacter prop ) {
    HRESULT _hr = put_TrailingCharacter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3428)
inline enum WdListNumberStyle Word::ListLevel::GetNumberStyle ( ) {
    enum WdListNumberStyle _result;
    HRESULT _hr = get_NumberStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3429)
inline void Word::ListLevel::PutNumberStyle ( enum WdListNumberStyle prop ) {
    HRESULT _hr = put_NumberStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3430)
inline float Word::ListLevel::GetNumberPosition ( ) {
    float _result;
    HRESULT _hr = get_NumberPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3431)
inline void Word::ListLevel::PutNumberPosition ( float prop ) {
    HRESULT _hr = put_NumberPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3432)
inline enum WdListLevelAlignment Word::ListLevel::GetAlignment ( ) {
    enum WdListLevelAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3433)
inline void Word::ListLevel::PutAlignment ( enum WdListLevelAlignment prop ) {
    HRESULT _hr = put_Alignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3434)
inline float Word::ListLevel::GetTextPosition ( ) {
    float _result;
    HRESULT _hr = get_TextPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3435)
inline void Word::ListLevel::PutTextPosition ( float prop ) {
    HRESULT _hr = put_TextPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3436)
inline float Word::ListLevel::GetTabPosition ( ) {
    float _result;
    HRESULT _hr = get_TabPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3437)
inline void Word::ListLevel::PutTabPosition ( float prop ) {
    HRESULT _hr = put_TabPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3438)
inline VARIANT_BOOL Word::ListLevel::GetResetOnHigherOld ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ResetOnHigherOld(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3439)
inline void Word::ListLevel::PutResetOnHigherOld ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ResetOnHigherOld(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3440)
inline long Word::ListLevel::GetStartAt ( ) {
    long _result;
    HRESULT _hr = get_StartAt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3441)
inline void Word::ListLevel::PutStartAt ( long prop ) {
    HRESULT _hr = put_StartAt(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3442)
inline _bstr_t Word::ListLevel::GetLinkedStyle ( ) {
    BSTR _result;
    HRESULT _hr = get_LinkedStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3443)
inline void Word::ListLevel::PutLinkedStyle ( _bstr_t prop ) {
    HRESULT _hr = put_LinkedStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3444)
inline Word::_FontPtr Word::ListLevel::GetFont ( ) {
    struct _Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FontPtr(_result, false);
}

#pragma implementation_key(3445)
inline void Word::ListLevel::PutFont ( struct _Font * prop ) {
    HRESULT _hr = put_Font(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3446)
inline Word::_ApplicationPtr Word::ListLevel::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3447)
inline long Word::ListLevel::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3448)
inline IDispatchPtr Word::ListLevel::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3449)
inline long Word::ListLevel::GetResetOnHigher ( ) {
    long _result;
    HRESULT _hr = get_ResetOnHigher(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3450)
inline void Word::ListLevel::PutResetOnHigher ( long prop ) {
    HRESULT _hr = put_ResetOnHigher(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3451)
inline Word::InlineShapePtr Word::ListLevel::GetPictureBullet ( ) {
    struct InlineShape * _result;
    HRESULT _hr = get_PictureBullet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

#pragma implementation_key(3452)
inline Word::InlineShapePtr Word::ListLevel::ApplyPictureBullet ( _bstr_t FileName ) {
    struct InlineShape * _result;
    HRESULT _hr = raw_ApplyPictureBullet(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

//
// interface ListLevels wrapper method implementations
//

#pragma implementation_key(3453)
inline IUnknownPtr Word::ListLevels::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3454)
inline long Word::ListLevels::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3455)
inline Word::_ApplicationPtr Word::ListLevels::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3456)
inline long Word::ListLevels::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3457)
inline IDispatchPtr Word::ListLevels::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3458)
inline Word::ListLevelPtr Word::ListLevels::Item ( long Index ) {
    struct ListLevel * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListLevelPtr(_result, false);
}

//
// interface ListTemplate wrapper method implementations
//

#pragma implementation_key(3459)
inline Word::_ApplicationPtr Word::ListTemplate::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3460)
inline long Word::ListTemplate::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3461)
inline IDispatchPtr Word::ListTemplate::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3462)
inline VARIANT_BOOL Word::ListTemplate::GetOutlineNumbered ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OutlineNumbered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3463)
inline void Word::ListTemplate::PutOutlineNumbered ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_OutlineNumbered(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3464)
inline _bstr_t Word::ListTemplate::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3465)
inline void Word::ListTemplate::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3466)
inline Word::ListLevelsPtr Word::ListTemplate::GetListLevels ( ) {
    struct ListLevels * _result;
    HRESULT _hr = get_ListLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListLevelsPtr(_result, false);
}

#pragma implementation_key(3467)
inline Word::ListTemplatePtr Word::ListTemplate::Convert ( VARIANT * Level ) {
    struct ListTemplate * _result;
    HRESULT _hr = raw_Convert(Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListTemplatePtr(_result, false);
}

//
// interface ListTemplates wrapper method implementations
//

#pragma implementation_key(3468)
inline IUnknownPtr Word::ListTemplates::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3469)
inline long Word::ListTemplates::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3470)
inline Word::_ApplicationPtr Word::ListTemplates::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3471)
inline long Word::ListTemplates::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3472)
inline IDispatchPtr Word::ListTemplates::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3473)
inline Word::ListTemplatePtr Word::ListTemplates::Item ( VARIANT * Index ) {
    struct ListTemplate * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListTemplatePtr(_result, false);
}

#pragma implementation_key(3474)
inline Word::ListTemplatePtr Word::ListTemplates::Add ( VARIANT * OutlineNumbered, VARIANT * Name ) {
    struct ListTemplate * _result;
    HRESULT _hr = raw_Add(OutlineNumbered, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListTemplatePtr(_result, false);
}

//
// interface ListParagraphs wrapper method implementations
//

#pragma implementation_key(3475)
inline IUnknownPtr Word::ListParagraphs::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3476)
inline long Word::ListParagraphs::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3477)
inline Word::_ApplicationPtr Word::ListParagraphs::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3478)
inline long Word::ListParagraphs::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3479)
inline IDispatchPtr Word::ListParagraphs::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3480)
inline Word::ParagraphPtr Word::ListParagraphs::Item ( long Index ) {
    struct Paragraph * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphPtr(_result, false);
}

//
// interface List wrapper method implementations
//

#pragma implementation_key(3481)
inline Word::RangePtr Word::List::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3482)
inline Word::ListParagraphsPtr Word::List::GetListParagraphs ( ) {
    struct ListParagraphs * _result;
    HRESULT _hr = get_ListParagraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListParagraphsPtr(_result, false);
}

#pragma implementation_key(3483)
inline VARIANT_BOOL Word::List::GetSingleListTemplate ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SingleListTemplate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3484)
inline Word::_ApplicationPtr Word::List::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3485)
inline long Word::List::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3486)
inline IDispatchPtr Word::List::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3487)
inline HRESULT Word::List::ConvertNumbersToText ( VARIANT * NumberType ) {
    HRESULT _hr = raw_ConvertNumbersToText(NumberType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3488)
inline HRESULT Word::List::RemoveNumbers ( VARIANT * NumberType ) {
    HRESULT _hr = raw_RemoveNumbers(NumberType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3489)
inline long Word::List::CountNumberedItems ( VARIANT * NumberType, VARIANT * Level ) {
    long _result;
    HRESULT _hr = raw_CountNumberedItems(NumberType, Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3490)
inline HRESULT Word::List::ApplyListTemplateOld ( struct ListTemplate * ListTemplate, VARIANT * ContinuePreviousList ) {
    HRESULT _hr = raw_ApplyListTemplateOld(ListTemplate, ContinuePreviousList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3491)
inline enum WdContinue Word::List::CanContinuePreviousList ( struct ListTemplate * ListTemplate ) {
    enum WdContinue _result;
    HRESULT _hr = raw_CanContinuePreviousList(ListTemplate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3492)
inline HRESULT Word::List::ApplyListTemplate ( struct ListTemplate * ListTemplate, VARIANT * ContinuePreviousList, VARIANT * DefaultListBehavior ) {
    HRESULT _hr = raw_ApplyListTemplate(ListTemplate, ContinuePreviousList, DefaultListBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3493)
inline _bstr_t Word::List::GetStyleName ( ) {
    BSTR _result;
    HRESULT _hr = get_StyleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Lists wrapper method implementations
//

#pragma implementation_key(3494)
inline IUnknownPtr Word::Lists::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3495)
inline long Word::Lists::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3496)
inline Word::_ApplicationPtr Word::Lists::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3497)
inline long Word::Lists::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3498)
inline IDispatchPtr Word::Lists::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3499)
inline Word::ListPtr Word::Lists::Item ( long Index ) {
    struct List * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListPtr(_result, false);
}

//
// interface ListGallery wrapper method implementations
//

#pragma implementation_key(3500)
inline Word::ListTemplatesPtr Word::ListGallery::GetListTemplates ( ) {
    struct ListTemplates * _result;
    HRESULT _hr = get_ListTemplates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListTemplatesPtr(_result, false);
}

#pragma implementation_key(3501)
inline Word::_ApplicationPtr Word::ListGallery::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3502)
inline long Word::ListGallery::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3503)
inline IDispatchPtr Word::ListGallery::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3504)
inline VARIANT_BOOL Word::ListGallery::GetModified ( long Index ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Modified(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3505)
inline HRESULT Word::ListGallery::Reset ( long Index ) {
    HRESULT _hr = raw_Reset(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ListGalleries wrapper method implementations
//

#pragma implementation_key(3506)
inline IUnknownPtr Word::ListGalleries::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3507)
inline long Word::ListGalleries::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3508)
inline Word::_ApplicationPtr Word::ListGalleries::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3509)
inline long Word::ListGalleries::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3510)
inline IDispatchPtr Word::ListGalleries::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3511)
inline Word::ListGalleryPtr Word::ListGalleries::Item ( enum WdListGalleryType Index ) {
    struct ListGallery * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ListGalleryPtr(_result, false);
}

//
// interface KeyBindings wrapper method implementations
//

#pragma implementation_key(3512)
inline Word::_ApplicationPtr Word::KeyBindings::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3513)
inline long Word::KeyBindings::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3514)
inline IDispatchPtr Word::KeyBindings::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3515)
inline IUnknownPtr Word::KeyBindings::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3516)
inline long Word::KeyBindings::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3517)
inline IDispatchPtr Word::KeyBindings::GetContext ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Context(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3518)
inline Word::KeyBindingPtr Word::KeyBindings::Item ( long Index ) {
    struct KeyBinding * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return KeyBindingPtr(_result, false);
}

#pragma implementation_key(3519)
inline Word::KeyBindingPtr Word::KeyBindings::Add ( enum WdKeyCategory KeyCategory, _bstr_t Command, long KeyCode, VARIANT * KeyCode2, VARIANT * CommandParameter ) {
    struct KeyBinding * _result;
    HRESULT _hr = raw_Add(KeyCategory, Command, KeyCode, KeyCode2, CommandParameter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return KeyBindingPtr(_result, false);
}

#pragma implementation_key(3520)
inline HRESULT Word::KeyBindings::ClearAll ( ) {
    HRESULT _hr = raw_ClearAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3521)
inline Word::KeyBindingPtr Word::KeyBindings::Key ( long KeyCode, VARIANT * KeyCode2 ) {
    struct KeyBinding * _result;
    HRESULT _hr = raw_Key(KeyCode, KeyCode2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return KeyBindingPtr(_result, false);
}

//
// interface KeysBoundTo wrapper method implementations
//

#pragma implementation_key(3522)
inline Word::_ApplicationPtr Word::KeysBoundTo::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3523)
inline long Word::KeysBoundTo::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3524)
inline IDispatchPtr Word::KeysBoundTo::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3525)
inline IUnknownPtr Word::KeysBoundTo::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3526)
inline long Word::KeysBoundTo::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3527)
inline enum WdKeyCategory Word::KeysBoundTo::GetKeyCategory ( ) {
    enum WdKeyCategory _result;
    HRESULT _hr = get_KeyCategory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3528)
inline _bstr_t Word::KeysBoundTo::GetCommand ( ) {
    BSTR _result;
    HRESULT _hr = get_Command(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3529)
inline _bstr_t Word::KeysBoundTo::GetCommandParameter ( ) {
    BSTR _result;
    HRESULT _hr = get_CommandParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3530)
inline IDispatchPtr Word::KeysBoundTo::GetContext ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Context(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3531)
inline Word::KeyBindingPtr Word::KeysBoundTo::Item ( long Index ) {
    struct KeyBinding * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return KeyBindingPtr(_result, false);
}

#pragma implementation_key(3532)
inline Word::KeyBindingPtr Word::KeysBoundTo::Key ( long KeyCode, VARIANT * KeyCode2 ) {
    struct KeyBinding * _result;
    HRESULT _hr = raw_Key(KeyCode, KeyCode2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return KeyBindingPtr(_result, false);
}

//
// interface KeyBinding wrapper method implementations
//

#pragma implementation_key(3533)
inline Word::_ApplicationPtr Word::KeyBinding::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3534)
inline long Word::KeyBinding::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3535)
inline IDispatchPtr Word::KeyBinding::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3536)
inline _bstr_t Word::KeyBinding::GetCommand ( ) {
    BSTR _result;
    HRESULT _hr = get_Command(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3537)
inline _bstr_t Word::KeyBinding::GetKeyString ( ) {
    BSTR _result;
    HRESULT _hr = get_KeyString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3538)
inline VARIANT_BOOL Word::KeyBinding::GetProtected ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Protected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3539)
inline enum WdKeyCategory Word::KeyBinding::GetKeyCategory ( ) {
    enum WdKeyCategory _result;
    HRESULT _hr = get_KeyCategory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3540)
inline long Word::KeyBinding::GetKeyCode ( ) {
    long _result;
    HRESULT _hr = get_KeyCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3541)
inline long Word::KeyBinding::GetKeyCode2 ( ) {
    long _result;
    HRESULT _hr = get_KeyCode2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3542)
inline _bstr_t Word::KeyBinding::GetCommandParameter ( ) {
    BSTR _result;
    HRESULT _hr = get_CommandParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3543)
inline IDispatchPtr Word::KeyBinding::GetContext ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Context(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3544)
inline HRESULT Word::KeyBinding::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3545)
inline HRESULT Word::KeyBinding::Disable ( ) {
    HRESULT _hr = raw_Disable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3546)
inline HRESULT Word::KeyBinding::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3547)
inline HRESULT Word::KeyBinding::Rebind ( enum WdKeyCategory KeyCategory, _bstr_t Command, VARIANT * CommandParameter ) {
    HRESULT _hr = raw_Rebind(KeyCategory, Command, CommandParameter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface FileConverter wrapper method implementations
//

#pragma implementation_key(3548)
inline Word::_ApplicationPtr Word::FileConverter::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3549)
inline long Word::FileConverter::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3550)
inline IDispatchPtr Word::FileConverter::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3551)
inline _bstr_t Word::FileConverter::GetFormatName ( ) {
    BSTR _result;
    HRESULT _hr = get_FormatName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3552)
inline _bstr_t Word::FileConverter::GetClassName ( ) {
    BSTR _result;
    HRESULT _hr = get_ClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3553)
inline long Word::FileConverter::GetSaveFormat ( ) {
    long _result;
    HRESULT _hr = get_SaveFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3554)
inline long Word::FileConverter::GetOpenFormat ( ) {
    long _result;
    HRESULT _hr = get_OpenFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3555)
inline VARIANT_BOOL Word::FileConverter::GetCanSave ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CanSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3556)
inline VARIANT_BOOL Word::FileConverter::GetCanOpen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CanOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3557)
inline _bstr_t Word::FileConverter::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3558)
inline _bstr_t Word::FileConverter::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3559)
inline _bstr_t Word::FileConverter::GetExtensions ( ) {
    BSTR _result;
    HRESULT _hr = get_Extensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface FileConverters wrapper method implementations
//

#pragma implementation_key(3560)
inline Word::_ApplicationPtr Word::FileConverters::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3561)
inline long Word::FileConverters::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3562)
inline IDispatchPtr Word::FileConverters::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3563)
inline long Word::FileConverters::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3564)
inline IUnknownPtr Word::FileConverters::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3565)
inline enum WdChevronConvertRule Word::FileConverters::GetConvertMacWordChevrons ( ) {
    enum WdChevronConvertRule _result;
    HRESULT _hr = get_ConvertMacWordChevrons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3566)
inline void Word::FileConverters::PutConvertMacWordChevrons ( enum WdChevronConvertRule prop ) {
    HRESULT _hr = put_ConvertMacWordChevrons(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3567)
inline Word::FileConverterPtr Word::FileConverters::Item ( VARIANT * Index ) {
    struct FileConverter * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileConverterPtr(_result, false);
}

//
// interface SynonymInfo wrapper method implementations
//

#pragma implementation_key(3568)
inline Word::_ApplicationPtr Word::SynonymInfo::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3569)
inline long Word::SynonymInfo::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3570)
inline IDispatchPtr Word::SynonymInfo::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3571)
inline _bstr_t Word::SynonymInfo::GetWord ( ) {
    BSTR _result;
    HRESULT _hr = get_Word(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3572)
inline VARIANT_BOOL Word::SynonymInfo::GetFound ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Found(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3573)
inline long Word::SynonymInfo::GetMeaningCount ( ) {
    long _result;
    HRESULT _hr = get_MeaningCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3574)
inline _variant_t Word::SynonymInfo::GetMeaningList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MeaningList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3575)
inline _variant_t Word::SynonymInfo::GetPartOfSpeechList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PartOfSpeechList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3576)
inline _variant_t Word::SynonymInfo::GetSynonymList ( VARIANT * Meaning ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SynonymList(Meaning, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3577)
inline _variant_t Word::SynonymInfo::GetAntonymList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AntonymList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3578)
inline _variant_t Word::SynonymInfo::GetRelatedExpressionList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RelatedExpressionList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3579)
inline _variant_t Word::SynonymInfo::GetRelatedWordList ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RelatedWordList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface Hyperlinks wrapper method implementations
//

#pragma implementation_key(3580)
inline Word::_ApplicationPtr Word::Hyperlinks::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3581)
inline long Word::Hyperlinks::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3582)
inline IDispatchPtr Word::Hyperlinks::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3583)
inline long Word::Hyperlinks::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3584)
inline IUnknownPtr Word::Hyperlinks::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3585)
inline Word::HyperlinkPtr Word::Hyperlinks::Item ( VARIANT * Index ) {
    struct Hyperlink * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(3586)
inline Word::HyperlinkPtr Word::Hyperlinks::_Add ( IDispatch * Anchor, VARIANT * Address, VARIANT * SubAddress ) {
    struct Hyperlink * _result;
    HRESULT _hr = raw__Add(Anchor, Address, SubAddress, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(3587)
inline Word::HyperlinkPtr Word::Hyperlinks::Add ( IDispatch * Anchor, VARIANT * Address, VARIANT * SubAddress, VARIANT * ScreenTip, VARIANT * TextToDisplay, VARIANT * Target ) {
    struct Hyperlink * _result;
    HRESULT _hr = raw_Add(Anchor, Address, SubAddress, ScreenTip, TextToDisplay, Target, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

//
// interface Hyperlink wrapper method implementations
//

#pragma implementation_key(3588)
inline Word::_ApplicationPtr Word::Hyperlink::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3589)
inline long Word::Hyperlink::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3590)
inline IDispatchPtr Word::Hyperlink::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3591)
inline _bstr_t Word::Hyperlink::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3592)
inline _bstr_t Word::Hyperlink::GetAddressOld ( ) {
    BSTR _result;
    HRESULT _hr = get_AddressOld(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3593)
inline enum Office::MsoHyperlinkType Word::Hyperlink::GetType ( ) {
    enum Office::MsoHyperlinkType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3594)
inline Word::RangePtr Word::Hyperlink::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3595)
inline Word::ShapePtr Word::Hyperlink::GetShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3596)
inline _bstr_t Word::Hyperlink::GetSubAddressOld ( ) {
    BSTR _result;
    HRESULT _hr = get_SubAddressOld(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3597)
inline VARIANT_BOOL Word::Hyperlink::GetExtraInfoRequired ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExtraInfoRequired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3598)
inline HRESULT Word::Hyperlink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3599)
inline HRESULT Word::Hyperlink::Follow ( VARIANT * NewWindow, VARIANT * AddHistory, VARIANT * ExtraInfo, VARIANT * Method, VARIANT * HeaderInfo ) {
    HRESULT _hr = raw_Follow(NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3600)
inline HRESULT Word::Hyperlink::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3601)
inline HRESULT Word::Hyperlink::CreateNewDocument ( _bstr_t FileName, VARIANT_BOOL EditNow, VARIANT_BOOL Overwrite ) {
    HRESULT _hr = raw_CreateNewDocument(FileName, EditNow, Overwrite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3602)
inline _bstr_t Word::Hyperlink::GetAddress ( ) {
    BSTR _result;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3603)
inline void Word::Hyperlink::PutAddress ( _bstr_t prop ) {
    HRESULT _hr = put_Address(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3604)
inline _bstr_t Word::Hyperlink::GetSubAddress ( ) {
    BSTR _result;
    HRESULT _hr = get_SubAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3605)
inline void Word::Hyperlink::PutSubAddress ( _bstr_t prop ) {
    HRESULT _hr = put_SubAddress(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3606)
inline _bstr_t Word::Hyperlink::GetEmailSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_EmailSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3607)
inline void Word::Hyperlink::PutEmailSubject ( _bstr_t prop ) {
    HRESULT _hr = put_EmailSubject(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3608)
inline _bstr_t Word::Hyperlink::GetScreenTip ( ) {
    BSTR _result;
    HRESULT _hr = get_ScreenTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3609)
inline void Word::Hyperlink::PutScreenTip ( _bstr_t prop ) {
    HRESULT _hr = put_ScreenTip(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3610)
inline _bstr_t Word::Hyperlink::GetTextToDisplay ( ) {
    BSTR _result;
    HRESULT _hr = get_TextToDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3611)
inline void Word::Hyperlink::PutTextToDisplay ( _bstr_t prop ) {
    HRESULT _hr = put_TextToDisplay(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3612)
inline _bstr_t Word::Hyperlink::GetTarget ( ) {
    BSTR _result;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3613)
inline void Word::Hyperlink::PutTarget ( _bstr_t prop ) {
    HRESULT _hr = put_Target(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Shapes wrapper method implementations
//

#pragma implementation_key(3614)
inline Word::_ApplicationPtr Word::Shapes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3615)
inline long Word::Shapes::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3616)
inline IDispatchPtr Word::Shapes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3617)
inline long Word::Shapes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3618)
inline IUnknownPtr Word::Shapes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3619)
inline Word::ShapePtr Word::Shapes::Item ( VARIANT * Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3620)
inline Word::ShapePtr Word::Shapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3621)
inline Word::ShapePtr Word::Shapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3622)
inline Word::ShapePtr Word::Shapes::AddCurve ( VARIANT * SafeArrayOfPoints, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3623)
inline Word::ShapePtr Word::Shapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3624)
inline Word::ShapePtr Word::Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3625)
inline Word::ShapePtr Word::Shapes::AddPicture ( _bstr_t FileName, VARIANT * LinkToFile, VARIANT * SaveWithDocument, VARIANT * Left, VARIANT * Top, VARIANT * Width, VARIANT * Height, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3626)
inline Word::ShapePtr Word::Shapes::AddPolyline ( VARIANT * SafeArrayOfPoints, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3627)
inline Word::ShapePtr Word::Shapes::AddShape ( long Type, float Left, float Top, float Width, float Height, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3628)
inline Word::ShapePtr Word::Shapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3629)
inline Word::ShapePtr Word::Shapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3630)
inline Word::FreeformBuilderPtr Word::Shapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(3631)
inline Word::ShapeRangePtr Word::Shapes::Range ( VARIANT * Index ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3632)
inline HRESULT Word::Shapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3633)
inline Word::ShapePtr Word::Shapes::AddOLEObject ( VARIANT * ClassType, VARIANT * FileName, VARIANT * LinkToFile, VARIANT * DisplayAsIcon, VARIANT * IconFileName, VARIANT * IconIndex, VARIANT * IconLabel, VARIANT * Left, VARIANT * Top, VARIANT * Width, VARIANT * Height, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddOLEObject(ClassType, FileName, LinkToFile, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Left, Top, Width, Height, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3634)
inline Word::ShapePtr Word::Shapes::AddOLEControl ( VARIANT * ClassType, VARIANT * Left, VARIANT * Top, VARIANT * Width, VARIANT * Height, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddOLEControl(ClassType, Left, Top, Width, Height, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3635)
inline Word::ShapePtr Word::Shapes::AddDiagram ( enum Office::MsoDiagramType Type, float Left, float Top, float Width, float Height, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddDiagram(Type, Left, Top, Width, Height, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3636)
inline Word::ShapePtr Word::Shapes::AddCanvas ( float Left, float Top, float Width, float Height, VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCanvas(Left, Top, Width, Height, Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface ShapeRange wrapper method implementations
//

#pragma implementation_key(3637)
inline Word::_ApplicationPtr Word::ShapeRange::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3638)
inline long Word::ShapeRange::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3639)
inline IDispatchPtr Word::ShapeRange::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3640)
inline long Word::ShapeRange::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3641)
inline IUnknownPtr Word::ShapeRange::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3642)
inline Word::AdjustmentsPtr Word::ShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(3643)
inline enum Office::MsoAutoShapeType Word::ShapeRange::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3644)
inline void Word::ShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType prop ) {
    HRESULT _hr = put_AutoShapeType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3645)
inline Word::CalloutFormatPtr Word::ShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(3646)
inline long Word::ShapeRange::GetConnectionSiteCount ( ) {
    long _result;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3647)
inline enum Office::MsoTriState Word::ShapeRange::GetConnector ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3648)
inline Word::ConnectorFormatPtr Word::ShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(3649)
inline Word::FillFormatPtr Word::ShapeRange::GetFill ( ) {
    struct FillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(3650)
inline Word::GroupShapesPtr Word::ShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(3651)
inline float Word::ShapeRange::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3652)
inline void Word::ShapeRange::PutHeight ( float prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3653)
inline enum Office::MsoTriState Word::ShapeRange::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3654)
inline float Word::ShapeRange::GetLeft ( ) {
    float _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3655)
inline void Word::ShapeRange::PutLeft ( float prop ) {
    HRESULT _hr = put_Left(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3656)
inline Word::LineFormatPtr Word::ShapeRange::GetLine ( ) {
    struct LineFormat * _result;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(3657)
inline enum Office::MsoTriState Word::ShapeRange::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3658)
inline void Word::ShapeRange::PutLockAspectRatio ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_LockAspectRatio(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3659)
inline _bstr_t Word::ShapeRange::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3660)
inline void Word::ShapeRange::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3661)
inline Word::ShapeNodesPtr Word::ShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(3662)
inline float Word::ShapeRange::GetRotation ( ) {
    float _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3663)
inline void Word::ShapeRange::PutRotation ( float prop ) {
    HRESULT _hr = put_Rotation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3664)
inline Word::PictureFormatPtr Word::ShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(3665)
inline Word::ShadowFormatPtr Word::ShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(3666)
inline Word::TextEffectFormatPtr Word::ShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(3667)
inline Word::TextFramePtr Word::ShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(3668)
inline Word::ThreeDFormatPtr Word::ShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(3669)
inline float Word::ShapeRange::GetTop ( ) {
    float _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3670)
inline void Word::ShapeRange::PutTop ( float prop ) {
    HRESULT _hr = put_Top(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3671)
inline enum Office::MsoShapeType Word::ShapeRange::GetType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3672)
inline enum Office::MsoTriState Word::ShapeRange::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3673)
inline _variant_t Word::ShapeRange::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3674)
inline enum Office::MsoTriState Word::ShapeRange::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3675)
inline void Word::ShapeRange::PutVisible ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3676)
inline float Word::ShapeRange::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3677)
inline void Word::ShapeRange::PutWidth ( float prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3678)
inline long Word::ShapeRange::GetZOrderPosition ( ) {
    long _result;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3679)
inline Word::HyperlinkPtr Word::ShapeRange::GetHyperlink ( ) {
    struct Hyperlink * _result;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(3680)
inline enum WdRelativeHorizontalPosition Word::ShapeRange::GetRelativeHorizontalPosition ( ) {
    enum WdRelativeHorizontalPosition _result;
    HRESULT _hr = get_RelativeHorizontalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3681)
inline void Word::ShapeRange::PutRelativeHorizontalPosition ( enum WdRelativeHorizontalPosition prop ) {
    HRESULT _hr = put_RelativeHorizontalPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3682)
inline enum WdRelativeVerticalPosition Word::ShapeRange::GetRelativeVerticalPosition ( ) {
    enum WdRelativeVerticalPosition _result;
    HRESULT _hr = get_RelativeVerticalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3683)
inline void Word::ShapeRange::PutRelativeVerticalPosition ( enum WdRelativeVerticalPosition prop ) {
    HRESULT _hr = put_RelativeVerticalPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3684)
inline long Word::ShapeRange::GetLockAnchor ( ) {
    long _result;
    HRESULT _hr = get_LockAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3685)
inline void Word::ShapeRange::PutLockAnchor ( long prop ) {
    HRESULT _hr = put_LockAnchor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3686)
inline Word::WrapFormatPtr Word::ShapeRange::GetWrapFormat ( ) {
    struct WrapFormat * _result;
    HRESULT _hr = get_WrapFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WrapFormatPtr(_result, false);
}

#pragma implementation_key(3687)
inline Word::RangePtr Word::ShapeRange::GetAnchor ( ) {
    struct Range * _result;
    HRESULT _hr = get_Anchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3688)
inline Word::ShapePtr Word::ShapeRange::Item ( VARIANT * Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3689)
inline HRESULT Word::ShapeRange::Align ( enum Office::MsoAlignCmd Align, long RelativeTo ) {
    HRESULT _hr = raw_Align(Align, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3690)
inline HRESULT Word::ShapeRange::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3691)
inline HRESULT Word::ShapeRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3692)
inline HRESULT Word::ShapeRange::Distribute ( enum Office::MsoDistributeCmd Distribute, long RelativeTo ) {
    HRESULT _hr = raw_Distribute(Distribute, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3693)
inline Word::ShapeRangePtr Word::ShapeRange::Duplicate ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3694)
inline HRESULT Word::ShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3695)
inline HRESULT Word::ShapeRange::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3696)
inline HRESULT Word::ShapeRange::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3697)
inline HRESULT Word::ShapeRange::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3698)
inline Word::ShapePtr Word::ShapeRange::Group ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3699)
inline HRESULT Word::ShapeRange::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3700)
inline Word::ShapePtr Word::ShapeRange::Regroup ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_Regroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3701)
inline HRESULT Word::ShapeRange::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3702)
inline HRESULT Word::ShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom Scale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3703)
inline HRESULT Word::ShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom Scale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3704)
inline HRESULT Word::ShapeRange::Select ( VARIANT * Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3705)
inline HRESULT Word::ShapeRange::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3706)
inline Word::ShapeRangePtr Word::ShapeRange::Ungroup ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3707)
inline HRESULT Word::ShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3708)
inline Word::FramePtr Word::ShapeRange::ConvertToFrame ( ) {
    struct Frame * _result;
    HRESULT _hr = raw_ConvertToFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramePtr(_result, false);
}

#pragma implementation_key(3709)
inline Word::InlineShapePtr Word::ShapeRange::ConvertToInlineShape ( ) {
    struct InlineShape * _result;
    HRESULT _hr = raw_ConvertToInlineShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

#pragma implementation_key(3710)
inline HRESULT Word::ShapeRange::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3711)
inline _bstr_t Word::ShapeRange::GetAlternativeText ( ) {
    BSTR _result;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3712)
inline void Word::ShapeRange::PutAlternativeText ( _bstr_t prop ) {
    HRESULT _hr = put_AlternativeText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3713)
inline enum Office::MsoTriState Word::ShapeRange::GetHasDiagram ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3714)
inline Office::IMsoDiagramPtr Word::ShapeRange::GetDiagram ( ) {
    struct Office::IMsoDiagram * _result;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IMsoDiagramPtr(_result, false);
}

#pragma implementation_key(3715)
inline enum Office::MsoTriState Word::ShapeRange::GetHasDiagramNode ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3716)
inline Word::DiagramNodePtr Word::ShapeRange::GetDiagramNode ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3717)
inline enum Office::MsoTriState Word::ShapeRange::GetChild ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3718)
inline Word::ShapePtr Word::ShapeRange::GetParentGroup ( ) {
    struct Shape * _result;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3719)
inline Word::CanvasShapesPtr Word::ShapeRange::GetCanvasItems ( ) {
    struct CanvasShapes * _result;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

#pragma implementation_key(3720)
inline long Word::ShapeRange::GetID ( ) {
    long _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3721)
inline HRESULT Word::ShapeRange::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3722)
inline HRESULT Word::ShapeRange::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3723)
inline HRESULT Word::ShapeRange::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3724)
inline HRESULT Word::ShapeRange::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3725)
inline void Word::ShapeRange::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface GroupShapes wrapper method implementations
//

#pragma implementation_key(3726)
inline Word::_ApplicationPtr Word::GroupShapes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3727)
inline long Word::GroupShapes::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3728)
inline IDispatchPtr Word::GroupShapes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3729)
inline long Word::GroupShapes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3730)
inline IUnknownPtr Word::GroupShapes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3731)
inline Word::ShapePtr Word::GroupShapes::Item ( VARIANT * Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3732)
inline Word::ShapeRangePtr Word::GroupShapes::Range ( VARIANT * Index ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

//
// interface Shape wrapper method implementations
//

#pragma implementation_key(3733)
inline Word::_ApplicationPtr Word::Shape::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3734)
inline long Word::Shape::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3735)
inline IDispatchPtr Word::Shape::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3736)
inline Word::AdjustmentsPtr Word::Shape::GetAdjustments ( ) {
    struct Adjustments * _result;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(3737)
inline enum Office::MsoAutoShapeType Word::Shape::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3738)
inline void Word::Shape::PutAutoShapeType ( enum Office::MsoAutoShapeType prop ) {
    HRESULT _hr = put_AutoShapeType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3739)
inline Word::CalloutFormatPtr Word::Shape::GetCallout ( ) {
    struct CalloutFormat * _result;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(3740)
inline long Word::Shape::GetConnectionSiteCount ( ) {
    long _result;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3741)
inline enum Office::MsoTriState Word::Shape::GetConnector ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3742)
inline Word::ConnectorFormatPtr Word::Shape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(3743)
inline Word::FillFormatPtr Word::Shape::GetFill ( ) {
    struct FillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(3744)
inline Word::GroupShapesPtr Word::Shape::GetGroupItems ( ) {
    struct GroupShapes * _result;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(3745)
inline float Word::Shape::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3746)
inline void Word::Shape::PutHeight ( float prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3747)
inline enum Office::MsoTriState Word::Shape::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3748)
inline float Word::Shape::GetLeft ( ) {
    float _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3749)
inline void Word::Shape::PutLeft ( float prop ) {
    HRESULT _hr = put_Left(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3750)
inline Word::LineFormatPtr Word::Shape::GetLine ( ) {
    struct LineFormat * _result;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(3751)
inline enum Office::MsoTriState Word::Shape::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3752)
inline void Word::Shape::PutLockAspectRatio ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_LockAspectRatio(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3753)
inline _bstr_t Word::Shape::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3754)
inline void Word::Shape::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3755)
inline Word::ShapeNodesPtr Word::Shape::GetNodes ( ) {
    struct ShapeNodes * _result;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(3756)
inline float Word::Shape::GetRotation ( ) {
    float _result;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3757)
inline void Word::Shape::PutRotation ( float prop ) {
    HRESULT _hr = put_Rotation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3758)
inline Word::PictureFormatPtr Word::Shape::GetPictureFormat ( ) {
    struct PictureFormat * _result;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(3759)
inline Word::ShadowFormatPtr Word::Shape::GetShadow ( ) {
    struct ShadowFormat * _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(3760)
inline Word::TextEffectFormatPtr Word::Shape::GetTextEffect ( ) {
    struct TextEffectFormat * _result;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(3761)
inline Word::TextFramePtr Word::Shape::GetTextFrame ( ) {
    struct TextFrame * _result;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(3762)
inline Word::ThreeDFormatPtr Word::Shape::GetThreeD ( ) {
    struct ThreeDFormat * _result;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(3763)
inline float Word::Shape::GetTop ( ) {
    float _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3764)
inline void Word::Shape::PutTop ( float prop ) {
    HRESULT _hr = put_Top(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3765)
inline enum Office::MsoShapeType Word::Shape::GetType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3766)
inline enum Office::MsoTriState Word::Shape::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3767)
inline _variant_t Word::Shape::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3768)
inline enum Office::MsoTriState Word::Shape::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3769)
inline void Word::Shape::PutVisible ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3770)
inline float Word::Shape::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3771)
inline void Word::Shape::PutWidth ( float prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3772)
inline long Word::Shape::GetZOrderPosition ( ) {
    long _result;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3773)
inline Word::HyperlinkPtr Word::Shape::GetHyperlink ( ) {
    struct Hyperlink * _result;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(3774)
inline enum WdRelativeHorizontalPosition Word::Shape::GetRelativeHorizontalPosition ( ) {
    enum WdRelativeHorizontalPosition _result;
    HRESULT _hr = get_RelativeHorizontalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3775)
inline void Word::Shape::PutRelativeHorizontalPosition ( enum WdRelativeHorizontalPosition prop ) {
    HRESULT _hr = put_RelativeHorizontalPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3776)
inline enum WdRelativeVerticalPosition Word::Shape::GetRelativeVerticalPosition ( ) {
    enum WdRelativeVerticalPosition _result;
    HRESULT _hr = get_RelativeVerticalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3777)
inline void Word::Shape::PutRelativeVerticalPosition ( enum WdRelativeVerticalPosition prop ) {
    HRESULT _hr = put_RelativeVerticalPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3778)
inline long Word::Shape::GetLockAnchor ( ) {
    long _result;
    HRESULT _hr = get_LockAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3779)
inline void Word::Shape::PutLockAnchor ( long prop ) {
    HRESULT _hr = put_LockAnchor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3780)
inline Word::WrapFormatPtr Word::Shape::GetWrapFormat ( ) {
    struct WrapFormat * _result;
    HRESULT _hr = get_WrapFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WrapFormatPtr(_result, false);
}

#pragma implementation_key(3781)
inline Word::OLEFormatPtr Word::Shape::GetOLEFormat ( ) {
    struct OLEFormat * _result;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

#pragma implementation_key(3782)
inline Word::RangePtr Word::Shape::GetAnchor ( ) {
    struct Range * _result;
    HRESULT _hr = get_Anchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3783)
inline Word::LinkFormatPtr Word::Shape::GetLinkFormat ( ) {
    struct LinkFormat * _result;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

#pragma implementation_key(3784)
inline HRESULT Word::Shape::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3785)
inline HRESULT Word::Shape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3786)
inline Word::ShapePtr Word::Shape::Duplicate ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3787)
inline HRESULT Word::Shape::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3788)
inline HRESULT Word::Shape::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3789)
inline HRESULT Word::Shape::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3790)
inline HRESULT Word::Shape::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3791)
inline HRESULT Word::Shape::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3792)
inline HRESULT Word::Shape::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3793)
inline HRESULT Word::Shape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom Scale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3794)
inline HRESULT Word::Shape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom Scale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, Scale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3795)
inline HRESULT Word::Shape::Select ( VARIANT * Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3796)
inline HRESULT Word::Shape::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3797)
inline Word::ShapeRangePtr Word::Shape::Ungroup ( ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3798)
inline HRESULT Word::Shape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3799)
inline Word::InlineShapePtr Word::Shape::ConvertToInlineShape ( ) {
    struct InlineShape * _result;
    HRESULT _hr = raw_ConvertToInlineShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

#pragma implementation_key(3800)
inline Word::FramePtr Word::Shape::ConvertToFrame ( ) {
    struct Frame * _result;
    HRESULT _hr = raw_ConvertToFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramePtr(_result, false);
}

#pragma implementation_key(3801)
inline HRESULT Word::Shape::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3802)
inline _bstr_t Word::Shape::GetAlternativeText ( ) {
    BSTR _result;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3803)
inline void Word::Shape::PutAlternativeText ( _bstr_t prop ) {
    HRESULT _hr = put_AlternativeText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3804)
inline Office::ScriptPtr Word::Shape::GetScript ( ) {
    struct Office::Script * _result;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptPtr(_result, false);
}

#pragma implementation_key(3805)
inline enum Office::MsoTriState Word::Shape::GetHasDiagram ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3806)
inline Office::IMsoDiagramPtr Word::Shape::GetDiagram ( ) {
    struct Office::IMsoDiagram * _result;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IMsoDiagramPtr(_result, false);
}

#pragma implementation_key(3807)
inline enum Office::MsoTriState Word::Shape::GetHasDiagramNode ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3808)
inline Word::DiagramNodePtr Word::Shape::GetDiagramNode ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3809)
inline enum Office::MsoTriState Word::Shape::GetChild ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3810)
inline Word::ShapePtr Word::Shape::GetParentGroup ( ) {
    struct Shape * _result;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3811)
inline Word::CanvasShapesPtr Word::Shape::GetCanvasItems ( ) {
    struct CanvasShapes * _result;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

#pragma implementation_key(3812)
inline long Word::Shape::GetID ( ) {
    long _result;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3813)
inline HRESULT Word::Shape::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3814)
inline HRESULT Word::Shape::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3815)
inline HRESULT Word::Shape::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3816)
inline HRESULT Word::Shape::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3817)
inline void Word::Shape::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextFrame wrapper method implementations
//

#pragma implementation_key(3818)
inline Word::_ApplicationPtr Word::TextFrame::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3819)
inline long Word::TextFrame::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3820)
inline Word::ShapePtr Word::TextFrame::GetParent ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3821)
inline float Word::TextFrame::GetMarginBottom ( ) {
    float _result;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3822)
inline void Word::TextFrame::PutMarginBottom ( float prop ) {
    HRESULT _hr = put_MarginBottom(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3823)
inline float Word::TextFrame::GetMarginLeft ( ) {
    float _result;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3824)
inline void Word::TextFrame::PutMarginLeft ( float prop ) {
    HRESULT _hr = put_MarginLeft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3825)
inline float Word::TextFrame::GetMarginRight ( ) {
    float _result;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3826)
inline void Word::TextFrame::PutMarginRight ( float prop ) {
    HRESULT _hr = put_MarginRight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3827)
inline float Word::TextFrame::GetMarginTop ( ) {
    float _result;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3828)
inline void Word::TextFrame::PutMarginTop ( float prop ) {
    HRESULT _hr = put_MarginTop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3829)
inline enum Office::MsoTextOrientation Word::TextFrame::GetOrientation ( ) {
    enum Office::MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3830)
inline void Word::TextFrame::PutOrientation ( enum Office::MsoTextOrientation prop ) {
    HRESULT _hr = put_Orientation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3831)
inline Word::RangePtr Word::TextFrame::GetTextRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3832)
inline Word::RangePtr Word::TextFrame::GetContainingRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_ContainingRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(3833)
inline Word::TextFramePtr Word::TextFrame::GetNext ( ) {
    struct TextFrame * _result;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(3834)
inline void Word::TextFrame::PutNext ( struct TextFrame * prop ) {
    HRESULT _hr = put_Next(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3835)
inline Word::TextFramePtr Word::TextFrame::GetPrevious ( ) {
    struct TextFrame * _result;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(3836)
inline void Word::TextFrame::PutPrevious ( struct TextFrame * prop ) {
    HRESULT _hr = put_Previous(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3837)
inline VARIANT_BOOL Word::TextFrame::GetOverflowing ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Overflowing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3838)
inline long Word::TextFrame::GetHasText ( ) {
    long _result;
    HRESULT _hr = get_HasText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3839)
inline HRESULT Word::TextFrame::BreakForwardLink ( ) {
    HRESULT _hr = raw_BreakForwardLink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3840)
inline VARIANT_BOOL Word::TextFrame::ValidLinkTarget ( struct TextFrame * TargetTextFrame ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_ValidLinkTarget(TargetTextFrame, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3841)
inline long Word::TextFrame::GetAutoSize ( ) {
    long _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3842)
inline void Word::TextFrame::PutAutoSize ( long prop ) {
    HRESULT _hr = put_AutoSize(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3843)
inline long Word::TextFrame::GetWordWrap ( ) {
    long _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3844)
inline void Word::TextFrame::PutWordWrap ( long prop ) {
    HRESULT _hr = put_WordWrap(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _LetterContent wrapper method implementations
//

#pragma implementation_key(3845)
inline Word::_ApplicationPtr Word::_LetterContent::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3846)
inline long Word::_LetterContent::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3847)
inline IDispatchPtr Word::_LetterContent::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3848)
inline Word::_LetterContentPtr Word::_LetterContent::GetDuplicate ( ) {
    struct _LetterContent * _result;
    HRESULT _hr = get_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _LetterContentPtr(_result, false);
}

#pragma implementation_key(3849)
inline _bstr_t Word::_LetterContent::GetDateFormat ( ) {
    BSTR _result;
    HRESULT _hr = get_DateFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3850)
inline void Word::_LetterContent::PutDateFormat ( _bstr_t prop ) {
    HRESULT _hr = put_DateFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3851)
inline VARIANT_BOOL Word::_LetterContent::GetIncludeHeaderFooter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IncludeHeaderFooter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3852)
inline void Word::_LetterContent::PutIncludeHeaderFooter ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IncludeHeaderFooter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3853)
inline _bstr_t Word::_LetterContent::GetPageDesign ( ) {
    BSTR _result;
    HRESULT _hr = get_PageDesign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3854)
inline void Word::_LetterContent::PutPageDesign ( _bstr_t prop ) {
    HRESULT _hr = put_PageDesign(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3855)
inline enum WdLetterStyle Word::_LetterContent::GetLetterStyle ( ) {
    enum WdLetterStyle _result;
    HRESULT _hr = get_LetterStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3856)
inline void Word::_LetterContent::PutLetterStyle ( enum WdLetterStyle prop ) {
    HRESULT _hr = put_LetterStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3857)
inline VARIANT_BOOL Word::_LetterContent::GetLetterhead ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Letterhead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3858)
inline void Word::_LetterContent::PutLetterhead ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Letterhead(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3859)
inline enum WdLetterheadLocation Word::_LetterContent::GetLetterheadLocation ( ) {
    enum WdLetterheadLocation _result;
    HRESULT _hr = get_LetterheadLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3860)
inline void Word::_LetterContent::PutLetterheadLocation ( enum WdLetterheadLocation prop ) {
    HRESULT _hr = put_LetterheadLocation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3861)
inline float Word::_LetterContent::GetLetterheadSize ( ) {
    float _result;
    HRESULT _hr = get_LetterheadSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3862)
inline void Word::_LetterContent::PutLetterheadSize ( float prop ) {
    HRESULT _hr = put_LetterheadSize(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3863)
inline _bstr_t Word::_LetterContent::GetRecipientName ( ) {
    BSTR _result;
    HRESULT _hr = get_RecipientName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3864)
inline void Word::_LetterContent::PutRecipientName ( _bstr_t prop ) {
    HRESULT _hr = put_RecipientName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3865)
inline _bstr_t Word::_LetterContent::GetRecipientAddress ( ) {
    BSTR _result;
    HRESULT _hr = get_RecipientAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3866)
inline void Word::_LetterContent::PutRecipientAddress ( _bstr_t prop ) {
    HRESULT _hr = put_RecipientAddress(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3867)
inline _bstr_t Word::_LetterContent::GetSalutation ( ) {
    BSTR _result;
    HRESULT _hr = get_Salutation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3868)
inline void Word::_LetterContent::PutSalutation ( _bstr_t prop ) {
    HRESULT _hr = put_Salutation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3869)
inline enum WdSalutationType Word::_LetterContent::GetSalutationType ( ) {
    enum WdSalutationType _result;
    HRESULT _hr = get_SalutationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3870)
inline void Word::_LetterContent::PutSalutationType ( enum WdSalutationType prop ) {
    HRESULT _hr = put_SalutationType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3871)
inline _bstr_t Word::_LetterContent::GetRecipientReference ( ) {
    BSTR _result;
    HRESULT _hr = get_RecipientReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3872)
inline void Word::_LetterContent::PutRecipientReference ( _bstr_t prop ) {
    HRESULT _hr = put_RecipientReference(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3873)
inline _bstr_t Word::_LetterContent::GetMailingInstructions ( ) {
    BSTR _result;
    HRESULT _hr = get_MailingInstructions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3874)
inline void Word::_LetterContent::PutMailingInstructions ( _bstr_t prop ) {
    HRESULT _hr = put_MailingInstructions(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3875)
inline _bstr_t Word::_LetterContent::GetAttentionLine ( ) {
    BSTR _result;
    HRESULT _hr = get_AttentionLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3876)
inline void Word::_LetterContent::PutAttentionLine ( _bstr_t prop ) {
    HRESULT _hr = put_AttentionLine(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3877)
inline _bstr_t Word::_LetterContent::GetSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3878)
inline void Word::_LetterContent::PutSubject ( _bstr_t prop ) {
    HRESULT _hr = put_Subject(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3879)
inline long Word::_LetterContent::GetEnclosureNumber ( ) {
    long _result;
    HRESULT _hr = get_EnclosureNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3880)
inline void Word::_LetterContent::PutEnclosureNumber ( long prop ) {
    HRESULT _hr = put_EnclosureNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3881)
inline _bstr_t Word::_LetterContent::GetCCList ( ) {
    BSTR _result;
    HRESULT _hr = get_CCList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3882)
inline void Word::_LetterContent::PutCCList ( _bstr_t prop ) {
    HRESULT _hr = put_CCList(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3883)
inline _bstr_t Word::_LetterContent::GetReturnAddress ( ) {
    BSTR _result;
    HRESULT _hr = get_ReturnAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3884)
inline void Word::_LetterContent::PutReturnAddress ( _bstr_t prop ) {
    HRESULT _hr = put_ReturnAddress(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3885)
inline _bstr_t Word::_LetterContent::GetSenderName ( ) {
    BSTR _result;
    HRESULT _hr = get_SenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3886)
inline void Word::_LetterContent::PutSenderName ( _bstr_t prop ) {
    HRESULT _hr = put_SenderName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3887)
inline _bstr_t Word::_LetterContent::GetClosing ( ) {
    BSTR _result;
    HRESULT _hr = get_Closing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3888)
inline void Word::_LetterContent::PutClosing ( _bstr_t prop ) {
    HRESULT _hr = put_Closing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3889)
inline _bstr_t Word::_LetterContent::GetSenderCompany ( ) {
    BSTR _result;
    HRESULT _hr = get_SenderCompany(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3890)
inline void Word::_LetterContent::PutSenderCompany ( _bstr_t prop ) {
    HRESULT _hr = put_SenderCompany(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3891)
inline _bstr_t Word::_LetterContent::GetSenderJobTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_SenderJobTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3892)
inline void Word::_LetterContent::PutSenderJobTitle ( _bstr_t prop ) {
    HRESULT _hr = put_SenderJobTitle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3893)
inline _bstr_t Word::_LetterContent::GetSenderInitials ( ) {
    BSTR _result;
    HRESULT _hr = get_SenderInitials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3894)
inline void Word::_LetterContent::PutSenderInitials ( _bstr_t prop ) {
    HRESULT _hr = put_SenderInitials(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3895)
inline VARIANT_BOOL Word::_LetterContent::GetInfoBlock ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_InfoBlock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3896)
inline void Word::_LetterContent::PutInfoBlock ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_InfoBlock(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3897)
inline _bstr_t Word::_LetterContent::GetRecipientCode ( ) {
    BSTR _result;
    HRESULT _hr = get_RecipientCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3898)
inline void Word::_LetterContent::PutRecipientCode ( _bstr_t prop ) {
    HRESULT _hr = put_RecipientCode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3899)
inline enum WdSalutationGender Word::_LetterContent::GetRecipientGender ( ) {
    enum WdSalutationGender _result;
    HRESULT _hr = get_RecipientGender(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3900)
inline void Word::_LetterContent::PutRecipientGender ( enum WdSalutationGender prop ) {
    HRESULT _hr = put_RecipientGender(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3901)
inline _bstr_t Word::_LetterContent::GetReturnAddressShortForm ( ) {
    BSTR _result;
    HRESULT _hr = get_ReturnAddressShortForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3902)
inline void Word::_LetterContent::PutReturnAddressShortForm ( _bstr_t prop ) {
    HRESULT _hr = put_ReturnAddressShortForm(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3903)
inline _bstr_t Word::_LetterContent::GetSenderCity ( ) {
    BSTR _result;
    HRESULT _hr = get_SenderCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3904)
inline void Word::_LetterContent::PutSenderCity ( _bstr_t prop ) {
    HRESULT _hr = put_SenderCity(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3905)
inline _bstr_t Word::_LetterContent::GetSenderCode ( ) {
    BSTR _result;
    HRESULT _hr = get_SenderCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3906)
inline void Word::_LetterContent::PutSenderCode ( _bstr_t prop ) {
    HRESULT _hr = put_SenderCode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3907)
inline enum WdSalutationGender Word::_LetterContent::GetSenderGender ( ) {
    enum WdSalutationGender _result;
    HRESULT _hr = get_SenderGender(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3908)
inline void Word::_LetterContent::PutSenderGender ( enum WdSalutationGender prop ) {
    HRESULT _hr = put_SenderGender(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3909)
inline _bstr_t Word::_LetterContent::GetSenderReference ( ) {
    BSTR _result;
    HRESULT _hr = get_SenderReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3910)
inline void Word::_LetterContent::PutSenderReference ( _bstr_t prop ) {
    HRESULT _hr = put_SenderReference(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface View wrapper method implementations
//

#pragma implementation_key(3911)
inline Word::_ApplicationPtr Word::View::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(3912)
inline long Word::View::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3913)
inline IDispatchPtr Word::View::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3914)
inline enum WdViewType Word::View::GetType ( ) {
    enum WdViewType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3915)
inline void Word::View::PutType ( enum WdViewType prop ) {
    HRESULT _hr = put_Type(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3916)
inline VARIANT_BOOL Word::View::GetFullScreen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3917)
inline void Word::View::PutFullScreen ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_FullScreen(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3918)
inline VARIANT_BOOL Word::View::GetDraft ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Draft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3919)
inline void Word::View::PutDraft ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Draft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3920)
inline VARIANT_BOOL Word::View::GetShowAll ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3921)
inline void Word::View::PutShowAll ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowAll(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3922)
inline VARIANT_BOOL Word::View::GetShowFieldCodes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowFieldCodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3923)
inline void Word::View::PutShowFieldCodes ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowFieldCodes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3924)
inline VARIANT_BOOL Word::View::GetMailMergeDataView ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MailMergeDataView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3925)
inline void Word::View::PutMailMergeDataView ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MailMergeDataView(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3926)
inline VARIANT_BOOL Word::View::GetMagnifier ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Magnifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3927)
inline void Word::View::PutMagnifier ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Magnifier(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3928)
inline VARIANT_BOOL Word::View::GetShowFirstLineOnly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowFirstLineOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3929)
inline void Word::View::PutShowFirstLineOnly ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowFirstLineOnly(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3930)
inline VARIANT_BOOL Word::View::GetShowFormat ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3931)
inline void Word::View::PutShowFormat ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3932)
inline Word::ZoomPtr Word::View::GetZoom ( ) {
    struct Zoom * _result;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ZoomPtr(_result, false);
}

#pragma implementation_key(3933)
inline VARIANT_BOOL Word::View::GetShowObjectAnchors ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowObjectAnchors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3934)
inline void Word::View::PutShowObjectAnchors ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowObjectAnchors(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3935)
inline VARIANT_BOOL Word::View::GetShowTextBoundaries ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowTextBoundaries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3936)
inline void Word::View::PutShowTextBoundaries ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowTextBoundaries(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3937)
inline VARIANT_BOOL Word::View::GetShowHighlight ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowHighlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3938)
inline void Word::View::PutShowHighlight ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowHighlight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3939)
inline VARIANT_BOOL Word::View::GetShowDrawings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowDrawings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3940)
inline void Word::View::PutShowDrawings ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowDrawings(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3941)
inline VARIANT_BOOL Word::View::GetShowTabs ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowTabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3942)
inline void Word::View::PutShowTabs ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowTabs(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3943)
inline VARIANT_BOOL Word::View::GetShowSpaces ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowSpaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3944)
inline void Word::View::PutShowSpaces ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowSpaces(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3945)
inline VARIANT_BOOL Word::View::GetShowParagraphs ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowParagraphs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3946)
inline void Word::View::PutShowParagraphs ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowParagraphs(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3947)
inline VARIANT_BOOL Word::View::GetShowHyphens ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowHyphens(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3948)
inline void Word::View::PutShowHyphens ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowHyphens(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3949)
inline VARIANT_BOOL Word::View::GetShowHiddenText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowHiddenText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3950)
inline void Word::View::PutShowHiddenText ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowHiddenText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3951)
inline VARIANT_BOOL Word::View::GetWrapToWindow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WrapToWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3952)
inline void Word::View::PutWrapToWindow ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_WrapToWindow(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3953)
inline VARIANT_BOOL Word::View::GetShowPicturePlaceHolders ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowPicturePlaceHolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3954)
inline void Word::View::PutShowPicturePlaceHolders ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowPicturePlaceHolders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3955)
inline VARIANT_BOOL Word::View::GetShowBookmarks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowBookmarks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3956)
inline void Word::View::PutShowBookmarks ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowBookmarks(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3957)
inline enum WdFieldShading Word::View::GetFieldShading ( ) {
    enum WdFieldShading _result;
    HRESULT _hr = get_FieldShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3958)
inline void Word::View::PutFieldShading ( enum WdFieldShading prop ) {
    HRESULT _hr = put_FieldShading(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3959)
inline VARIANT_BOOL Word::View::GetShowAnimation ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3960)
inline void Word::View::PutShowAnimation ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowAnimation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3961)
inline VARIANT_BOOL Word::View::GetTableGridlines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TableGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3962)
inline void Word::View::PutTableGridlines ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_TableGridlines(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3963)
inline long Word::View::GetEnlargeFontsLessThan ( ) {
    long _result;
    HRESULT _hr = get_EnlargeFontsLessThan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3964)
inline void Word::View::PutEnlargeFontsLessThan ( long prop ) {
    HRESULT _hr = put_EnlargeFontsLessThan(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3965)
inline VARIANT_BOOL Word::View::GetShowMainTextLayer ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowMainTextLayer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3966)
inline void Word::View::PutShowMainTextLayer ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowMainTextLayer(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3967)
inline enum WdSeekView Word::View::GetSeekView ( ) {
    enum WdSeekView _result;
    HRESULT _hr = get_SeekView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3968)
inline void Word::View::PutSeekView ( enum WdSeekView prop ) {
    HRESULT _hr = put_SeekView(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3969)
inline enum WdSpecialPane Word::View::GetSplitSpecial ( ) {
    enum WdSpecialPane _result;
    HRESULT _hr = get_SplitSpecial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3970)
inline void Word::View::PutSplitSpecial ( enum WdSpecialPane prop ) {
    HRESULT _hr = put_SplitSpecial(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3971)
inline long Word::View::GetBrowseToWindow ( ) {
    long _result;
    HRESULT _hr = get_BrowseToWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3972)
inline void Word::View::PutBrowseToWindow ( long prop ) {
    HRESULT _hr = put_BrowseToWindow(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3973)
inline VARIANT_BOOL Word::View::GetShowOptionalBreaks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowOptionalBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3974)
inline void Word::View::PutShowOptionalBreaks ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowOptionalBreaks(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3975)
inline HRESULT Word::View::CollapseOutline ( VARIANT * Range ) {
    HRESULT _hr = raw_CollapseOutline(Range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3976)
inline HRESULT Word::View::ExpandOutline ( VARIANT * Range ) {
    HRESULT _hr = raw_ExpandOutline(Range);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3977)
inline HRESULT Word::View::ShowAllHeadings ( ) {
    HRESULT _hr = raw_ShowAllHeadings();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3978)
inline HRESULT Word::View::ShowHeading ( long Level ) {
    HRESULT _hr = raw_ShowHeading(Level);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3979)
inline HRESULT Word::View::PreviousHeaderFooter ( ) {
    HRESULT _hr = raw_PreviousHeaderFooter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3980)
inline HRESULT Word::View::NextHeaderFooter ( ) {
    HRESULT _hr = raw_NextHeaderFooter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3981)
inline VARIANT_BOOL Word::View::GetDisplayPageBoundaries ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayPageBoundaries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3982)
inline void Word::View::PutDisplayPageBoundaries ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayPageBoundaries(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3983)
inline VARIANT_BOOL Word::View::GetDisplaySmartTags ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplaySmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3984)
inline void Word::View::PutDisplaySmartTags ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplaySmartTags(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3985)
inline VARIANT_BOOL Word::View::GetShowRevisionsAndComments ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowRevisionsAndComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3986)
inline void Word::View::PutShowRevisionsAndComments ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowRevisionsAndComments(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3987)
inline VARIANT_BOOL Word::View::GetShowComments ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3988)
inline void Word::View::PutShowComments ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowComments(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3989)
inline VARIANT_BOOL Word::View::GetShowInsertionsAndDeletions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowInsertionsAndDeletions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3990)
inline void Word::View::PutShowInsertionsAndDeletions ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowInsertionsAndDeletions(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3991)
inline VARIANT_BOOL Word::View::GetShowFormatChanges ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowFormatChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3992)
inline void Word::View::PutShowFormatChanges ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowFormatChanges(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3993)
inline enum WdRevisionsView Word::View::GetRevisionsView ( ) {
    enum WdRevisionsView _result;
    HRESULT _hr = get_RevisionsView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3994)
inline void Word::View::PutRevisionsView ( enum WdRevisionsView prop ) {
    HRESULT _hr = put_RevisionsView(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3995)
inline enum WdRevisionsMode Word::View::GetRevisionsMode ( ) {
    enum WdRevisionsMode _result;
    HRESULT _hr = get_RevisionsMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3996)
inline void Word::View::PutRevisionsMode ( enum WdRevisionsMode prop ) {
    HRESULT _hr = put_RevisionsMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3997)
inline float Word::View::GetRevisionsBalloonWidth ( ) {
    float _result;
    HRESULT _hr = get_RevisionsBalloonWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3998)
inline void Word::View::PutRevisionsBalloonWidth ( float prop ) {
    HRESULT _hr = put_RevisionsBalloonWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3999)
inline enum WdRevisionsBalloonWidthType Word::View::GetRevisionsBalloonWidthType ( ) {
    enum WdRevisionsBalloonWidthType _result;
    HRESULT _hr = get_RevisionsBalloonWidthType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4000)
inline void Word::View::PutRevisionsBalloonWidthType ( enum WdRevisionsBalloonWidthType prop ) {
    HRESULT _hr = put_RevisionsBalloonWidthType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4001)
inline enum WdRevisionsBalloonMargin Word::View::GetRevisionsBalloonSide ( ) {
    enum WdRevisionsBalloonMargin _result;
    HRESULT _hr = get_RevisionsBalloonSide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4002)
inline void Word::View::PutRevisionsBalloonSide ( enum WdRevisionsBalloonMargin prop ) {
    HRESULT _hr = put_RevisionsBalloonSide(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4003)
inline Word::ReviewersPtr Word::View::GetReviewers ( ) {
    struct Reviewers * _result;
    HRESULT _hr = get_Reviewers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ReviewersPtr(_result, false);
}

#pragma implementation_key(4004)
inline VARIANT_BOOL Word::View::GetRevisionsBalloonShowConnectingLines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RevisionsBalloonShowConnectingLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4005)
inline void Word::View::PutRevisionsBalloonShowConnectingLines ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_RevisionsBalloonShowConnectingLines(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Zoom wrapper method implementations
//

#pragma implementation_key(4006)
inline Word::_ApplicationPtr Word::Zoom::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4007)
inline long Word::Zoom::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4008)
inline IDispatchPtr Word::Zoom::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4009)
inline long Word::Zoom::GetPercentage ( ) {
    long _result;
    HRESULT _hr = get_Percentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4010)
inline void Word::Zoom::PutPercentage ( long prop ) {
    HRESULT _hr = put_Percentage(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4011)
inline enum WdPageFit Word::Zoom::GetPageFit ( ) {
    enum WdPageFit _result;
    HRESULT _hr = get_PageFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4012)
inline void Word::Zoom::PutPageFit ( enum WdPageFit prop ) {
    HRESULT _hr = put_PageFit(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4013)
inline long Word::Zoom::GetPageRows ( ) {
    long _result;
    HRESULT _hr = get_PageRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4014)
inline void Word::Zoom::PutPageRows ( long prop ) {
    HRESULT _hr = put_PageRows(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4015)
inline long Word::Zoom::GetPageColumns ( ) {
    long _result;
    HRESULT _hr = get_PageColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4016)
inline void Word::Zoom::PutPageColumns ( long prop ) {
    HRESULT _hr = put_PageColumns(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Zooms wrapper method implementations
//

#pragma implementation_key(4017)
inline Word::_ApplicationPtr Word::Zooms::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4018)
inline long Word::Zooms::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4019)
inline IDispatchPtr Word::Zooms::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4020)
inline Word::ZoomPtr Word::Zooms::Item ( enum WdViewType Index ) {
    struct Zoom * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ZoomPtr(_result, false);
}

//
// interface InlineShape wrapper method implementations
//

#pragma implementation_key(4021)
inline Word::_ApplicationPtr Word::InlineShape::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4022)
inline long Word::InlineShape::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4023)
inline IDispatchPtr Word::InlineShape::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4024)
inline Word::BordersPtr Word::InlineShape::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(4025)
inline void Word::InlineShape::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4026)
inline Word::RangePtr Word::InlineShape::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(4027)
inline Word::LinkFormatPtr Word::InlineShape::GetLinkFormat ( ) {
    struct LinkFormat * _result;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

#pragma implementation_key(4028)
inline Word::FieldPtr Word::InlineShape::GetField ( ) {
    struct Field * _result;
    HRESULT _hr = get_Field(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FieldPtr(_result, false);
}

#pragma implementation_key(4029)
inline Word::OLEFormatPtr Word::InlineShape::GetOLEFormat ( ) {
    struct OLEFormat * _result;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

#pragma implementation_key(4030)
inline enum WdInlineShapeType Word::InlineShape::GetType ( ) {
    enum WdInlineShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4031)
inline Word::HyperlinkPtr Word::InlineShape::GetHyperlink ( ) {
    struct Hyperlink * _result;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(4032)
inline float Word::InlineShape::GetHeight ( ) {
    float _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4033)
inline void Word::InlineShape::PutHeight ( float prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4034)
inline float Word::InlineShape::GetWidth ( ) {
    float _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4035)
inline void Word::InlineShape::PutWidth ( float prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4036)
inline float Word::InlineShape::GetScaleHeight ( ) {
    float _result;
    HRESULT _hr = get_ScaleHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4037)
inline void Word::InlineShape::PutScaleHeight ( float prop ) {
    HRESULT _hr = put_ScaleHeight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4038)
inline float Word::InlineShape::GetScaleWidth ( ) {
    float _result;
    HRESULT _hr = get_ScaleWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4039)
inline void Word::InlineShape::PutScaleWidth ( float prop ) {
    HRESULT _hr = put_ScaleWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4040)
inline enum Office::MsoTriState Word::InlineShape::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4041)
inline void Word::InlineShape::PutLockAspectRatio ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_LockAspectRatio(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4042)
inline Word::LineFormatPtr Word::InlineShape::GetLine ( ) {
    struct LineFormat * _result;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(4043)
inline Word::FillFormatPtr Word::InlineShape::GetFill ( ) {
    struct FillFormat * _result;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(4044)
inline Word::PictureFormatPtr Word::InlineShape::GetPictureFormat ( ) {
    struct PictureFormat * _result;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(4045)
inline void Word::InlineShape::PutPictureFormat ( struct PictureFormat * prop ) {
    HRESULT _hr = put_PictureFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4046)
inline HRESULT Word::InlineShape::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4047)
inline HRESULT Word::InlineShape::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4048)
inline HRESULT Word::InlineShape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4049)
inline HRESULT Word::InlineShape::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4050)
inline Word::ShapePtr Word::InlineShape::ConvertToShape ( ) {
    struct Shape * _result;
    HRESULT _hr = raw_ConvertToShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(4051)
inline Word::HorizontalLineFormatPtr Word::InlineShape::GetHorizontalLineFormat ( ) {
    struct HorizontalLineFormat * _result;
    HRESULT _hr = get_HorizontalLineFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HorizontalLineFormatPtr(_result, false);
}

#pragma implementation_key(4052)
inline Office::ScriptPtr Word::InlineShape::GetScript ( ) {
    struct Office::Script * _result;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptPtr(_result, false);
}

#pragma implementation_key(4053)
inline long Word::InlineShape::GetOWSAnchor ( ) {
    long _result;
    HRESULT _hr = get_OWSAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4054)
inline Word::TextEffectFormatPtr Word::InlineShape::GetTextEffect ( ) {
    struct TextEffectFormat * _result;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(4055)
inline void Word::InlineShape::PutTextEffect ( struct TextEffectFormat * prop ) {
    HRESULT _hr = put_TextEffect(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4056)
inline _bstr_t Word::InlineShape::GetAlternativeText ( ) {
    BSTR _result;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4057)
inline void Word::InlineShape::PutAlternativeText ( _bstr_t prop ) {
    HRESULT _hr = put_AlternativeText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4058)
inline VARIANT_BOOL Word::InlineShape::GetIsPictureBullet ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsPictureBullet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface InlineShapes wrapper method implementations
//

#pragma implementation_key(4059)
inline Word::_ApplicationPtr Word::InlineShapes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4060)
inline long Word::InlineShapes::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4061)
inline IDispatchPtr Word::InlineShapes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4062)
inline long Word::InlineShapes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4063)
inline IUnknownPtr Word::InlineShapes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4064)
inline Word::InlineShapePtr Word::InlineShapes::Item ( long Index ) {
    struct InlineShape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

#pragma implementation_key(4065)
inline Word::InlineShapePtr Word::InlineShapes::AddPicture ( _bstr_t FileName, VARIANT * LinkToFile, VARIANT * SaveWithDocument, VARIANT * Range ) {
    struct InlineShape * _result;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

#pragma implementation_key(4066)
inline Word::InlineShapePtr Word::InlineShapes::AddOLEObject ( VARIANT * ClassType, VARIANT * FileName, VARIANT * LinkToFile, VARIANT * DisplayAsIcon, VARIANT * IconFileName, VARIANT * IconIndex, VARIANT * IconLabel, VARIANT * Range ) {
    struct InlineShape * _result;
    HRESULT _hr = raw_AddOLEObject(ClassType, FileName, LinkToFile, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

#pragma implementation_key(4067)
inline Word::InlineShapePtr Word::InlineShapes::AddOLEControl ( VARIANT * ClassType, VARIANT * Range ) {
    struct InlineShape * _result;
    HRESULT _hr = raw_AddOLEControl(ClassType, Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

#pragma implementation_key(4068)
inline Word::InlineShapePtr Word::InlineShapes::New ( struct Range * Range ) {
    struct InlineShape * _result;
    HRESULT _hr = raw_New(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

#pragma implementation_key(4069)
inline Word::InlineShapePtr Word::InlineShapes::AddHorizontalLine ( _bstr_t FileName, VARIANT * Range ) {
    struct InlineShape * _result;
    HRESULT _hr = raw_AddHorizontalLine(FileName, Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

#pragma implementation_key(4070)
inline Word::InlineShapePtr Word::InlineShapes::AddHorizontalLineStandard ( VARIANT * Range ) {
    struct InlineShape * _result;
    HRESULT _hr = raw_AddHorizontalLineStandard(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

#pragma implementation_key(4071)
inline Word::InlineShapePtr Word::InlineShapes::AddPictureBullet ( _bstr_t FileName, VARIANT * Range ) {
    struct InlineShape * _result;
    HRESULT _hr = raw_AddPictureBullet(FileName, Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return InlineShapePtr(_result, false);
}

//
// interface SpellingSuggestions wrapper method implementations
//

#pragma implementation_key(4072)
inline Word::_ApplicationPtr Word::SpellingSuggestions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4073)
inline long Word::SpellingSuggestions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4074)
inline IDispatchPtr Word::SpellingSuggestions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4075)
inline IUnknownPtr Word::SpellingSuggestions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4076)
inline long Word::SpellingSuggestions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4077)
inline enum WdSpellingErrorType Word::SpellingSuggestions::GetSpellingErrorType ( ) {
    enum WdSpellingErrorType _result;
    HRESULT _hr = get_SpellingErrorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4078)
inline Word::SpellingSuggestionPtr Word::SpellingSuggestions::Item ( long Index ) {
    struct SpellingSuggestion * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SpellingSuggestionPtr(_result, false);
}

//
// interface SpellingSuggestion wrapper method implementations
//

#pragma implementation_key(4079)
inline Word::_ApplicationPtr Word::SpellingSuggestion::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4080)
inline long Word::SpellingSuggestion::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4081)
inline IDispatchPtr Word::SpellingSuggestion::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4082)
inline _bstr_t Word::SpellingSuggestion::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Dictionaries wrapper method implementations
//

#pragma implementation_key(4083)
inline Word::_ApplicationPtr Word::Dictionaries::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4084)
inline long Word::Dictionaries::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4085)
inline IDispatchPtr Word::Dictionaries::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4086)
inline IUnknownPtr Word::Dictionaries::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4087)
inline long Word::Dictionaries::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4088)
inline long Word::Dictionaries::GetMaximum ( ) {
    long _result;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4089)
inline Word::DictionaryPtr Word::Dictionaries::GetActiveCustomDictionary ( ) {
    struct Dictionary * _result;
    HRESULT _hr = get_ActiveCustomDictionary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionaryPtr(_result, false);
}

#pragma implementation_key(4090)
inline void Word::Dictionaries::PutActiveCustomDictionary ( struct Dictionary * prop ) {
    HRESULT _hr = put_ActiveCustomDictionary(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4091)
inline Word::DictionaryPtr Word::Dictionaries::Item ( VARIANT * Index ) {
    struct Dictionary * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionaryPtr(_result, false);
}

#pragma implementation_key(4092)
inline Word::DictionaryPtr Word::Dictionaries::Add ( _bstr_t FileName ) {
    struct Dictionary * _result;
    HRESULT _hr = raw_Add(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionaryPtr(_result, false);
}

#pragma implementation_key(4093)
inline HRESULT Word::Dictionaries::ClearAll ( ) {
    HRESULT _hr = raw_ClearAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface HangulHanjaConversionDictionaries wrapper method implementations
//

#pragma implementation_key(4094)
inline Word::_ApplicationPtr Word::HangulHanjaConversionDictionaries::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4095)
inline long Word::HangulHanjaConversionDictionaries::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4096)
inline IDispatchPtr Word::HangulHanjaConversionDictionaries::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4097)
inline IUnknownPtr Word::HangulHanjaConversionDictionaries::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4098)
inline long Word::HangulHanjaConversionDictionaries::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4099)
inline long Word::HangulHanjaConversionDictionaries::GetMaximum ( ) {
    long _result;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4100)
inline Word::DictionaryPtr Word::HangulHanjaConversionDictionaries::GetActiveCustomDictionary ( ) {
    struct Dictionary * _result;
    HRESULT _hr = get_ActiveCustomDictionary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionaryPtr(_result, false);
}

#pragma implementation_key(4101)
inline void Word::HangulHanjaConversionDictionaries::PutActiveCustomDictionary ( struct Dictionary * prop ) {
    HRESULT _hr = put_ActiveCustomDictionary(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4102)
inline Word::DictionaryPtr Word::HangulHanjaConversionDictionaries::GetBuiltinDictionary ( ) {
    struct Dictionary * _result;
    HRESULT _hr = get_BuiltinDictionary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionaryPtr(_result, false);
}

#pragma implementation_key(4103)
inline Word::DictionaryPtr Word::HangulHanjaConversionDictionaries::Item ( VARIANT * Index ) {
    struct Dictionary * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionaryPtr(_result, false);
}

#pragma implementation_key(4104)
inline Word::DictionaryPtr Word::HangulHanjaConversionDictionaries::Add ( _bstr_t FileName ) {
    struct Dictionary * _result;
    HRESULT _hr = raw_Add(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DictionaryPtr(_result, false);
}

#pragma implementation_key(4105)
inline HRESULT Word::HangulHanjaConversionDictionaries::ClearAll ( ) {
    HRESULT _hr = raw_ClearAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Dictionary wrapper method implementations
//

#pragma implementation_key(4106)
inline Word::_ApplicationPtr Word::Dictionary::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4107)
inline long Word::Dictionary::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4108)
inline IDispatchPtr Word::Dictionary::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4109)
inline _bstr_t Word::Dictionary::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4110)
inline _bstr_t Word::Dictionary::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4111)
inline enum WdLanguageID Word::Dictionary::GetLanguageID ( ) {
    enum WdLanguageID _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4112)
inline void Word::Dictionary::PutLanguageID ( enum WdLanguageID prop ) {
    HRESULT _hr = put_LanguageID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4113)
inline VARIANT_BOOL Word::Dictionary::GetReadOnly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4114)
inline enum WdDictionaryType Word::Dictionary::GetType ( ) {
    enum WdDictionaryType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4115)
inline VARIANT_BOOL Word::Dictionary::GetLanguageSpecific ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LanguageSpecific(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4116)
inline void Word::Dictionary::PutLanguageSpecific ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_LanguageSpecific(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4117)
inline HRESULT Word::Dictionary::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ReadabilityStatistics wrapper method implementations
//

#pragma implementation_key(4118)
inline Word::_ApplicationPtr Word::ReadabilityStatistics::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4119)
inline long Word::ReadabilityStatistics::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4120)
inline IDispatchPtr Word::ReadabilityStatistics::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4121)
inline IUnknownPtr Word::ReadabilityStatistics::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4122)
inline long Word::ReadabilityStatistics::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4123)
inline Word::ReadabilityStatisticPtr Word::ReadabilityStatistics::Item ( VARIANT * Index ) {
    struct ReadabilityStatistic * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ReadabilityStatisticPtr(_result, false);
}

//
// interface ReadabilityStatistic wrapper method implementations
//

#pragma implementation_key(4124)
inline Word::_ApplicationPtr Word::ReadabilityStatistic::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4125)
inline long Word::ReadabilityStatistic::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4126)
inline IDispatchPtr Word::ReadabilityStatistic::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4127)
inline _bstr_t Word::ReadabilityStatistic::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4128)
inline float Word::ReadabilityStatistic::GetValue ( ) {
    float _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Versions wrapper method implementations
//

#pragma implementation_key(4129)
inline Word::_ApplicationPtr Word::Versions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4130)
inline long Word::Versions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4131)
inline IDispatchPtr Word::Versions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4132)
inline IUnknownPtr Word::Versions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4133)
inline long Word::Versions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4134)
inline enum WdAutoVersions Word::Versions::GetAutoVersion ( ) {
    enum WdAutoVersions _result;
    HRESULT _hr = get_AutoVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4135)
inline void Word::Versions::PutAutoVersion ( enum WdAutoVersions prop ) {
    HRESULT _hr = put_AutoVersion(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4136)
inline Word::VersionPtr Word::Versions::Item ( long Index ) {
    struct Version * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VersionPtr(_result, false);
}

#pragma implementation_key(4137)
inline HRESULT Word::Versions::Save ( VARIANT * Comment ) {
    HRESULT _hr = raw_Save(Comment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Version wrapper method implementations
//

#pragma implementation_key(4138)
inline Word::_ApplicationPtr Word::Version::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4139)
inline long Word::Version::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4140)
inline IDispatchPtr Word::Version::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4141)
inline _bstr_t Word::Version::GetSavedBy ( ) {
    BSTR _result;
    HRESULT _hr = get_SavedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4142)
inline _bstr_t Word::Version::GetComment ( ) {
    BSTR _result;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4143)
inline DATE Word::Version::GetDate ( ) {
    DATE _result;
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4144)
inline long Word::Version::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4145)
inline HRESULT Word::Version::OpenOld ( ) {
    HRESULT _hr = raw_OpenOld();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4146)
inline HRESULT Word::Version::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4147)
inline Word::_DocumentPtr Word::Version::Open ( ) {
    struct _Document * _result;
    HRESULT _hr = raw_Open(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _DocumentPtr(_result, false);
}

//
// interface Options wrapper method implementations
//

#pragma implementation_key(4148)
inline Word::_ApplicationPtr Word::Options::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4149)
inline long Word::Options::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4150)
inline IDispatchPtr Word::Options::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4151)
inline VARIANT_BOOL Word::Options::GetAllowAccentedUppercase ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowAccentedUppercase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4152)
inline void Word::Options::PutAllowAccentedUppercase ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AllowAccentedUppercase(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4153)
inline VARIANT_BOOL Word::Options::GetWPHelp ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WPHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4154)
inline void Word::Options::PutWPHelp ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_WPHelp(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4155)
inline VARIANT_BOOL Word::Options::GetWPDocNavKeys ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WPDocNavKeys(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4156)
inline void Word::Options::PutWPDocNavKeys ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_WPDocNavKeys(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4157)
inline VARIANT_BOOL Word::Options::GetPagination ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Pagination(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4158)
inline void Word::Options::PutPagination ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Pagination(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4159)
inline VARIANT_BOOL Word::Options::GetBlueScreen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BlueScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4160)
inline void Word::Options::PutBlueScreen ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_BlueScreen(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4161)
inline VARIANT_BOOL Word::Options::GetEnableSound ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableSound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4162)
inline void Word::Options::PutEnableSound ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_EnableSound(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4163)
inline VARIANT_BOOL Word::Options::GetConfirmConversions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ConfirmConversions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4164)
inline void Word::Options::PutConfirmConversions ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ConfirmConversions(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4165)
inline VARIANT_BOOL Word::Options::GetUpdateLinksAtOpen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UpdateLinksAtOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4166)
inline void Word::Options::PutUpdateLinksAtOpen ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UpdateLinksAtOpen(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4167)
inline VARIANT_BOOL Word::Options::GetSendMailAttach ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SendMailAttach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4168)
inline void Word::Options::PutSendMailAttach ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SendMailAttach(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4169)
inline enum WdMeasurementUnits Word::Options::GetMeasurementUnit ( ) {
    enum WdMeasurementUnits _result;
    HRESULT _hr = get_MeasurementUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4170)
inline void Word::Options::PutMeasurementUnit ( enum WdMeasurementUnits prop ) {
    HRESULT _hr = put_MeasurementUnit(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4171)
inline long Word::Options::GetButtonFieldClicks ( ) {
    long _result;
    HRESULT _hr = get_ButtonFieldClicks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4172)
inline void Word::Options::PutButtonFieldClicks ( long prop ) {
    HRESULT _hr = put_ButtonFieldClicks(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4173)
inline VARIANT_BOOL Word::Options::GetShortMenuNames ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShortMenuNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4174)
inline void Word::Options::PutShortMenuNames ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShortMenuNames(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4175)
inline VARIANT_BOOL Word::Options::GetRTFInClipboard ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RTFInClipboard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4176)
inline void Word::Options::PutRTFInClipboard ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_RTFInClipboard(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4177)
inline VARIANT_BOOL Word::Options::GetUpdateFieldsAtPrint ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UpdateFieldsAtPrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4178)
inline void Word::Options::PutUpdateFieldsAtPrint ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UpdateFieldsAtPrint(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4179)
inline VARIANT_BOOL Word::Options::GetPrintProperties ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4180)
inline void Word::Options::PutPrintProperties ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintProperties(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4181)
inline VARIANT_BOOL Word::Options::GetPrintFieldCodes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintFieldCodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4182)
inline void Word::Options::PutPrintFieldCodes ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintFieldCodes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4183)
inline VARIANT_BOOL Word::Options::GetPrintComments ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4184)
inline void Word::Options::PutPrintComments ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintComments(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4185)
inline VARIANT_BOOL Word::Options::GetPrintHiddenText ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintHiddenText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4186)
inline void Word::Options::PutPrintHiddenText ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintHiddenText(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4187)
inline VARIANT_BOOL Word::Options::GetEnvelopeFeederInstalled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnvelopeFeederInstalled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4188)
inline VARIANT_BOOL Word::Options::GetUpdateLinksAtPrint ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UpdateLinksAtPrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4189)
inline void Word::Options::PutUpdateLinksAtPrint ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UpdateLinksAtPrint(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4190)
inline VARIANT_BOOL Word::Options::GetPrintBackground ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4191)
inline void Word::Options::PutPrintBackground ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintBackground(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4192)
inline VARIANT_BOOL Word::Options::GetPrintDrawingObjects ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintDrawingObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4193)
inline void Word::Options::PutPrintDrawingObjects ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintDrawingObjects(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4194)
inline _bstr_t Word::Options::GetDefaultTray ( ) {
    BSTR _result;
    HRESULT _hr = get_DefaultTray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4195)
inline void Word::Options::PutDefaultTray ( _bstr_t prop ) {
    HRESULT _hr = put_DefaultTray(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4196)
inline long Word::Options::GetDefaultTrayID ( ) {
    long _result;
    HRESULT _hr = get_DefaultTrayID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4197)
inline void Word::Options::PutDefaultTrayID ( long prop ) {
    HRESULT _hr = put_DefaultTrayID(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4198)
inline VARIANT_BOOL Word::Options::GetCreateBackup ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CreateBackup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4199)
inline void Word::Options::PutCreateBackup ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CreateBackup(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4200)
inline VARIANT_BOOL Word::Options::GetAllowFastSave ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowFastSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4201)
inline void Word::Options::PutAllowFastSave ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AllowFastSave(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4202)
inline VARIANT_BOOL Word::Options::GetSavePropertiesPrompt ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SavePropertiesPrompt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4203)
inline void Word::Options::PutSavePropertiesPrompt ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SavePropertiesPrompt(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4204)
inline VARIANT_BOOL Word::Options::GetSaveNormalPrompt ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SaveNormalPrompt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4205)
inline void Word::Options::PutSaveNormalPrompt ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SaveNormalPrompt(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4206)
inline long Word::Options::GetSaveInterval ( ) {
    long _result;
    HRESULT _hr = get_SaveInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4207)
inline void Word::Options::PutSaveInterval ( long prop ) {
    HRESULT _hr = put_SaveInterval(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4208)
inline VARIANT_BOOL Word::Options::GetBackgroundSave ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BackgroundSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4209)
inline void Word::Options::PutBackgroundSave ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_BackgroundSave(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4210)
inline enum WdInsertedTextMark Word::Options::GetInsertedTextMark ( ) {
    enum WdInsertedTextMark _result;
    HRESULT _hr = get_InsertedTextMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4211)
inline void Word::Options::PutInsertedTextMark ( enum WdInsertedTextMark prop ) {
    HRESULT _hr = put_InsertedTextMark(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4212)
inline enum WdDeletedTextMark Word::Options::GetDeletedTextMark ( ) {
    enum WdDeletedTextMark _result;
    HRESULT _hr = get_DeletedTextMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4213)
inline void Word::Options::PutDeletedTextMark ( enum WdDeletedTextMark prop ) {
    HRESULT _hr = put_DeletedTextMark(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4214)
inline enum WdRevisedLinesMark Word::Options::GetRevisedLinesMark ( ) {
    enum WdRevisedLinesMark _result;
    HRESULT _hr = get_RevisedLinesMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4215)
inline void Word::Options::PutRevisedLinesMark ( enum WdRevisedLinesMark prop ) {
    HRESULT _hr = put_RevisedLinesMark(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4216)
inline enum WdColorIndex Word::Options::GetInsertedTextColor ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_InsertedTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4217)
inline void Word::Options::PutInsertedTextColor ( enum WdColorIndex prop ) {
    HRESULT _hr = put_InsertedTextColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4218)
inline enum WdColorIndex Word::Options::GetDeletedTextColor ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_DeletedTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4219)
inline void Word::Options::PutDeletedTextColor ( enum WdColorIndex prop ) {
    HRESULT _hr = put_DeletedTextColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4220)
inline enum WdColorIndex Word::Options::GetRevisedLinesColor ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_RevisedLinesColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4221)
inline void Word::Options::PutRevisedLinesColor ( enum WdColorIndex prop ) {
    HRESULT _hr = put_RevisedLinesColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4222)
inline _bstr_t Word::Options::GetDefaultFilePath ( enum WdDefaultFilePath Path ) {
    BSTR _result;
    HRESULT _hr = get_DefaultFilePath(Path, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4223)
inline void Word::Options::PutDefaultFilePath ( enum WdDefaultFilePath Path, _bstr_t prop ) {
    HRESULT _hr = put_DefaultFilePath(Path, prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4224)
inline VARIANT_BOOL Word::Options::GetOvertype ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Overtype(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4225)
inline void Word::Options::PutOvertype ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Overtype(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4226)
inline VARIANT_BOOL Word::Options::GetReplaceSelection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReplaceSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4227)
inline void Word::Options::PutReplaceSelection ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ReplaceSelection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4228)
inline VARIANT_BOOL Word::Options::GetAllowDragAndDrop ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowDragAndDrop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4229)
inline void Word::Options::PutAllowDragAndDrop ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AllowDragAndDrop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4230)
inline VARIANT_BOOL Word::Options::GetAutoWordSelection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoWordSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4231)
inline void Word::Options::PutAutoWordSelection ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoWordSelection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4232)
inline VARIANT_BOOL Word::Options::GetINSKeyForPaste ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_INSKeyForPaste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4233)
inline void Word::Options::PutINSKeyForPaste ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_INSKeyForPaste(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4234)
inline VARIANT_BOOL Word::Options::GetSmartCutPaste ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SmartCutPaste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4235)
inline void Word::Options::PutSmartCutPaste ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SmartCutPaste(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4236)
inline VARIANT_BOOL Word::Options::GetTabIndentKey ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TabIndentKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4237)
inline void Word::Options::PutTabIndentKey ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_TabIndentKey(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4238)
inline _bstr_t Word::Options::GetPictureEditor ( ) {
    BSTR _result;
    HRESULT _hr = get_PictureEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4239)
inline void Word::Options::PutPictureEditor ( _bstr_t prop ) {
    HRESULT _hr = put_PictureEditor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4240)
inline VARIANT_BOOL Word::Options::GetAnimateScreenMovements ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AnimateScreenMovements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4241)
inline void Word::Options::PutAnimateScreenMovements ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AnimateScreenMovements(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4242)
inline VARIANT_BOOL Word::Options::GetVirusProtection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_VirusProtection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4243)
inline void Word::Options::PutVirusProtection ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_VirusProtection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4244)
inline enum WdRevisedPropertiesMark Word::Options::GetRevisedPropertiesMark ( ) {
    enum WdRevisedPropertiesMark _result;
    HRESULT _hr = get_RevisedPropertiesMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4245)
inline void Word::Options::PutRevisedPropertiesMark ( enum WdRevisedPropertiesMark prop ) {
    HRESULT _hr = put_RevisedPropertiesMark(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4246)
inline enum WdColorIndex Word::Options::GetRevisedPropertiesColor ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_RevisedPropertiesColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4247)
inline void Word::Options::PutRevisedPropertiesColor ( enum WdColorIndex prop ) {
    HRESULT _hr = put_RevisedPropertiesColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4248)
inline VARIANT_BOOL Word::Options::GetSnapToGrid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SnapToGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4249)
inline void Word::Options::PutSnapToGrid ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SnapToGrid(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4250)
inline VARIANT_BOOL Word::Options::GetSnapToShapes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SnapToShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4251)
inline void Word::Options::PutSnapToShapes ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SnapToShapes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4252)
inline float Word::Options::GetGridDistanceHorizontal ( ) {
    float _result;
    HRESULT _hr = get_GridDistanceHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4253)
inline void Word::Options::PutGridDistanceHorizontal ( float prop ) {
    HRESULT _hr = put_GridDistanceHorizontal(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4254)
inline float Word::Options::GetGridDistanceVertical ( ) {
    float _result;
    HRESULT _hr = get_GridDistanceVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4255)
inline void Word::Options::PutGridDistanceVertical ( float prop ) {
    HRESULT _hr = put_GridDistanceVertical(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4256)
inline float Word::Options::GetGridOriginHorizontal ( ) {
    float _result;
    HRESULT _hr = get_GridOriginHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4257)
inline void Word::Options::PutGridOriginHorizontal ( float prop ) {
    HRESULT _hr = put_GridOriginHorizontal(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4258)
inline float Word::Options::GetGridOriginVertical ( ) {
    float _result;
    HRESULT _hr = get_GridOriginVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4259)
inline void Word::Options::PutGridOriginVertical ( float prop ) {
    HRESULT _hr = put_GridOriginVertical(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4260)
inline VARIANT_BOOL Word::Options::GetInlineConversion ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_InlineConversion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4261)
inline void Word::Options::PutInlineConversion ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_InlineConversion(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4262)
inline VARIANT_BOOL Word::Options::GetIMEAutomaticControl ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IMEAutomaticControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4263)
inline void Word::Options::PutIMEAutomaticControl ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IMEAutomaticControl(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4264)
inline VARIANT_BOOL Word::Options::GetAutoFormatApplyHeadings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatApplyHeadings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4265)
inline void Word::Options::PutAutoFormatApplyHeadings ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatApplyHeadings(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4266)
inline VARIANT_BOOL Word::Options::GetAutoFormatApplyLists ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatApplyLists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4267)
inline void Word::Options::PutAutoFormatApplyLists ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatApplyLists(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4268)
inline VARIANT_BOOL Word::Options::GetAutoFormatApplyBulletedLists ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatApplyBulletedLists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4269)
inline void Word::Options::PutAutoFormatApplyBulletedLists ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatApplyBulletedLists(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4270)
inline VARIANT_BOOL Word::Options::GetAutoFormatApplyOtherParas ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatApplyOtherParas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4271)
inline void Word::Options::PutAutoFormatApplyOtherParas ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatApplyOtherParas(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4272)
inline VARIANT_BOOL Word::Options::GetAutoFormatReplaceQuotes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatReplaceQuotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4273)
inline void Word::Options::PutAutoFormatReplaceQuotes ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatReplaceQuotes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4274)
inline VARIANT_BOOL Word::Options::GetAutoFormatReplaceSymbols ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatReplaceSymbols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4275)
inline void Word::Options::PutAutoFormatReplaceSymbols ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatReplaceSymbols(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4276)
inline VARIANT_BOOL Word::Options::GetAutoFormatReplaceOrdinals ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatReplaceOrdinals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4277)
inline void Word::Options::PutAutoFormatReplaceOrdinals ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatReplaceOrdinals(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4278)
inline VARIANT_BOOL Word::Options::GetAutoFormatReplaceFractions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatReplaceFractions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4279)
inline void Word::Options::PutAutoFormatReplaceFractions ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatReplaceFractions(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4280)
inline VARIANT_BOOL Word::Options::GetAutoFormatReplacePlainTextEmphasis ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatReplacePlainTextEmphasis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4281)
inline void Word::Options::PutAutoFormatReplacePlainTextEmphasis ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatReplacePlainTextEmphasis(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4282)
inline VARIANT_BOOL Word::Options::GetAutoFormatPreserveStyles ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatPreserveStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4283)
inline void Word::Options::PutAutoFormatPreserveStyles ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatPreserveStyles(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4284)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeApplyHeadings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyHeadings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4285)
inline void Word::Options::PutAutoFormatAsYouTypeApplyHeadings ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyHeadings(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4286)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeApplyBorders ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyBorders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4287)
inline void Word::Options::PutAutoFormatAsYouTypeApplyBorders ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyBorders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4288)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeApplyBulletedLists ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyBulletedLists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4289)
inline void Word::Options::PutAutoFormatAsYouTypeApplyBulletedLists ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyBulletedLists(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4290)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeApplyNumberedLists ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyNumberedLists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4291)
inline void Word::Options::PutAutoFormatAsYouTypeApplyNumberedLists ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyNumberedLists(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4292)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeReplaceQuotes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceQuotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4293)
inline void Word::Options::PutAutoFormatAsYouTypeReplaceQuotes ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceQuotes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4294)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeReplaceSymbols ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceSymbols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4295)
inline void Word::Options::PutAutoFormatAsYouTypeReplaceSymbols ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceSymbols(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4296)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeReplaceOrdinals ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceOrdinals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4297)
inline void Word::Options::PutAutoFormatAsYouTypeReplaceOrdinals ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceOrdinals(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4298)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeReplaceFractions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceFractions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4299)
inline void Word::Options::PutAutoFormatAsYouTypeReplaceFractions ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceFractions(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4300)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeReplacePlainTextEmphasis ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplacePlainTextEmphasis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4301)
inline void Word::Options::PutAutoFormatAsYouTypeReplacePlainTextEmphasis ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplacePlainTextEmphasis(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4302)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeFormatListItemBeginning ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeFormatListItemBeginning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4303)
inline void Word::Options::PutAutoFormatAsYouTypeFormatListItemBeginning ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeFormatListItemBeginning(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4304)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeDefineStyles ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeDefineStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4305)
inline void Word::Options::PutAutoFormatAsYouTypeDefineStyles ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeDefineStyles(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4306)
inline VARIANT_BOOL Word::Options::GetAutoFormatPlainTextWordMail ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatPlainTextWordMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4307)
inline void Word::Options::PutAutoFormatPlainTextWordMail ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatPlainTextWordMail(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4308)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeReplaceHyperlinks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceHyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4309)
inline void Word::Options::PutAutoFormatAsYouTypeReplaceHyperlinks ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceHyperlinks(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4310)
inline VARIANT_BOOL Word::Options::GetAutoFormatReplaceHyperlinks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatReplaceHyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4311)
inline void Word::Options::PutAutoFormatReplaceHyperlinks ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatReplaceHyperlinks(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4312)
inline enum WdColorIndex Word::Options::GetDefaultHighlightColorIndex ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_DefaultHighlightColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4313)
inline void Word::Options::PutDefaultHighlightColorIndex ( enum WdColorIndex prop ) {
    HRESULT _hr = put_DefaultHighlightColorIndex(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4314)
inline enum WdLineStyle Word::Options::GetDefaultBorderLineStyle ( ) {
    enum WdLineStyle _result;
    HRESULT _hr = get_DefaultBorderLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4315)
inline void Word::Options::PutDefaultBorderLineStyle ( enum WdLineStyle prop ) {
    HRESULT _hr = put_DefaultBorderLineStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4316)
inline VARIANT_BOOL Word::Options::GetCheckSpellingAsYouType ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CheckSpellingAsYouType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4317)
inline void Word::Options::PutCheckSpellingAsYouType ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CheckSpellingAsYouType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4318)
inline VARIANT_BOOL Word::Options::GetCheckGrammarAsYouType ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CheckGrammarAsYouType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4319)
inline void Word::Options::PutCheckGrammarAsYouType ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CheckGrammarAsYouType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4320)
inline VARIANT_BOOL Word::Options::GetIgnoreInternetAndFileAddresses ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IgnoreInternetAndFileAddresses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4321)
inline void Word::Options::PutIgnoreInternetAndFileAddresses ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IgnoreInternetAndFileAddresses(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4322)
inline VARIANT_BOOL Word::Options::GetShowReadabilityStatistics ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowReadabilityStatistics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4323)
inline void Word::Options::PutShowReadabilityStatistics ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowReadabilityStatistics(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4324)
inline VARIANT_BOOL Word::Options::GetIgnoreUppercase ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IgnoreUppercase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4325)
inline void Word::Options::PutIgnoreUppercase ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IgnoreUppercase(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4326)
inline VARIANT_BOOL Word::Options::GetIgnoreMixedDigits ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IgnoreMixedDigits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4327)
inline void Word::Options::PutIgnoreMixedDigits ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_IgnoreMixedDigits(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4328)
inline VARIANT_BOOL Word::Options::GetSuggestFromMainDictionaryOnly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SuggestFromMainDictionaryOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4329)
inline void Word::Options::PutSuggestFromMainDictionaryOnly ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SuggestFromMainDictionaryOnly(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4330)
inline VARIANT_BOOL Word::Options::GetSuggestSpellingCorrections ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SuggestSpellingCorrections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4331)
inline void Word::Options::PutSuggestSpellingCorrections ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SuggestSpellingCorrections(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4332)
inline enum WdLineWidth Word::Options::GetDefaultBorderLineWidth ( ) {
    enum WdLineWidth _result;
    HRESULT _hr = get_DefaultBorderLineWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4333)
inline void Word::Options::PutDefaultBorderLineWidth ( enum WdLineWidth prop ) {
    HRESULT _hr = put_DefaultBorderLineWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4334)
inline VARIANT_BOOL Word::Options::GetCheckGrammarWithSpelling ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CheckGrammarWithSpelling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4335)
inline void Word::Options::PutCheckGrammarWithSpelling ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CheckGrammarWithSpelling(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4336)
inline enum WdOpenFormat Word::Options::GetDefaultOpenFormat ( ) {
    enum WdOpenFormat _result;
    HRESULT _hr = get_DefaultOpenFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4337)
inline void Word::Options::PutDefaultOpenFormat ( enum WdOpenFormat prop ) {
    HRESULT _hr = put_DefaultOpenFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4338)
inline VARIANT_BOOL Word::Options::GetPrintDraft ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintDraft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4339)
inline void Word::Options::PutPrintDraft ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintDraft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4340)
inline VARIANT_BOOL Word::Options::GetPrintReverse ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintReverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4341)
inline void Word::Options::PutPrintReverse ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintReverse(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4342)
inline VARIANT_BOOL Word::Options::GetMapPaperSize ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MapPaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4343)
inline void Word::Options::PutMapPaperSize ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MapPaperSize(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4344)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeApplyTables ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4345)
inline void Word::Options::PutAutoFormatAsYouTypeApplyTables ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyTables(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4346)
inline VARIANT_BOOL Word::Options::GetAutoFormatApplyFirstIndents ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatApplyFirstIndents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4347)
inline void Word::Options::PutAutoFormatApplyFirstIndents ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatApplyFirstIndents(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4348)
inline VARIANT_BOOL Word::Options::GetAutoFormatMatchParentheses ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatMatchParentheses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4349)
inline void Word::Options::PutAutoFormatMatchParentheses ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatMatchParentheses(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4350)
inline VARIANT_BOOL Word::Options::GetAutoFormatReplaceFarEastDashes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatReplaceFarEastDashes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4351)
inline void Word::Options::PutAutoFormatReplaceFarEastDashes ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatReplaceFarEastDashes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4352)
inline VARIANT_BOOL Word::Options::GetAutoFormatDeleteAutoSpaces ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatDeleteAutoSpaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4353)
inline void Word::Options::PutAutoFormatDeleteAutoSpaces ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatDeleteAutoSpaces(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4354)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeApplyFirstIndents ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyFirstIndents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4355)
inline void Word::Options::PutAutoFormatAsYouTypeApplyFirstIndents ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyFirstIndents(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4356)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeApplyDates ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyDates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4357)
inline void Word::Options::PutAutoFormatAsYouTypeApplyDates ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyDates(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4358)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeApplyClosings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyClosings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4359)
inline void Word::Options::PutAutoFormatAsYouTypeApplyClosings ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyClosings(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4360)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeMatchParentheses ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeMatchParentheses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4361)
inline void Word::Options::PutAutoFormatAsYouTypeMatchParentheses ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeMatchParentheses(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4362)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeReplaceFarEastDashes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceFarEastDashes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4363)
inline void Word::Options::PutAutoFormatAsYouTypeReplaceFarEastDashes ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceFarEastDashes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4364)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeDeleteAutoSpaces ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeDeleteAutoSpaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4365)
inline void Word::Options::PutAutoFormatAsYouTypeDeleteAutoSpaces ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeDeleteAutoSpaces(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4366)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeInsertClosings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeInsertClosings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4367)
inline void Word::Options::PutAutoFormatAsYouTypeInsertClosings ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeInsertClosings(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4368)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeAutoLetterWizard ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeAutoLetterWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4369)
inline void Word::Options::PutAutoFormatAsYouTypeAutoLetterWizard ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeAutoLetterWizard(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4370)
inline VARIANT_BOOL Word::Options::GetAutoFormatAsYouTypeInsertOvers ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeInsertOvers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4371)
inline void Word::Options::PutAutoFormatAsYouTypeInsertOvers ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeInsertOvers(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4372)
inline VARIANT_BOOL Word::Options::GetDisplayGridLines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayGridLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4373)
inline void Word::Options::PutDisplayGridLines ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayGridLines(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4374)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyCase ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyCase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4375)
inline void Word::Options::PutMatchFuzzyCase ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyCase(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4376)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyByte ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyByte(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4377)
inline void Word::Options::PutMatchFuzzyByte ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyByte(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4378)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyHiragana ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyHiragana(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4379)
inline void Word::Options::PutMatchFuzzyHiragana ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyHiragana(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4380)
inline VARIANT_BOOL Word::Options::GetMatchFuzzySmallKana ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzySmallKana(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4381)
inline void Word::Options::PutMatchFuzzySmallKana ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzySmallKana(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4382)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyDash ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyDash(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4383)
inline void Word::Options::PutMatchFuzzyDash ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyDash(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4384)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyIterationMark ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyIterationMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4385)
inline void Word::Options::PutMatchFuzzyIterationMark ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyIterationMark(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4386)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyKanji ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyKanji(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4387)
inline void Word::Options::PutMatchFuzzyKanji ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyKanji(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4388)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyOldKana ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyOldKana(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4389)
inline void Word::Options::PutMatchFuzzyOldKana ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyOldKana(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4390)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyProlongedSoundMark ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyProlongedSoundMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4391)
inline void Word::Options::PutMatchFuzzyProlongedSoundMark ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyProlongedSoundMark(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4392)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyDZ ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyDZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4393)
inline void Word::Options::PutMatchFuzzyDZ ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyDZ(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4394)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyBV ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyBV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4395)
inline void Word::Options::PutMatchFuzzyBV ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyBV(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4396)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyTC ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyTC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4397)
inline void Word::Options::PutMatchFuzzyTC ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyTC(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4398)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyHF ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyHF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4399)
inline void Word::Options::PutMatchFuzzyHF ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyHF(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4400)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyZJ ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyZJ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4401)
inline void Word::Options::PutMatchFuzzyZJ ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyZJ(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4402)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyAY ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyAY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4403)
inline void Word::Options::PutMatchFuzzyAY ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyAY(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4404)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyKiKu ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyKiKu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4405)
inline void Word::Options::PutMatchFuzzyKiKu ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyKiKu(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4406)
inline VARIANT_BOOL Word::Options::GetMatchFuzzyPunctuation ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzyPunctuation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4407)
inline void Word::Options::PutMatchFuzzyPunctuation ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzyPunctuation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4408)
inline VARIANT_BOOL Word::Options::GetMatchFuzzySpace ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MatchFuzzySpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4409)
inline void Word::Options::PutMatchFuzzySpace ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MatchFuzzySpace(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4410)
inline VARIANT_BOOL Word::Options::GetApplyFarEastFontsToAscii ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ApplyFarEastFontsToAscii(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4411)
inline void Word::Options::PutApplyFarEastFontsToAscii ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ApplyFarEastFontsToAscii(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4412)
inline VARIANT_BOOL Word::Options::GetConvertHighAnsiToFarEast ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ConvertHighAnsiToFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4413)
inline void Word::Options::PutConvertHighAnsiToFarEast ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ConvertHighAnsiToFarEast(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4414)
inline VARIANT_BOOL Word::Options::GetPrintOddPagesInAscendingOrder ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintOddPagesInAscendingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4415)
inline void Word::Options::PutPrintOddPagesInAscendingOrder ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintOddPagesInAscendingOrder(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4416)
inline VARIANT_BOOL Word::Options::GetPrintEvenPagesInAscendingOrder ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintEvenPagesInAscendingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4417)
inline void Word::Options::PutPrintEvenPagesInAscendingOrder ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PrintEvenPagesInAscendingOrder(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4418)
inline enum WdColorIndex Word::Options::GetDefaultBorderColorIndex ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_DefaultBorderColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4419)
inline void Word::Options::PutDefaultBorderColorIndex ( enum WdColorIndex prop ) {
    HRESULT _hr = put_DefaultBorderColorIndex(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4420)
inline VARIANT_BOOL Word::Options::GetEnableMisusedWordsDictionary ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableMisusedWordsDictionary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4421)
inline void Word::Options::PutEnableMisusedWordsDictionary ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_EnableMisusedWordsDictionary(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4422)
inline VARIANT_BOOL Word::Options::GetAllowCombinedAuxiliaryForms ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowCombinedAuxiliaryForms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4423)
inline void Word::Options::PutAllowCombinedAuxiliaryForms ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AllowCombinedAuxiliaryForms(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4424)
inline VARIANT_BOOL Word::Options::GetHangulHanjaFastConversion ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HangulHanjaFastConversion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4425)
inline void Word::Options::PutHangulHanjaFastConversion ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_HangulHanjaFastConversion(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4426)
inline VARIANT_BOOL Word::Options::GetCheckHangulEndings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CheckHangulEndings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4427)
inline void Word::Options::PutCheckHangulEndings ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CheckHangulEndings(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4428)
inline VARIANT_BOOL Word::Options::GetEnableHangulHanjaRecentOrdering ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableHangulHanjaRecentOrdering(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4429)
inline void Word::Options::PutEnableHangulHanjaRecentOrdering ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_EnableHangulHanjaRecentOrdering(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4430)
inline enum WdMultipleWordConversionsMode Word::Options::GetMultipleWordConversionsMode ( ) {
    enum WdMultipleWordConversionsMode _result;
    HRESULT _hr = get_MultipleWordConversionsMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4431)
inline void Word::Options::PutMultipleWordConversionsMode ( enum WdMultipleWordConversionsMode prop ) {
    HRESULT _hr = put_MultipleWordConversionsMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4432)
inline HRESULT Word::Options::SetWPHelpOptions ( VARIANT * CommandKeyHelp, VARIANT * DocNavigationKeys, VARIANT * MouseSimulation, VARIANT * DemoGuidance, VARIANT * DemoSpeed, VARIANT * HelpType ) {
    HRESULT _hr = raw_SetWPHelpOptions(CommandKeyHelp, DocNavigationKeys, MouseSimulation, DemoGuidance, DemoSpeed, HelpType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4433)
inline enum WdColor Word::Options::GetDefaultBorderColor ( ) {
    enum WdColor _result;
    HRESULT _hr = get_DefaultBorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4434)
inline void Word::Options::PutDefaultBorderColor ( enum WdColor prop ) {
    HRESULT _hr = put_DefaultBorderColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4435)
inline VARIANT_BOOL Word::Options::GetAllowPixelUnits ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowPixelUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4436)
inline void Word::Options::PutAllowPixelUnits ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AllowPixelUnits(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4437)
inline VARIANT_BOOL Word::Options::GetUseCharacterUnit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseCharacterUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4438)
inline void Word::Options::PutUseCharacterUnit ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseCharacterUnit(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4439)
inline VARIANT_BOOL Word::Options::GetAllowCompoundNounProcessing ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowCompoundNounProcessing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4440)
inline void Word::Options::PutAllowCompoundNounProcessing ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AllowCompoundNounProcessing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4441)
inline VARIANT_BOOL Word::Options::GetAutoKeyboardSwitching ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoKeyboardSwitching(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4442)
inline void Word::Options::PutAutoKeyboardSwitching ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoKeyboardSwitching(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4443)
inline enum WdDocumentViewDirection Word::Options::GetDocumentViewDirection ( ) {
    enum WdDocumentViewDirection _result;
    HRESULT _hr = get_DocumentViewDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4444)
inline void Word::Options::PutDocumentViewDirection ( enum WdDocumentViewDirection prop ) {
    HRESULT _hr = put_DocumentViewDirection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4445)
inline enum WdArabicNumeral Word::Options::GetArabicNumeral ( ) {
    enum WdArabicNumeral _result;
    HRESULT _hr = get_ArabicNumeral(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4446)
inline void Word::Options::PutArabicNumeral ( enum WdArabicNumeral prop ) {
    HRESULT _hr = put_ArabicNumeral(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4447)
inline enum WdMonthNames Word::Options::GetMonthNames ( ) {
    enum WdMonthNames _result;
    HRESULT _hr = get_MonthNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4448)
inline void Word::Options::PutMonthNames ( enum WdMonthNames prop ) {
    HRESULT _hr = put_MonthNames(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4449)
inline enum WdCursorMovement Word::Options::GetCursorMovement ( ) {
    enum WdCursorMovement _result;
    HRESULT _hr = get_CursorMovement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4450)
inline void Word::Options::PutCursorMovement ( enum WdCursorMovement prop ) {
    HRESULT _hr = put_CursorMovement(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4451)
inline enum WdVisualSelection Word::Options::GetVisualSelection ( ) {
    enum WdVisualSelection _result;
    HRESULT _hr = get_VisualSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4452)
inline void Word::Options::PutVisualSelection ( enum WdVisualSelection prop ) {
    HRESULT _hr = put_VisualSelection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4453)
inline VARIANT_BOOL Word::Options::GetShowDiacritics ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowDiacritics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4454)
inline void Word::Options::PutShowDiacritics ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowDiacritics(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4455)
inline VARIANT_BOOL Word::Options::GetShowControlCharacters ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowControlCharacters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4456)
inline void Word::Options::PutShowControlCharacters ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowControlCharacters(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4457)
inline VARIANT_BOOL Word::Options::GetAddControlCharacters ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddControlCharacters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4458)
inline void Word::Options::PutAddControlCharacters ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AddControlCharacters(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4459)
inline VARIANT_BOOL Word::Options::GetAddBiDirectionalMarksWhenSavingTextFile ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddBiDirectionalMarksWhenSavingTextFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4460)
inline void Word::Options::PutAddBiDirectionalMarksWhenSavingTextFile ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AddBiDirectionalMarksWhenSavingTextFile(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4461)
inline VARIANT_BOOL Word::Options::GetStrictInitialAlefHamza ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_StrictInitialAlefHamza(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4462)
inline void Word::Options::PutStrictInitialAlefHamza ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_StrictInitialAlefHamza(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4463)
inline VARIANT_BOOL Word::Options::GetStrictFinalYaa ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_StrictFinalYaa(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4464)
inline void Word::Options::PutStrictFinalYaa ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_StrictFinalYaa(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4465)
inline enum WdHebSpellStart Word::Options::GetHebrewMode ( ) {
    enum WdHebSpellStart _result;
    HRESULT _hr = get_HebrewMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4466)
inline void Word::Options::PutHebrewMode ( enum WdHebSpellStart prop ) {
    HRESULT _hr = put_HebrewMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4467)
inline enum WdAraSpeller Word::Options::GetArabicMode ( ) {
    enum WdAraSpeller _result;
    HRESULT _hr = get_ArabicMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4468)
inline void Word::Options::PutArabicMode ( enum WdAraSpeller prop ) {
    HRESULT _hr = put_ArabicMode(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4469)
inline VARIANT_BOOL Word::Options::GetAllowClickAndTypeMouse ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowClickAndTypeMouse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4470)
inline void Word::Options::PutAllowClickAndTypeMouse ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AllowClickAndTypeMouse(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4471)
inline VARIANT_BOOL Word::Options::GetUseGermanSpellingReform ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseGermanSpellingReform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4472)
inline void Word::Options::PutUseGermanSpellingReform ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseGermanSpellingReform(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4473)
inline enum WdHighAnsiText Word::Options::GetInterpretHighAnsi ( ) {
    enum WdHighAnsiText _result;
    HRESULT _hr = get_InterpretHighAnsi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4474)
inline void Word::Options::PutInterpretHighAnsi ( enum WdHighAnsiText prop ) {
    HRESULT _hr = put_InterpretHighAnsi(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4475)
inline VARIANT_BOOL Word::Options::GetAddHebDoubleQuote ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AddHebDoubleQuote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4476)
inline void Word::Options::PutAddHebDoubleQuote ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AddHebDoubleQuote(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4477)
inline VARIANT_BOOL Word::Options::GetUseDiffDiacColor ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseDiffDiacColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4478)
inline void Word::Options::PutUseDiffDiacColor ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseDiffDiacColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4479)
inline enum WdColor Word::Options::GetDiacriticColorVal ( ) {
    enum WdColor _result;
    HRESULT _hr = get_DiacriticColorVal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4480)
inline void Word::Options::PutDiacriticColorVal ( enum WdColor prop ) {
    HRESULT _hr = put_DiacriticColorVal(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4481)
inline VARIANT_BOOL Word::Options::GetOptimizeForWord97byDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OptimizeForWord97byDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4482)
inline void Word::Options::PutOptimizeForWord97byDefault ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_OptimizeForWord97byDefault(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4483)
inline VARIANT_BOOL Word::Options::GetLocalNetworkFile ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LocalNetworkFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4484)
inline void Word::Options::PutLocalNetworkFile ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_LocalNetworkFile(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4485)
inline VARIANT_BOOL Word::Options::GetTypeNReplace ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TypeNReplace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4486)
inline void Word::Options::PutTypeNReplace ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_TypeNReplace(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4487)
inline VARIANT_BOOL Word::Options::GetSequenceCheck ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SequenceCheck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4488)
inline void Word::Options::PutSequenceCheck ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SequenceCheck(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4489)
inline VARIANT_BOOL Word::Options::GetBackgroundOpen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_BackgroundOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4490)
inline void Word::Options::PutBackgroundOpen ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_BackgroundOpen(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4491)
inline VARIANT_BOOL Word::Options::GetDisableFeaturesbyDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisableFeaturesbyDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4492)
inline void Word::Options::PutDisableFeaturesbyDefault ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisableFeaturesbyDefault(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4493)
inline VARIANT_BOOL Word::Options::GetPasteAdjustWordSpacing ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PasteAdjustWordSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4494)
inline void Word::Options::PutPasteAdjustWordSpacing ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PasteAdjustWordSpacing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4495)
inline VARIANT_BOOL Word::Options::GetPasteAdjustParagraphSpacing ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PasteAdjustParagraphSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4496)
inline void Word::Options::PutPasteAdjustParagraphSpacing ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PasteAdjustParagraphSpacing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4497)
inline VARIANT_BOOL Word::Options::GetPasteAdjustTableFormatting ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PasteAdjustTableFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4498)
inline void Word::Options::PutPasteAdjustTableFormatting ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PasteAdjustTableFormatting(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4499)
inline VARIANT_BOOL Word::Options::GetPasteSmartStyleBehavior ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PasteSmartStyleBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4500)
inline void Word::Options::PutPasteSmartStyleBehavior ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PasteSmartStyleBehavior(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4501)
inline VARIANT_BOOL Word::Options::GetPasteMergeFromPPT ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PasteMergeFromPPT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4502)
inline void Word::Options::PutPasteMergeFromPPT ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PasteMergeFromPPT(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4503)
inline VARIANT_BOOL Word::Options::GetPasteMergeFromXL ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PasteMergeFromXL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4504)
inline void Word::Options::PutPasteMergeFromXL ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PasteMergeFromXL(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4505)
inline VARIANT_BOOL Word::Options::GetCtrlClickHyperlinkToOpen ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CtrlClickHyperlinkToOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4506)
inline void Word::Options::PutCtrlClickHyperlinkToOpen ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CtrlClickHyperlinkToOpen(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4507)
inline enum WdWrapTypeMerged Word::Options::GetPictureWrapType ( ) {
    enum WdWrapTypeMerged _result;
    HRESULT _hr = get_PictureWrapType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4508)
inline void Word::Options::PutPictureWrapType ( enum WdWrapTypeMerged prop ) {
    HRESULT _hr = put_PictureWrapType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4509)
inline enum WdDisableFeaturesIntroducedAfter Word::Options::GetDisableFeaturesIntroducedAfterbyDefault ( ) {
    enum WdDisableFeaturesIntroducedAfter _result;
    HRESULT _hr = get_DisableFeaturesIntroducedAfterbyDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4510)
inline void Word::Options::PutDisableFeaturesIntroducedAfterbyDefault ( enum WdDisableFeaturesIntroducedAfter prop ) {
    HRESULT _hr = put_DisableFeaturesIntroducedAfterbyDefault(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4511)
inline VARIANT_BOOL Word::Options::GetPasteSmartCutPaste ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PasteSmartCutPaste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4512)
inline void Word::Options::PutPasteSmartCutPaste ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PasteSmartCutPaste(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4513)
inline VARIANT_BOOL Word::Options::GetDisplayPasteOptions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayPasteOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4514)
inline void Word::Options::PutDisplayPasteOptions ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplayPasteOptions(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4515)
inline VARIANT_BOOL Word::Options::GetPromptUpdateStyle ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PromptUpdateStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4516)
inline void Word::Options::PutPromptUpdateStyle ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PromptUpdateStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4517)
inline _bstr_t Word::Options::GetDefaultEPostageApp ( ) {
    BSTR _result;
    HRESULT _hr = get_DefaultEPostageApp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4518)
inline void Word::Options::PutDefaultEPostageApp ( _bstr_t prop ) {
    HRESULT _hr = put_DefaultEPostageApp(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4519)
inline enum Office::MsoEncoding Word::Options::GetDefaultTextEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_DefaultTextEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4520)
inline void Word::Options::PutDefaultTextEncoding ( enum Office::MsoEncoding prop ) {
    HRESULT _hr = put_DefaultTextEncoding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4521)
inline VARIANT_BOOL Word::Options::GetLabelSmartTags ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_LabelSmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4522)
inline void Word::Options::PutLabelSmartTags ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_LabelSmartTags(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4523)
inline VARIANT_BOOL Word::Options::GetDisplaySmartTagButtons ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplaySmartTagButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4524)
inline void Word::Options::PutDisplaySmartTagButtons ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_DisplaySmartTagButtons(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4525)
inline VARIANT_BOOL Word::Options::GetWarnBeforeSavingPrintingSendingMarkup ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WarnBeforeSavingPrintingSendingMarkup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4526)
inline void Word::Options::PutWarnBeforeSavingPrintingSendingMarkup ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_WarnBeforeSavingPrintingSendingMarkup(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4527)
inline VARIANT_BOOL Word::Options::GetStoreRSIDOnSave ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_StoreRSIDOnSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4528)
inline void Word::Options::PutStoreRSIDOnSave ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_StoreRSIDOnSave(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4529)
inline VARIANT_BOOL Word::Options::GetShowFormatError ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowFormatError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4530)
inline void Word::Options::PutShowFormatError ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_ShowFormatError(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4531)
inline VARIANT_BOOL Word::Options::GetFormatScanning ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FormatScanning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4532)
inline void Word::Options::PutFormatScanning ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_FormatScanning(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4533)
inline VARIANT_BOOL Word::Options::GetPasteMergeLists ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PasteMergeLists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4534)
inline void Word::Options::PutPasteMergeLists ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_PasteMergeLists(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4535)
inline VARIANT_BOOL Word::Options::GetAutoCreateNewDrawings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoCreateNewDrawings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4536)
inline void Word::Options::PutAutoCreateNewDrawings ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoCreateNewDrawings(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4537)
inline VARIANT_BOOL Word::Options::GetSmartParaSelection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SmartParaSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4538)
inline void Word::Options::PutSmartParaSelection ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SmartParaSelection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4539)
inline enum WdRevisionsBalloonPrintOrientation Word::Options::GetRevisionsBalloonPrintOrientation ( ) {
    enum WdRevisionsBalloonPrintOrientation _result;
    HRESULT _hr = get_RevisionsBalloonPrintOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4540)
inline void Word::Options::PutRevisionsBalloonPrintOrientation ( enum WdRevisionsBalloonPrintOrientation prop ) {
    HRESULT _hr = put_RevisionsBalloonPrintOrientation(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4541)
inline enum WdColorIndex Word::Options::GetCommentsColor ( ) {
    enum WdColorIndex _result;
    HRESULT _hr = get_CommentsColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4542)
inline void Word::Options::PutCommentsColor ( enum WdColorIndex prop ) {
    HRESULT _hr = put_CommentsColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface MailMessage wrapper method implementations
//

#pragma implementation_key(4543)
inline Word::_ApplicationPtr Word::MailMessage::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4544)
inline long Word::MailMessage::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4545)
inline IDispatchPtr Word::MailMessage::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4546)
inline HRESULT Word::MailMessage::CheckName ( ) {
    HRESULT _hr = raw_CheckName();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4547)
inline HRESULT Word::MailMessage::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4548)
inline HRESULT Word::MailMessage::DisplayMoveDialog ( ) {
    HRESULT _hr = raw_DisplayMoveDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4549)
inline HRESULT Word::MailMessage::DisplayProperties ( ) {
    HRESULT _hr = raw_DisplayProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4550)
inline HRESULT Word::MailMessage::DisplaySelectNamesDialog ( ) {
    HRESULT _hr = raw_DisplaySelectNamesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4551)
inline HRESULT Word::MailMessage::Forward ( ) {
    HRESULT _hr = raw_Forward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4552)
inline HRESULT Word::MailMessage::GoToNext ( ) {
    HRESULT _hr = raw_GoToNext();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4553)
inline HRESULT Word::MailMessage::GoToPrevious ( ) {
    HRESULT _hr = raw_GoToPrevious();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4554)
inline HRESULT Word::MailMessage::Reply ( ) {
    HRESULT _hr = raw_Reply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4555)
inline HRESULT Word::MailMessage::ReplyAll ( ) {
    HRESULT _hr = raw_ReplyAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4556)
inline HRESULT Word::MailMessage::ToggleHeader ( ) {
    HRESULT _hr = raw_ToggleHeader();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ProofreadingErrors wrapper method implementations
//

#pragma implementation_key(4557)
inline Word::_ApplicationPtr Word::ProofreadingErrors::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4558)
inline long Word::ProofreadingErrors::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4559)
inline IDispatchPtr Word::ProofreadingErrors::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4560)
inline IUnknownPtr Word::ProofreadingErrors::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4561)
inline long Word::ProofreadingErrors::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4562)
inline enum WdProofreadingErrorType Word::ProofreadingErrors::GetType ( ) {
    enum WdProofreadingErrorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4563)
inline Word::RangePtr Word::ProofreadingErrors::Item ( long Index ) {
    struct Range * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

//
// interface Mailer wrapper method implementations
//

#pragma implementation_key(4564)
inline Word::_ApplicationPtr Word::Mailer::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4565)
inline long Word::Mailer::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4566)
inline IDispatchPtr Word::Mailer::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4567)
inline _variant_t Word::Mailer::GetBCCRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BCCRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4568)
inline void Word::Mailer::PutBCCRecipients ( VARIANT * prop ) {
    HRESULT _hr = put_BCCRecipients(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4569)
inline _variant_t Word::Mailer::GetCCRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CCRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4570)
inline void Word::Mailer::PutCCRecipients ( VARIANT * prop ) {
    HRESULT _hr = put_CCRecipients(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4571)
inline _variant_t Word::Mailer::GetRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4572)
inline void Word::Mailer::PutRecipients ( VARIANT * prop ) {
    HRESULT _hr = put_Recipients(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4573)
inline _variant_t Word::Mailer::GetEnclosures ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Enclosures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4574)
inline void Word::Mailer::PutEnclosures ( VARIANT * prop ) {
    HRESULT _hr = put_Enclosures(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4575)
inline _bstr_t Word::Mailer::GetSender ( ) {
    BSTR _result;
    HRESULT _hr = get_Sender(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4576)
inline DATE Word::Mailer::GetSendDateTime ( ) {
    DATE _result;
    HRESULT _hr = get_SendDateTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4577)
inline VARIANT_BOOL Word::Mailer::GetReceived ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Received(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4578)
inline _bstr_t Word::Mailer::GetSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4579)
inline void Word::Mailer::PutSubject ( _bstr_t prop ) {
    HRESULT _hr = put_Subject(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface WrapFormat wrapper method implementations
//

#pragma implementation_key(4580)
inline Word::_ApplicationPtr Word::WrapFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4581)
inline long Word::WrapFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4582)
inline IDispatchPtr Word::WrapFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4583)
inline enum WdWrapType Word::WrapFormat::GetType ( ) {
    enum WdWrapType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4584)
inline void Word::WrapFormat::PutType ( enum WdWrapType prop ) {
    HRESULT _hr = put_Type(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4585)
inline enum WdWrapSideType Word::WrapFormat::GetSide ( ) {
    enum WdWrapSideType _result;
    HRESULT _hr = get_Side(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4586)
inline void Word::WrapFormat::PutSide ( enum WdWrapSideType prop ) {
    HRESULT _hr = put_Side(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4587)
inline float Word::WrapFormat::GetDistanceTop ( ) {
    float _result;
    HRESULT _hr = get_DistanceTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4588)
inline void Word::WrapFormat::PutDistanceTop ( float prop ) {
    HRESULT _hr = put_DistanceTop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4589)
inline float Word::WrapFormat::GetDistanceBottom ( ) {
    float _result;
    HRESULT _hr = get_DistanceBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4590)
inline void Word::WrapFormat::PutDistanceBottom ( float prop ) {
    HRESULT _hr = put_DistanceBottom(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4591)
inline float Word::WrapFormat::GetDistanceLeft ( ) {
    float _result;
    HRESULT _hr = get_DistanceLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4592)
inline void Word::WrapFormat::PutDistanceLeft ( float prop ) {
    HRESULT _hr = put_DistanceLeft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4593)
inline float Word::WrapFormat::GetDistanceRight ( ) {
    float _result;
    HRESULT _hr = get_DistanceRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4594)
inline void Word::WrapFormat::PutDistanceRight ( float prop ) {
    HRESULT _hr = put_DistanceRight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4595)
inline long Word::WrapFormat::GetAllowOverlap ( ) {
    long _result;
    HRESULT _hr = get_AllowOverlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4596)
inline void Word::WrapFormat::PutAllowOverlap ( long prop ) {
    HRESULT _hr = put_AllowOverlap(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface HangulAndAlphabetExceptions wrapper method implementations
//

#pragma implementation_key(4597)
inline Word::_ApplicationPtr Word::HangulAndAlphabetExceptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4598)
inline long Word::HangulAndAlphabetExceptions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4599)
inline IDispatchPtr Word::HangulAndAlphabetExceptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4600)
inline IUnknownPtr Word::HangulAndAlphabetExceptions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4601)
inline long Word::HangulAndAlphabetExceptions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4602)
inline Word::HangulAndAlphabetExceptionPtr Word::HangulAndAlphabetExceptions::Item ( VARIANT * Index ) {
    struct HangulAndAlphabetException * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HangulAndAlphabetExceptionPtr(_result, false);
}

#pragma implementation_key(4603)
inline Word::HangulAndAlphabetExceptionPtr Word::HangulAndAlphabetExceptions::Add ( _bstr_t Name ) {
    struct HangulAndAlphabetException * _result;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HangulAndAlphabetExceptionPtr(_result, false);
}

//
// interface HangulAndAlphabetException wrapper method implementations
//

#pragma implementation_key(4604)
inline Word::_ApplicationPtr Word::HangulAndAlphabetException::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4605)
inline long Word::HangulAndAlphabetException::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4606)
inline IDispatchPtr Word::HangulAndAlphabetException::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4607)
inline long Word::HangulAndAlphabetException::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4608)
inline _bstr_t Word::HangulAndAlphabetException::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4609)
inline HRESULT Word::HangulAndAlphabetException::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Adjustments wrapper method implementations
//

#pragma implementation_key(4610)
inline Word::_ApplicationPtr Word::Adjustments::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4611)
inline long Word::Adjustments::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4612)
inline IDispatchPtr Word::Adjustments::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4613)
inline long Word::Adjustments::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4614)
inline float Word::Adjustments::GetItem ( long Index ) {
    float _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4615)
inline void Word::Adjustments::PutItem ( long Index, float prop ) {
    HRESULT _hr = put_Item(Index, prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CalloutFormat wrapper method implementations
//

#pragma implementation_key(4616)
inline Word::_ApplicationPtr Word::CalloutFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4617)
inline long Word::CalloutFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4618)
inline IDispatchPtr Word::CalloutFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4619)
inline enum Office::MsoTriState Word::CalloutFormat::GetAccent ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Accent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4620)
inline void Word::CalloutFormat::PutAccent ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_Accent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4621)
inline enum Office::MsoCalloutAngleType Word::CalloutFormat::GetAngle ( ) {
    enum Office::MsoCalloutAngleType _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4622)
inline void Word::CalloutFormat::PutAngle ( enum Office::MsoCalloutAngleType prop ) {
    HRESULT _hr = put_Angle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4623)
inline enum Office::MsoTriState Word::CalloutFormat::GetAutoAttach ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoAttach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4624)
inline void Word::CalloutFormat::PutAutoAttach ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_AutoAttach(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4625)
inline enum Office::MsoTriState Word::CalloutFormat::GetAutoLength ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4626)
inline enum Office::MsoTriState Word::CalloutFormat::GetBorder ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4627)
inline void Word::CalloutFormat::PutBorder ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_Border(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4628)
inline float Word::CalloutFormat::GetDrop ( ) {
    float _result;
    HRESULT _hr = get_Drop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4629)
inline enum Office::MsoCalloutDropType Word::CalloutFormat::GetDropType ( ) {
    enum Office::MsoCalloutDropType _result;
    HRESULT _hr = get_DropType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4630)
inline float Word::CalloutFormat::GetGap ( ) {
    float _result;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4631)
inline void Word::CalloutFormat::PutGap ( float prop ) {
    HRESULT _hr = put_Gap(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4632)
inline float Word::CalloutFormat::GetLength ( ) {
    float _result;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4633)
inline enum Office::MsoCalloutType Word::CalloutFormat::GetType ( ) {
    enum Office::MsoCalloutType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4634)
inline void Word::CalloutFormat::PutType ( enum Office::MsoCalloutType prop ) {
    HRESULT _hr = put_Type(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4635)
inline HRESULT Word::CalloutFormat::AutomaticLength ( ) {
    HRESULT _hr = raw_AutomaticLength();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4636)
inline HRESULT Word::CalloutFormat::CustomDrop ( float Drop ) {
    HRESULT _hr = raw_CustomDrop(Drop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4637)
inline HRESULT Word::CalloutFormat::CustomLength ( float Length ) {
    HRESULT _hr = raw_CustomLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4638)
inline HRESULT Word::CalloutFormat::PresetDrop ( enum Office::MsoCalloutDropType DropType ) {
    HRESULT _hr = raw_PresetDrop(DropType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ColorFormat wrapper method implementations
//

#pragma implementation_key(4639)
inline Word::_ApplicationPtr Word::ColorFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4640)
inline long Word::ColorFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4641)
inline IDispatchPtr Word::ColorFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4642)
inline long Word::ColorFormat::GetRGB ( ) {
    long _result;
    HRESULT _hr = get_RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4643)
inline void Word::ColorFormat::PutRGB ( long prop ) {
    HRESULT _hr = put_RGB(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4644)
inline long Word::ColorFormat::GetSchemeColor ( ) {
    long _result;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4645)
inline void Word::ColorFormat::PutSchemeColor ( long prop ) {
    HRESULT _hr = put_SchemeColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4646)
inline enum Office::MsoColorType Word::ColorFormat::GetType ( ) {
    enum Office::MsoColorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4647)
inline _bstr_t Word::ColorFormat::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4648)
inline void Word::ColorFormat::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4649)
inline float Word::ColorFormat::GetTintAndShade ( ) {
    float _result;
    HRESULT _hr = get_TintAndShade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4650)
inline void Word::ColorFormat::PutTintAndShade ( float prop ) {
    HRESULT _hr = put_TintAndShade(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4651)
inline enum Office::MsoTriState Word::ColorFormat::GetOverPrint ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_OverPrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4652)
inline void Word::ColorFormat::PutOverPrint ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_OverPrint(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4653)
inline float Word::ColorFormat::GetInk ( long Index ) {
    float _result;
    HRESULT _hr = get_Ink(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4654)
inline void Word::ColorFormat::PutInk ( long Index, float prop ) {
    HRESULT _hr = put_Ink(Index, prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4655)
inline long Word::ColorFormat::GetCyan ( ) {
    long _result;
    HRESULT _hr = get_Cyan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4656)
inline void Word::ColorFormat::PutCyan ( long prop ) {
    HRESULT _hr = put_Cyan(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4657)
inline long Word::ColorFormat::GetMagenta ( ) {
    long _result;
    HRESULT _hr = get_Magenta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4658)
inline void Word::ColorFormat::PutMagenta ( long prop ) {
    HRESULT _hr = put_Magenta(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4659)
inline long Word::ColorFormat::GetYellow ( ) {
    long _result;
    HRESULT _hr = get_Yellow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4660)
inline void Word::ColorFormat::PutYellow ( long prop ) {
    HRESULT _hr = put_Yellow(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4661)
inline long Word::ColorFormat::GetBlack ( ) {
    long _result;
    HRESULT _hr = get_Black(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4662)
inline void Word::ColorFormat::PutBlack ( long prop ) {
    HRESULT _hr = put_Black(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4663)
inline HRESULT Word::ColorFormat::SetCMYK ( long Cyan, long Magenta, long Yellow, long Black ) {
    HRESULT _hr = raw_SetCMYK(Cyan, Magenta, Yellow, Black);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ConnectorFormat wrapper method implementations
//

#pragma implementation_key(4664)
inline Word::_ApplicationPtr Word::ConnectorFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4665)
inline long Word::ConnectorFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4666)
inline enum Office::MsoTriState Word::ConnectorFormat::GetBeginConnected ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_BeginConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4667)
inline Word::ShapePtr Word::ConnectorFormat::GetBeginConnectedShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_BeginConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(4668)
inline long Word::ConnectorFormat::GetBeginConnectionSite ( ) {
    long _result;
    HRESULT _hr = get_BeginConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4669)
inline enum Office::MsoTriState Word::ConnectorFormat::GetEndConnected ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_EndConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4670)
inline Word::ShapePtr Word::ConnectorFormat::GetEndConnectedShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_EndConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(4671)
inline long Word::ConnectorFormat::GetEndConnectionSite ( ) {
    long _result;
    HRESULT _hr = get_EndConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4672)
inline IDispatchPtr Word::ConnectorFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4673)
inline enum Office::MsoConnectorType Word::ConnectorFormat::GetType ( ) {
    enum Office::MsoConnectorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4674)
inline void Word::ConnectorFormat::PutType ( enum Office::MsoConnectorType prop ) {
    HRESULT _hr = put_Type(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4675)
inline HRESULT Word::ConnectorFormat::BeginConnect ( struct Shape * * ConnectedShape, long ConnectionSite ) {
    HRESULT _hr = raw_BeginConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4676)
inline HRESULT Word::ConnectorFormat::BeginDisconnect ( ) {
    HRESULT _hr = raw_BeginDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4677)
inline HRESULT Word::ConnectorFormat::EndConnect ( struct Shape * * ConnectedShape, long ConnectionSite ) {
    HRESULT _hr = raw_EndConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4678)
inline HRESULT Word::ConnectorFormat::EndDisconnect ( ) {
    HRESULT _hr = raw_EndDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface FillFormat wrapper method implementations
//

#pragma implementation_key(4679)
inline Word::_ApplicationPtr Word::FillFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4680)
inline long Word::FillFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4681)
inline IDispatchPtr Word::FillFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4682)
inline Word::ColorFormatPtr Word::FillFormat::GetBackColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(4683)
inline Word::ColorFormatPtr Word::FillFormat::GetForeColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(4684)
inline enum Office::MsoGradientColorType Word::FillFormat::GetGradientColorType ( ) {
    enum Office::MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4685)
inline float Word::FillFormat::GetGradientDegree ( ) {
    float _result;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4686)
inline enum Office::MsoGradientStyle Word::FillFormat::GetGradientStyle ( ) {
    enum Office::MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4687)
inline long Word::FillFormat::GetGradientVariant ( ) {
    long _result;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4688)
inline enum Office::MsoPatternType Word::FillFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4689)
inline enum Office::MsoPresetGradientType Word::FillFormat::GetPresetGradientType ( ) {
    enum Office::MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4690)
inline enum Office::MsoPresetTexture Word::FillFormat::GetPresetTexture ( ) {
    enum Office::MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4691)
inline _bstr_t Word::FillFormat::GetTextureName ( ) {
    BSTR _result;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4692)
inline enum Office::MsoTextureType Word::FillFormat::GetTextureType ( ) {
    enum Office::MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4693)
inline float Word::FillFormat::GetTransparency ( ) {
    float _result;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4694)
inline void Word::FillFormat::PutTransparency ( float prop ) {
    HRESULT _hr = put_Transparency(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4695)
inline enum Office::MsoFillType Word::FillFormat::GetType ( ) {
    enum Office::MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4696)
inline enum Office::MsoTriState Word::FillFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4697)
inline void Word::FillFormat::PutVisible ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4698)
inline HRESULT Word::FillFormat::Background ( ) {
    HRESULT _hr = raw_Background();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4699)
inline HRESULT Word::FillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4700)
inline HRESULT Word::FillFormat::Patterned ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4701)
inline HRESULT Word::FillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4702)
inline HRESULT Word::FillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4703)
inline HRESULT Word::FillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4704)
inline HRESULT Word::FillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4705)
inline HRESULT Word::FillFormat::UserPicture ( _bstr_t PictureFile ) {
    HRESULT _hr = raw_UserPicture(PictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4706)
inline HRESULT Word::FillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface FreeformBuilder wrapper method implementations
//

#pragma implementation_key(4707)
inline Word::_ApplicationPtr Word::FreeformBuilder::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4708)
inline long Word::FreeformBuilder::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4709)
inline IDispatchPtr Word::FreeformBuilder::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4710)
inline HRESULT Word::FreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_AddNodes(SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4711)
inline Word::ShapePtr Word::FreeformBuilder::ConvertToShape ( VARIANT * Anchor ) {
    struct Shape * _result;
    HRESULT _hr = raw_ConvertToShape(Anchor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface LineFormat wrapper method implementations
//

#pragma implementation_key(4712)
inline Word::_ApplicationPtr Word::LineFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4713)
inline long Word::LineFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4714)
inline IDispatchPtr Word::LineFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4715)
inline Word::ColorFormatPtr Word::LineFormat::GetBackColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(4716)
inline enum Office::MsoArrowheadLength Word::LineFormat::GetBeginArrowheadLength ( ) {
    enum Office::MsoArrowheadLength _result;
    HRESULT _hr = get_BeginArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4717)
inline void Word::LineFormat::PutBeginArrowheadLength ( enum Office::MsoArrowheadLength prop ) {
    HRESULT _hr = put_BeginArrowheadLength(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4718)
inline enum Office::MsoArrowheadStyle Word::LineFormat::GetBeginArrowheadStyle ( ) {
    enum Office::MsoArrowheadStyle _result;
    HRESULT _hr = get_BeginArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4719)
inline void Word::LineFormat::PutBeginArrowheadStyle ( enum Office::MsoArrowheadStyle prop ) {
    HRESULT _hr = put_BeginArrowheadStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4720)
inline enum Office::MsoArrowheadWidth Word::LineFormat::GetBeginArrowheadWidth ( ) {
    enum Office::MsoArrowheadWidth _result;
    HRESULT _hr = get_BeginArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4721)
inline void Word::LineFormat::PutBeginArrowheadWidth ( enum Office::MsoArrowheadWidth prop ) {
    HRESULT _hr = put_BeginArrowheadWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4722)
inline enum Office::MsoLineDashStyle Word::LineFormat::GetDashStyle ( ) {
    enum Office::MsoLineDashStyle _result;
    HRESULT _hr = get_DashStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4723)
inline void Word::LineFormat::PutDashStyle ( enum Office::MsoLineDashStyle prop ) {
    HRESULT _hr = put_DashStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4724)
inline enum Office::MsoArrowheadLength Word::LineFormat::GetEndArrowheadLength ( ) {
    enum Office::MsoArrowheadLength _result;
    HRESULT _hr = get_EndArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4725)
inline void Word::LineFormat::PutEndArrowheadLength ( enum Office::MsoArrowheadLength prop ) {
    HRESULT _hr = put_EndArrowheadLength(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4726)
inline enum Office::MsoArrowheadStyle Word::LineFormat::GetEndArrowheadStyle ( ) {
    enum Office::MsoArrowheadStyle _result;
    HRESULT _hr = get_EndArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4727)
inline void Word::LineFormat::PutEndArrowheadStyle ( enum Office::MsoArrowheadStyle prop ) {
    HRESULT _hr = put_EndArrowheadStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4728)
inline enum Office::MsoArrowheadWidth Word::LineFormat::GetEndArrowheadWidth ( ) {
    enum Office::MsoArrowheadWidth _result;
    HRESULT _hr = get_EndArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4729)
inline void Word::LineFormat::PutEndArrowheadWidth ( enum Office::MsoArrowheadWidth prop ) {
    HRESULT _hr = put_EndArrowheadWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4730)
inline Word::ColorFormatPtr Word::LineFormat::GetForeColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(4731)
inline enum Office::MsoPatternType Word::LineFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4732)
inline void Word::LineFormat::PutPattern ( enum Office::MsoPatternType prop ) {
    HRESULT _hr = put_Pattern(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4733)
inline enum Office::MsoLineStyle Word::LineFormat::GetStyle ( ) {
    enum Office::MsoLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4734)
inline void Word::LineFormat::PutStyle ( enum Office::MsoLineStyle prop ) {
    HRESULT _hr = put_Style(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4735)
inline float Word::LineFormat::GetTransparency ( ) {
    float _result;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4736)
inline void Word::LineFormat::PutTransparency ( float prop ) {
    HRESULT _hr = put_Transparency(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4737)
inline enum Office::MsoTriState Word::LineFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4738)
inline void Word::LineFormat::PutVisible ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4739)
inline float Word::LineFormat::GetWeight ( ) {
    float _result;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4740)
inline void Word::LineFormat::PutWeight ( float prop ) {
    HRESULT _hr = put_Weight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4741)
inline enum Office::MsoTriState Word::LineFormat::GetInsetPen ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_InsetPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4742)
inline void Word::LineFormat::PutInsetPen ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_InsetPen(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PictureFormat wrapper method implementations
//

#pragma implementation_key(4743)
inline Word::_ApplicationPtr Word::PictureFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4744)
inline long Word::PictureFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4745)
inline IDispatchPtr Word::PictureFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4746)
inline float Word::PictureFormat::GetBrightness ( ) {
    float _result;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4747)
inline void Word::PictureFormat::PutBrightness ( float prop ) {
    HRESULT _hr = put_Brightness(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4748)
inline enum Office::MsoPictureColorType Word::PictureFormat::GetColorType ( ) {
    enum Office::MsoPictureColorType _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4749)
inline void Word::PictureFormat::PutColorType ( enum Office::MsoPictureColorType prop ) {
    HRESULT _hr = put_ColorType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4750)
inline float Word::PictureFormat::GetContrast ( ) {
    float _result;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4751)
inline void Word::PictureFormat::PutContrast ( float prop ) {
    HRESULT _hr = put_Contrast(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4752)
inline float Word::PictureFormat::GetCropBottom ( ) {
    float _result;
    HRESULT _hr = get_CropBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4753)
inline void Word::PictureFormat::PutCropBottom ( float prop ) {
    HRESULT _hr = put_CropBottom(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4754)
inline float Word::PictureFormat::GetCropLeft ( ) {
    float _result;
    HRESULT _hr = get_CropLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4755)
inline void Word::PictureFormat::PutCropLeft ( float prop ) {
    HRESULT _hr = put_CropLeft(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4756)
inline float Word::PictureFormat::GetCropRight ( ) {
    float _result;
    HRESULT _hr = get_CropRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4757)
inline void Word::PictureFormat::PutCropRight ( float prop ) {
    HRESULT _hr = put_CropRight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4758)
inline float Word::PictureFormat::GetCropTop ( ) {
    float _result;
    HRESULT _hr = get_CropTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4759)
inline void Word::PictureFormat::PutCropTop ( float prop ) {
    HRESULT _hr = put_CropTop(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4760)
inline long Word::PictureFormat::GetTransparencyColor ( ) {
    long _result;
    HRESULT _hr = get_TransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4761)
inline void Word::PictureFormat::PutTransparencyColor ( long prop ) {
    HRESULT _hr = put_TransparencyColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4762)
inline enum Office::MsoTriState Word::PictureFormat::GetTransparentBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_TransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4763)
inline void Word::PictureFormat::PutTransparentBackground ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_TransparentBackground(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4764)
inline HRESULT Word::PictureFormat::IncrementBrightness ( float Increment ) {
    HRESULT _hr = raw_IncrementBrightness(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4765)
inline HRESULT Word::PictureFormat::IncrementContrast ( float Increment ) {
    HRESULT _hr = raw_IncrementContrast(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ShadowFormat wrapper method implementations
//

#pragma implementation_key(4766)
inline Word::_ApplicationPtr Word::ShadowFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4767)
inline long Word::ShadowFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4768)
inline IDispatchPtr Word::ShadowFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4769)
inline Word::ColorFormatPtr Word::ShadowFormat::GetForeColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(4770)
inline enum Office::MsoTriState Word::ShadowFormat::GetObscured ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Obscured(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4771)
inline void Word::ShadowFormat::PutObscured ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_Obscured(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4772)
inline float Word::ShadowFormat::GetOffsetX ( ) {
    float _result;
    HRESULT _hr = get_OffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4773)
inline void Word::ShadowFormat::PutOffsetX ( float prop ) {
    HRESULT _hr = put_OffsetX(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4774)
inline float Word::ShadowFormat::GetOffsetY ( ) {
    float _result;
    HRESULT _hr = get_OffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4775)
inline void Word::ShadowFormat::PutOffsetY ( float prop ) {
    HRESULT _hr = put_OffsetY(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4776)
inline float Word::ShadowFormat::GetTransparency ( ) {
    float _result;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4777)
inline void Word::ShadowFormat::PutTransparency ( float prop ) {
    HRESULT _hr = put_Transparency(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4778)
inline enum Office::MsoShadowType Word::ShadowFormat::GetType ( ) {
    enum Office::MsoShadowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4779)
inline void Word::ShadowFormat::PutType ( enum Office::MsoShadowType prop ) {
    HRESULT _hr = put_Type(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4780)
inline enum Office::MsoTriState Word::ShadowFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4781)
inline void Word::ShadowFormat::PutVisible ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4782)
inline HRESULT Word::ShadowFormat::IncrementOffsetX ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4783)
inline HRESULT Word::ShadowFormat::IncrementOffsetY ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ShapeNode wrapper method implementations
//

#pragma implementation_key(4784)
inline Word::_ApplicationPtr Word::ShapeNode::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4785)
inline long Word::ShapeNode::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4786)
inline IDispatchPtr Word::ShapeNode::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4787)
inline enum Office::MsoEditingType Word::ShapeNode::GetEditingType ( ) {
    enum Office::MsoEditingType _result;
    HRESULT _hr = get_EditingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4788)
inline _variant_t Word::ShapeNode::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(4789)
inline enum Office::MsoSegmentType Word::ShapeNode::GetSegmentType ( ) {
    enum Office::MsoSegmentType _result;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeNodes wrapper method implementations
//

#pragma implementation_key(4790)
inline Word::_ApplicationPtr Word::ShapeNodes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4791)
inline long Word::ShapeNodes::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4792)
inline IDispatchPtr Word::ShapeNodes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4793)
inline long Word::ShapeNodes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4794)
inline IUnknownPtr Word::ShapeNodes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4795)
inline HRESULT Word::ShapeNodes::Delete ( long Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4796)
inline Word::ShapeNodePtr Word::ShapeNodes::Item ( VARIANT * Index ) {
    struct ShapeNode * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodePtr(_result, false);
}

#pragma implementation_key(4797)
inline HRESULT Word::ShapeNodes::SetEditingType ( long Index, enum Office::MsoEditingType EditingType ) {
    HRESULT _hr = raw_SetEditingType(Index, EditingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4798)
inline HRESULT Word::ShapeNodes::SetPosition ( long Index, float X1, float Y1 ) {
    HRESULT _hr = raw_SetPosition(Index, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4799)
inline HRESULT Word::ShapeNodes::SetSegmentType ( long Index, enum Office::MsoSegmentType SegmentType ) {
    HRESULT _hr = raw_SetSegmentType(Index, SegmentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4800)
inline HRESULT Word::ShapeNodes::Insert ( long Index, enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_Insert(Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TextEffectFormat wrapper method implementations
//

#pragma implementation_key(4801)
inline Word::_ApplicationPtr Word::TextEffectFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4802)
inline long Word::TextEffectFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4803)
inline IDispatchPtr Word::TextEffectFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4804)
inline enum Office::MsoTextEffectAlignment Word::TextEffectFormat::GetAlignment ( ) {
    enum Office::MsoTextEffectAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4805)
inline void Word::TextEffectFormat::PutAlignment ( enum Office::MsoTextEffectAlignment prop ) {
    HRESULT _hr = put_Alignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4806)
inline enum Office::MsoTriState Word::TextEffectFormat::GetFontBold ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4807)
inline void Word::TextEffectFormat::PutFontBold ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_FontBold(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4808)
inline enum Office::MsoTriState Word::TextEffectFormat::GetFontItalic ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4809)
inline void Word::TextEffectFormat::PutFontItalic ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_FontItalic(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4810)
inline _bstr_t Word::TextEffectFormat::GetFontName ( ) {
    BSTR _result;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4811)
inline void Word::TextEffectFormat::PutFontName ( _bstr_t prop ) {
    HRESULT _hr = put_FontName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4812)
inline float Word::TextEffectFormat::GetFontSize ( ) {
    float _result;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4813)
inline void Word::TextEffectFormat::PutFontSize ( float prop ) {
    HRESULT _hr = put_FontSize(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4814)
inline enum Office::MsoTriState Word::TextEffectFormat::GetKernedPairs ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_KernedPairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4815)
inline void Word::TextEffectFormat::PutKernedPairs ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_KernedPairs(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4816)
inline enum Office::MsoTriState Word::TextEffectFormat::GetNormalizedHeight ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_NormalizedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4817)
inline void Word::TextEffectFormat::PutNormalizedHeight ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_NormalizedHeight(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4818)
inline enum Office::MsoPresetTextEffectShape Word::TextEffectFormat::GetPresetShape ( ) {
    enum Office::MsoPresetTextEffectShape _result;
    HRESULT _hr = get_PresetShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4819)
inline void Word::TextEffectFormat::PutPresetShape ( enum Office::MsoPresetTextEffectShape prop ) {
    HRESULT _hr = put_PresetShape(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4820)
inline enum Office::MsoPresetTextEffect Word::TextEffectFormat::GetPresetTextEffect ( ) {
    enum Office::MsoPresetTextEffect _result;
    HRESULT _hr = get_PresetTextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4821)
inline void Word::TextEffectFormat::PutPresetTextEffect ( enum Office::MsoPresetTextEffect prop ) {
    HRESULT _hr = put_PresetTextEffect(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4822)
inline enum Office::MsoTriState Word::TextEffectFormat::GetRotatedChars ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RotatedChars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4823)
inline void Word::TextEffectFormat::PutRotatedChars ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_RotatedChars(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4824)
inline _bstr_t Word::TextEffectFormat::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4825)
inline void Word::TextEffectFormat::PutText ( _bstr_t prop ) {
    HRESULT _hr = put_Text(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4826)
inline float Word::TextEffectFormat::GetTracking ( ) {
    float _result;
    HRESULT _hr = get_Tracking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4827)
inline void Word::TextEffectFormat::PutTracking ( float prop ) {
    HRESULT _hr = put_Tracking(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4828)
inline HRESULT Word::TextEffectFormat::ToggleVerticalText ( ) {
    HRESULT _hr = raw_ToggleVerticalText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ThreeDFormat wrapper method implementations
//

#pragma implementation_key(4829)
inline Word::_ApplicationPtr Word::ThreeDFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4830)
inline long Word::ThreeDFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4831)
inline IDispatchPtr Word::ThreeDFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4832)
inline float Word::ThreeDFormat::GetDepth ( ) {
    float _result;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4833)
inline void Word::ThreeDFormat::PutDepth ( float prop ) {
    HRESULT _hr = put_Depth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4834)
inline Word::ColorFormatPtr Word::ThreeDFormat::GetExtrusionColor ( ) {
    struct ColorFormat * _result;
    HRESULT _hr = get_ExtrusionColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(4835)
inline enum Office::MsoExtrusionColorType Word::ThreeDFormat::GetExtrusionColorType ( ) {
    enum Office::MsoExtrusionColorType _result;
    HRESULT _hr = get_ExtrusionColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4836)
inline void Word::ThreeDFormat::PutExtrusionColorType ( enum Office::MsoExtrusionColorType prop ) {
    HRESULT _hr = put_ExtrusionColorType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4837)
inline enum Office::MsoTriState Word::ThreeDFormat::GetPerspective ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4838)
inline void Word::ThreeDFormat::PutPerspective ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_Perspective(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4839)
inline enum Office::MsoPresetExtrusionDirection Word::ThreeDFormat::GetPresetExtrusionDirection ( ) {
    enum Office::MsoPresetExtrusionDirection _result;
    HRESULT _hr = get_PresetExtrusionDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4840)
inline enum Office::MsoPresetLightingDirection Word::ThreeDFormat::GetPresetLightingDirection ( ) {
    enum Office::MsoPresetLightingDirection _result;
    HRESULT _hr = get_PresetLightingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4841)
inline void Word::ThreeDFormat::PutPresetLightingDirection ( enum Office::MsoPresetLightingDirection prop ) {
    HRESULT _hr = put_PresetLightingDirection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4842)
inline enum Office::MsoPresetLightingSoftness Word::ThreeDFormat::GetPresetLightingSoftness ( ) {
    enum Office::MsoPresetLightingSoftness _result;
    HRESULT _hr = get_PresetLightingSoftness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4843)
inline void Word::ThreeDFormat::PutPresetLightingSoftness ( enum Office::MsoPresetLightingSoftness prop ) {
    HRESULT _hr = put_PresetLightingSoftness(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4844)
inline enum Office::MsoPresetMaterial Word::ThreeDFormat::GetPresetMaterial ( ) {
    enum Office::MsoPresetMaterial _result;
    HRESULT _hr = get_PresetMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4845)
inline void Word::ThreeDFormat::PutPresetMaterial ( enum Office::MsoPresetMaterial prop ) {
    HRESULT _hr = put_PresetMaterial(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4846)
inline enum Office::MsoPresetThreeDFormat Word::ThreeDFormat::GetPresetThreeDFormat ( ) {
    enum Office::MsoPresetThreeDFormat _result;
    HRESULT _hr = get_PresetThreeDFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4847)
inline float Word::ThreeDFormat::GetRotationX ( ) {
    float _result;
    HRESULT _hr = get_RotationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4848)
inline void Word::ThreeDFormat::PutRotationX ( float prop ) {
    HRESULT _hr = put_RotationX(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4849)
inline float Word::ThreeDFormat::GetRotationY ( ) {
    float _result;
    HRESULT _hr = get_RotationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4850)
inline void Word::ThreeDFormat::PutRotationY ( float prop ) {
    HRESULT _hr = put_RotationY(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4851)
inline enum Office::MsoTriState Word::ThreeDFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4852)
inline void Word::ThreeDFormat::PutVisible ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4853)
inline HRESULT Word::ThreeDFormat::IncrementRotationX ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4854)
inline HRESULT Word::ThreeDFormat::IncrementRotationY ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4855)
inline HRESULT Word::ThreeDFormat::ResetRotation ( ) {
    HRESULT _hr = raw_ResetRotation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4856)
inline HRESULT Word::ThreeDFormat::SetExtrusionDirection ( enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) {
    HRESULT _hr = raw_SetExtrusionDirection(PresetExtrusionDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4857)
inline HRESULT Word::ThreeDFormat::SetThreeDFormat ( enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) {
    HRESULT _hr = raw_SetThreeDFormat(PresetThreeDFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface DocumentEvents wrapper method implementations
//

#pragma implementation_key(4858)
inline HRESULT Word::DocumentEvents::New ( ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(4859)
inline HRESULT Word::DocumentEvents::Open ( ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(4860)
inline HRESULT Word::DocumentEvents::Close ( ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface OCXEvents wrapper method implementations
//

#pragma implementation_key(4861)
inline HRESULT Word::OCXEvents::GotFocus ( ) {
    return _com_dispatch_method(this, 0x800100e0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(4862)
inline HRESULT Word::OCXEvents::LostFocus ( ) {
    return _com_dispatch_method(this, 0x800100e1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface IApplicationEvents wrapper method implementations
//

#pragma implementation_key(4863)
inline HRESULT Word::IApplicationEvents::Startup ( ) {
    HRESULT _hr = raw_Startup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4864)
inline HRESULT Word::IApplicationEvents::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4865)
inline HRESULT Word::IApplicationEvents::DocumentChange ( ) {
    HRESULT _hr = raw_DocumentChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IApplicationEvents2 wrapper method implementations
//

#pragma implementation_key(4866)
inline HRESULT Word::IApplicationEvents2::Startup ( ) {
    HRESULT _hr = raw_Startup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4867)
inline HRESULT Word::IApplicationEvents2::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4868)
inline HRESULT Word::IApplicationEvents2::DocumentChange ( ) {
    HRESULT _hr = raw_DocumentChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4869)
inline HRESULT Word::IApplicationEvents2::DocumentOpen ( struct _Document * Doc ) {
    HRESULT _hr = raw_DocumentOpen(Doc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4870)
inline HRESULT Word::IApplicationEvents2::DocumentBeforeClose ( struct _Document * Doc, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_DocumentBeforeClose(Doc, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4871)
inline HRESULT Word::IApplicationEvents2::DocumentBeforePrint ( struct _Document * Doc, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_DocumentBeforePrint(Doc, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4872)
inline HRESULT Word::IApplicationEvents2::DocumentBeforeSave ( struct _Document * Doc, VARIANT_BOOL * SaveAsUI, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_DocumentBeforeSave(Doc, SaveAsUI, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4873)
inline HRESULT Word::IApplicationEvents2::NewDocument ( struct _Document * Doc ) {
    HRESULT _hr = raw_NewDocument(Doc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4874)
inline HRESULT Word::IApplicationEvents2::WindowActivate ( struct _Document * Doc, struct Window * Wn ) {
    HRESULT _hr = raw_WindowActivate(Doc, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4875)
inline HRESULT Word::IApplicationEvents2::WindowDeactivate ( struct _Document * Doc, struct Window * Wn ) {
    HRESULT _hr = raw_WindowDeactivate(Doc, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4876)
inline HRESULT Word::IApplicationEvents2::WindowSelectionChange ( struct Selection * Sel ) {
    HRESULT _hr = raw_WindowSelectionChange(Sel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4877)
inline HRESULT Word::IApplicationEvents2::WindowBeforeRightClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WindowBeforeRightClick(Sel, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4878)
inline HRESULT Word::IApplicationEvents2::WindowBeforeDoubleClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WindowBeforeDoubleClick(Sel, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface ApplicationEvents2 wrapper method implementations
//

#pragma implementation_key(4879)
inline HRESULT Word::ApplicationEvents2::Quit ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(4880)
inline HRESULT Word::ApplicationEvents2::DocumentChange ( ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(4881)
inline HRESULT Word::ApplicationEvents2::DocumentOpen ( struct _Document * Doc ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Doc);
}

#pragma implementation_key(4882)
inline HRESULT Word::ApplicationEvents2::DocumentBeforeClose ( struct _Document * Doc, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Doc, Cancel);
}

#pragma implementation_key(4883)
inline HRESULT Word::ApplicationEvents2::DocumentBeforePrint ( struct _Document * Doc, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Doc, Cancel);
}

#pragma implementation_key(4884)
inline HRESULT Word::ApplicationEvents2::DocumentBeforeSave ( struct _Document * Doc, VARIANT_BOOL * SaveAsUI, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b\x400b", Doc, SaveAsUI, Cancel);
}

#pragma implementation_key(4885)
inline HRESULT Word::ApplicationEvents2::NewDocument ( struct _Document * Doc ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Doc);
}

#pragma implementation_key(4886)
inline HRESULT Word::ApplicationEvents2::WindowActivate ( struct _Document * Doc, struct Window * Wn ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Doc, Wn);
}

#pragma implementation_key(4887)
inline HRESULT Word::ApplicationEvents2::WindowDeactivate ( struct _Document * Doc, struct Window * Wn ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Doc, Wn);
}

#pragma implementation_key(4888)
inline HRESULT Word::ApplicationEvents2::WindowSelectionChange ( struct Selection * Sel ) {
    return _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sel);
}

#pragma implementation_key(4889)
inline HRESULT Word::ApplicationEvents2::WindowBeforeRightClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Sel, Cancel);
}

#pragma implementation_key(4890)
inline HRESULT Word::ApplicationEvents2::WindowBeforeDoubleClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Sel, Cancel);
}

//
// interface EmailAuthor wrapper method implementations
//

#pragma implementation_key(4891)
inline Word::_ApplicationPtr Word::EmailAuthor::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4892)
inline long Word::EmailAuthor::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4893)
inline IDispatchPtr Word::EmailAuthor::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4894)
inline Word::StylePtr Word::EmailAuthor::GetStyle ( ) {
    struct Style * _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

//
// interface EmailOptions wrapper method implementations
//

#pragma implementation_key(4895)
inline Word::_ApplicationPtr Word::EmailOptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4896)
inline long Word::EmailOptions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4897)
inline IDispatchPtr Word::EmailOptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4898)
inline VARIANT_BOOL Word::EmailOptions::GetUseThemeStyle ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseThemeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4899)
inline void Word::EmailOptions::PutUseThemeStyle ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseThemeStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4900)
inline _bstr_t Word::EmailOptions::GetMarkCommentsWith ( ) {
    BSTR _result;
    HRESULT _hr = get_MarkCommentsWith(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4901)
inline void Word::EmailOptions::PutMarkCommentsWith ( _bstr_t prop ) {
    HRESULT _hr = put_MarkCommentsWith(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4902)
inline VARIANT_BOOL Word::EmailOptions::GetMarkComments ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MarkComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4903)
inline void Word::EmailOptions::PutMarkComments ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_MarkComments(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4904)
inline Word::EmailSignaturePtr Word::EmailOptions::GetEmailSignature ( ) {
    struct EmailSignature * _result;
    HRESULT _hr = get_EmailSignature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EmailSignaturePtr(_result, false);
}

#pragma implementation_key(4905)
inline Word::StylePtr Word::EmailOptions::GetComposeStyle ( ) {
    struct Style * _result;
    HRESULT _hr = get_ComposeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

#pragma implementation_key(4906)
inline Word::StylePtr Word::EmailOptions::GetReplyStyle ( ) {
    struct Style * _result;
    HRESULT _hr = get_ReplyStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

#pragma implementation_key(4907)
inline _bstr_t Word::EmailOptions::GetThemeName ( ) {
    BSTR _result;
    HRESULT _hr = get_ThemeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4908)
inline void Word::EmailOptions::PutThemeName ( _bstr_t prop ) {
    HRESULT _hr = put_ThemeName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4909)
inline VARIANT_BOOL Word::EmailOptions::GetDummy1 ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Dummy1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4910)
inline VARIANT_BOOL Word::EmailOptions::GetDummy2 ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Dummy2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4911)
inline HRESULT Word::EmailOptions::Dummy3 ( ) {
    HRESULT _hr = raw_Dummy3();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(4912)
inline VARIANT_BOOL Word::EmailOptions::GetNewColorOnReply ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NewColorOnReply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4913)
inline void Word::EmailOptions::PutNewColorOnReply ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_NewColorOnReply(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4914)
inline Word::StylePtr Word::EmailOptions::GetPlainTextStyle ( ) {
    struct Style * _result;
    HRESULT _hr = get_PlainTextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StylePtr(_result, false);
}

#pragma implementation_key(4915)
inline VARIANT_BOOL Word::EmailOptions::GetUseThemeStyleOnReply ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseThemeStyleOnReply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4916)
inline void Word::EmailOptions::PutUseThemeStyleOnReply ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseThemeStyleOnReply(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4917)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeApplyHeadings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyHeadings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4918)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeApplyHeadings ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyHeadings(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4919)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeApplyBorders ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyBorders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4920)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeApplyBorders ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyBorders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4921)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeApplyBulletedLists ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyBulletedLists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4922)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeApplyBulletedLists ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyBulletedLists(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4923)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeApplyNumberedLists ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyNumberedLists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4924)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeApplyNumberedLists ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyNumberedLists(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4925)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeReplaceQuotes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceQuotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4926)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeReplaceQuotes ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceQuotes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4927)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeReplaceSymbols ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceSymbols(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4928)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeReplaceSymbols ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceSymbols(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4929)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeReplaceOrdinals ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceOrdinals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4930)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeReplaceOrdinals ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceOrdinals(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4931)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeReplaceFractions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceFractions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4932)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeReplaceFractions ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceFractions(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4933)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeReplacePlainTextEmphasis ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplacePlainTextEmphasis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4934)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeReplacePlainTextEmphasis ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplacePlainTextEmphasis(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4935)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeFormatListItemBeginning ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeFormatListItemBeginning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4936)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeFormatListItemBeginning ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeFormatListItemBeginning(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4937)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeDefineStyles ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeDefineStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4938)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeDefineStyles ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeDefineStyles(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4939)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeReplaceHyperlinks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceHyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4940)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeReplaceHyperlinks ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceHyperlinks(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4941)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeApplyTables ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4942)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeApplyTables ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyTables(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4943)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeApplyFirstIndents ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyFirstIndents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4944)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeApplyFirstIndents ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyFirstIndents(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4945)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeApplyDates ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyDates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4946)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeApplyDates ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyDates(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4947)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeApplyClosings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeApplyClosings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4948)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeApplyClosings ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeApplyClosings(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4949)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeMatchParentheses ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeMatchParentheses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4950)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeMatchParentheses ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeMatchParentheses(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4951)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeReplaceFarEastDashes ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeReplaceFarEastDashes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4952)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeReplaceFarEastDashes ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeReplaceFarEastDashes(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4953)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeDeleteAutoSpaces ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeDeleteAutoSpaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4954)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeDeleteAutoSpaces ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeDeleteAutoSpaces(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4955)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeInsertClosings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeInsertClosings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4956)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeInsertClosings ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeInsertClosings(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4957)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeAutoLetterWizard ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeAutoLetterWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4958)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeAutoLetterWizard ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeAutoLetterWizard(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4959)
inline VARIANT_BOOL Word::EmailOptions::GetAutoFormatAsYouTypeInsertOvers ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoFormatAsYouTypeInsertOvers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4960)
inline void Word::EmailOptions::PutAutoFormatAsYouTypeInsertOvers ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AutoFormatAsYouTypeInsertOvers(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4961)
inline VARIANT_BOOL Word::EmailOptions::GetRelyOnCSS ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RelyOnCSS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4962)
inline void Word::EmailOptions::PutRelyOnCSS ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_RelyOnCSS(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4963)
inline enum WdEmailHTMLFidelity Word::EmailOptions::GetHTMLFidelity ( ) {
    enum WdEmailHTMLFidelity _result;
    HRESULT _hr = get_HTMLFidelity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4964)
inline void Word::EmailOptions::PutHTMLFidelity ( enum WdEmailHTMLFidelity prop ) {
    HRESULT _hr = put_HTMLFidelity(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4965)
inline VARIANT_BOOL Word::EmailOptions::GetEmbedSmartTag ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EmbedSmartTag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4966)
inline void Word::EmailOptions::PutEmbedSmartTag ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_EmbedSmartTag(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4967)
inline VARIANT_BOOL Word::EmailOptions::GetTabIndentKey ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TabIndentKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4968)
inline void Word::EmailOptions::PutTabIndentKey ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_TabIndentKey(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface EmailSignature wrapper method implementations
//

#pragma implementation_key(4969)
inline Word::_ApplicationPtr Word::EmailSignature::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4970)
inline long Word::EmailSignature::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4971)
inline IDispatchPtr Word::EmailSignature::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4972)
inline _bstr_t Word::EmailSignature::GetNewMessageSignature ( ) {
    BSTR _result;
    HRESULT _hr = get_NewMessageSignature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4973)
inline void Word::EmailSignature::PutNewMessageSignature ( _bstr_t prop ) {
    HRESULT _hr = put_NewMessageSignature(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4974)
inline _bstr_t Word::EmailSignature::GetReplyMessageSignature ( ) {
    BSTR _result;
    HRESULT _hr = get_ReplyMessageSignature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(4975)
inline void Word::EmailSignature::PutReplyMessageSignature ( _bstr_t prop ) {
    HRESULT _hr = put_ReplyMessageSignature(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4976)
inline Word::EmailSignatureEntriesPtr Word::EmailSignature::GetEmailSignatureEntries ( ) {
    struct EmailSignatureEntries * _result;
    HRESULT _hr = get_EmailSignatureEntries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EmailSignatureEntriesPtr(_result, false);
}

//
// interface Email wrapper method implementations
//

#pragma implementation_key(4977)
inline Word::_ApplicationPtr Word::Email::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4978)
inline long Word::Email::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4979)
inline IDispatchPtr Word::Email::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4980)
inline Word::EmailAuthorPtr Word::Email::GetCurrentEmailAuthor ( ) {
    struct EmailAuthor * _result;
    HRESULT _hr = get_CurrentEmailAuthor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EmailAuthorPtr(_result, false);
}

//
// interface HorizontalLineFormat wrapper method implementations
//

#pragma implementation_key(4981)
inline Word::_ApplicationPtr Word::HorizontalLineFormat::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4982)
inline long Word::HorizontalLineFormat::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4983)
inline IDispatchPtr Word::HorizontalLineFormat::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4984)
inline float Word::HorizontalLineFormat::GetPercentWidth ( ) {
    float _result;
    HRESULT _hr = get_PercentWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4985)
inline void Word::HorizontalLineFormat::PutPercentWidth ( float prop ) {
    HRESULT _hr = put_PercentWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4986)
inline VARIANT_BOOL Word::HorizontalLineFormat::GetNoShade ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NoShade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4987)
inline void Word::HorizontalLineFormat::PutNoShade ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_NoShade(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4988)
inline enum WdHorizontalLineAlignment Word::HorizontalLineFormat::GetAlignment ( ) {
    enum WdHorizontalLineAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4989)
inline void Word::HorizontalLineFormat::PutAlignment ( enum WdHorizontalLineAlignment prop ) {
    HRESULT _hr = put_Alignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(4990)
inline enum WdHorizontalLineWidthType Word::HorizontalLineFormat::GetWidthType ( ) {
    enum WdHorizontalLineWidthType _result;
    HRESULT _hr = get_WidthType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4991)
inline void Word::HorizontalLineFormat::PutWidthType ( enum WdHorizontalLineWidthType prop ) {
    HRESULT _hr = put_WidthType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Frameset wrapper method implementations
//

#pragma implementation_key(4992)
inline Word::_ApplicationPtr Word::Frameset::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(4993)
inline long Word::Frameset::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4994)
inline IDispatchPtr Word::Frameset::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4995)
inline IUnknownPtr Word::Frameset::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(4996)
inline Word::FramesetPtr Word::Frameset::GetParentFrameset ( ) {
    struct Frameset * _result;
    HRESULT _hr = get_ParentFrameset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramesetPtr(_result, false);
}

#pragma implementation_key(4997)
inline enum WdFramesetType Word::Frameset::GetType ( ) {
    enum WdFramesetType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4998)
inline enum WdFramesetSizeType Word::Frameset::GetWidthType ( ) {
    enum WdFramesetSizeType _result;
    HRESULT _hr = get_WidthType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4999)
inline void Word::Frameset::PutWidthType ( enum WdFramesetSizeType prop ) {
    HRESULT _hr = put_WidthType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5000)
inline enum WdFramesetSizeType Word::Frameset::GetHeightType ( ) {
    enum WdFramesetSizeType _result;
    HRESULT _hr = get_HeightType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5001)
inline void Word::Frameset::PutHeightType ( enum WdFramesetSizeType prop ) {
    HRESULT _hr = put_HeightType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5002)
inline long Word::Frameset::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5003)
inline void Word::Frameset::PutWidth ( long prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5004)
inline long Word::Frameset::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5005)
inline void Word::Frameset::PutHeight ( long prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5006)
inline long Word::Frameset::GetChildFramesetCount ( ) {
    long _result;
    HRESULT _hr = get_ChildFramesetCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5007)
inline Word::FramesetPtr Word::Frameset::GetChildFramesetItem ( long Index ) {
    struct Frameset * _result;
    HRESULT _hr = get_ChildFramesetItem(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramesetPtr(_result, false);
}

#pragma implementation_key(5008)
inline float Word::Frameset::GetFramesetBorderWidth ( ) {
    float _result;
    HRESULT _hr = get_FramesetBorderWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5009)
inline void Word::Frameset::PutFramesetBorderWidth ( float prop ) {
    HRESULT _hr = put_FramesetBorderWidth(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5010)
inline enum WdColor Word::Frameset::GetFramesetBorderColor ( ) {
    enum WdColor _result;
    HRESULT _hr = get_FramesetBorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5011)
inline void Word::Frameset::PutFramesetBorderColor ( enum WdColor prop ) {
    HRESULT _hr = put_FramesetBorderColor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5012)
inline enum WdScrollbarType Word::Frameset::GetFrameScrollbarType ( ) {
    enum WdScrollbarType _result;
    HRESULT _hr = get_FrameScrollbarType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5013)
inline void Word::Frameset::PutFrameScrollbarType ( enum WdScrollbarType prop ) {
    HRESULT _hr = put_FrameScrollbarType(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5014)
inline VARIANT_BOOL Word::Frameset::GetFrameResizable ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FrameResizable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5015)
inline void Word::Frameset::PutFrameResizable ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_FrameResizable(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5016)
inline _bstr_t Word::Frameset::GetFrameName ( ) {
    BSTR _result;
    HRESULT _hr = get_FrameName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5017)
inline void Word::Frameset::PutFrameName ( _bstr_t prop ) {
    HRESULT _hr = put_FrameName(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5018)
inline VARIANT_BOOL Word::Frameset::GetFrameDisplayBorders ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FrameDisplayBorders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5019)
inline void Word::Frameset::PutFrameDisplayBorders ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_FrameDisplayBorders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5020)
inline _bstr_t Word::Frameset::GetFrameDefaultURL ( ) {
    BSTR _result;
    HRESULT _hr = get_FrameDefaultURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5021)
inline void Word::Frameset::PutFrameDefaultURL ( _bstr_t prop ) {
    HRESULT _hr = put_FrameDefaultURL(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5022)
inline VARIANT_BOOL Word::Frameset::GetFrameLinkToFile ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_FrameLinkToFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5023)
inline void Word::Frameset::PutFrameLinkToFile ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_FrameLinkToFile(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5024)
inline Word::FramesetPtr Word::Frameset::AddNewFrame ( enum WdFramesetNewFrameLocation Where ) {
    struct Frameset * _result;
    HRESULT _hr = raw_AddNewFrame(Where, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FramesetPtr(_result, false);
}

#pragma implementation_key(5025)
inline HRESULT Word::Frameset::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DefaultWebOptions wrapper method implementations
//

#pragma implementation_key(5026)
inline Word::_ApplicationPtr Word::DefaultWebOptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5027)
inline long Word::DefaultWebOptions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5028)
inline IDispatchPtr Word::DefaultWebOptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5029)
inline VARIANT_BOOL Word::DefaultWebOptions::GetOptimizeForBrowser ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OptimizeForBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5030)
inline void Word::DefaultWebOptions::PutOptimizeForBrowser ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_OptimizeForBrowser(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5031)
inline enum WdBrowserLevel Word::DefaultWebOptions::GetBrowserLevel ( ) {
    enum WdBrowserLevel _result;
    HRESULT _hr = get_BrowserLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5032)
inline void Word::DefaultWebOptions::PutBrowserLevel ( enum WdBrowserLevel prop ) {
    HRESULT _hr = put_BrowserLevel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5033)
inline VARIANT_BOOL Word::DefaultWebOptions::GetRelyOnCSS ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RelyOnCSS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5034)
inline void Word::DefaultWebOptions::PutRelyOnCSS ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_RelyOnCSS(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5035)
inline VARIANT_BOOL Word::DefaultWebOptions::GetOrganizeInFolder ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5036)
inline void Word::DefaultWebOptions::PutOrganizeInFolder ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_OrganizeInFolder(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5037)
inline VARIANT_BOOL Word::DefaultWebOptions::GetUpdateLinksOnSave ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UpdateLinksOnSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5038)
inline void Word::DefaultWebOptions::PutUpdateLinksOnSave ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UpdateLinksOnSave(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5039)
inline VARIANT_BOOL Word::DefaultWebOptions::GetUseLongFileNames ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5040)
inline void Word::DefaultWebOptions::PutUseLongFileNames ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseLongFileNames(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5041)
inline VARIANT_BOOL Word::DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CheckIfOfficeIsHTMLEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5042)
inline void Word::DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CheckIfOfficeIsHTMLEditor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5043)
inline VARIANT_BOOL Word::DefaultWebOptions::GetCheckIfWordIsDefaultHTMLEditor ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CheckIfWordIsDefaultHTMLEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5044)
inline void Word::DefaultWebOptions::PutCheckIfWordIsDefaultHTMLEditor ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_CheckIfWordIsDefaultHTMLEditor(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5045)
inline VARIANT_BOOL Word::DefaultWebOptions::GetRelyOnVML ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5046)
inline void Word::DefaultWebOptions::PutRelyOnVML ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_RelyOnVML(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5047)
inline VARIANT_BOOL Word::DefaultWebOptions::GetAllowPNG ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5048)
inline void Word::DefaultWebOptions::PutAllowPNG ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AllowPNG(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5049)
inline enum Office::MsoScreenSize Word::DefaultWebOptions::GetScreenSize ( ) {
    enum Office::MsoScreenSize _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5050)
inline void Word::DefaultWebOptions::PutScreenSize ( enum Office::MsoScreenSize prop ) {
    HRESULT _hr = put_ScreenSize(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5051)
inline long Word::DefaultWebOptions::GetPixelsPerInch ( ) {
    long _result;
    HRESULT _hr = get_PixelsPerInch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5052)
inline void Word::DefaultWebOptions::PutPixelsPerInch ( long prop ) {
    HRESULT _hr = put_PixelsPerInch(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5053)
inline enum Office::MsoEncoding Word::DefaultWebOptions::GetEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5054)
inline void Word::DefaultWebOptions::PutEncoding ( enum Office::MsoEncoding prop ) {
    HRESULT _hr = put_Encoding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5055)
inline VARIANT_BOOL Word::DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AlwaysSaveInDefaultEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5056)
inline void Word::DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AlwaysSaveInDefaultEncoding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5057)
inline Office::WebPageFontsPtr Word::DefaultWebOptions::GetFonts ( ) {
    struct Office::WebPageFonts * _result;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::WebPageFontsPtr(_result, false);
}

#pragma implementation_key(5058)
inline _bstr_t Word::DefaultWebOptions::GetFolderSuffix ( ) {
    BSTR _result;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5059)
inline enum Office::MsoTargetBrowser Word::DefaultWebOptions::GetTargetBrowser ( ) {
    enum Office::MsoTargetBrowser _result;
    HRESULT _hr = get_TargetBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5060)
inline void Word::DefaultWebOptions::PutTargetBrowser ( enum Office::MsoTargetBrowser prop ) {
    HRESULT _hr = put_TargetBrowser(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5061)
inline VARIANT_BOOL Word::DefaultWebOptions::GetSaveNewWebPagesAsWebArchives ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SaveNewWebPagesAsWebArchives(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5062)
inline void Word::DefaultWebOptions::PutSaveNewWebPagesAsWebArchives ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_SaveNewWebPagesAsWebArchives(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface WebOptions wrapper method implementations
//

#pragma implementation_key(5063)
inline Word::_ApplicationPtr Word::WebOptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5064)
inline long Word::WebOptions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5065)
inline IDispatchPtr Word::WebOptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5066)
inline VARIANT_BOOL Word::WebOptions::GetOptimizeForBrowser ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OptimizeForBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5067)
inline void Word::WebOptions::PutOptimizeForBrowser ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_OptimizeForBrowser(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5068)
inline enum WdBrowserLevel Word::WebOptions::GetBrowserLevel ( ) {
    enum WdBrowserLevel _result;
    HRESULT _hr = get_BrowserLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5069)
inline void Word::WebOptions::PutBrowserLevel ( enum WdBrowserLevel prop ) {
    HRESULT _hr = put_BrowserLevel(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5070)
inline VARIANT_BOOL Word::WebOptions::GetRelyOnCSS ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RelyOnCSS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5071)
inline void Word::WebOptions::PutRelyOnCSS ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_RelyOnCSS(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5072)
inline VARIANT_BOOL Word::WebOptions::GetOrganizeInFolder ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5073)
inline void Word::WebOptions::PutOrganizeInFolder ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_OrganizeInFolder(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5074)
inline VARIANT_BOOL Word::WebOptions::GetUseLongFileNames ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5075)
inline void Word::WebOptions::PutUseLongFileNames ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_UseLongFileNames(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5076)
inline VARIANT_BOOL Word::WebOptions::GetRelyOnVML ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5077)
inline void Word::WebOptions::PutRelyOnVML ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_RelyOnVML(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5078)
inline VARIANT_BOOL Word::WebOptions::GetAllowPNG ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5079)
inline void Word::WebOptions::PutAllowPNG ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AllowPNG(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5080)
inline enum Office::MsoScreenSize Word::WebOptions::GetScreenSize ( ) {
    enum Office::MsoScreenSize _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5081)
inline void Word::WebOptions::PutScreenSize ( enum Office::MsoScreenSize prop ) {
    HRESULT _hr = put_ScreenSize(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5082)
inline long Word::WebOptions::GetPixelsPerInch ( ) {
    long _result;
    HRESULT _hr = get_PixelsPerInch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5083)
inline void Word::WebOptions::PutPixelsPerInch ( long prop ) {
    HRESULT _hr = put_PixelsPerInch(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5084)
inline enum Office::MsoEncoding Word::WebOptions::GetEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5085)
inline void Word::WebOptions::PutEncoding ( enum Office::MsoEncoding prop ) {
    HRESULT _hr = put_Encoding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5086)
inline _bstr_t Word::WebOptions::GetFolderSuffix ( ) {
    BSTR _result;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5087)
inline HRESULT Word::WebOptions::UseDefaultFolderSuffix ( ) {
    HRESULT _hr = raw_UseDefaultFolderSuffix();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5088)
inline enum Office::MsoTargetBrowser Word::WebOptions::GetTargetBrowser ( ) {
    enum Office::MsoTargetBrowser _result;
    HRESULT _hr = get_TargetBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5089)
inline void Word::WebOptions::PutTargetBrowser ( enum Office::MsoTargetBrowser prop ) {
    HRESULT _hr = put_TargetBrowser(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface OtherCorrectionsExceptions wrapper method implementations
//

#pragma implementation_key(5090)
inline Word::_ApplicationPtr Word::OtherCorrectionsExceptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5091)
inline long Word::OtherCorrectionsExceptions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5092)
inline IDispatchPtr Word::OtherCorrectionsExceptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5093)
inline IUnknownPtr Word::OtherCorrectionsExceptions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5094)
inline long Word::OtherCorrectionsExceptions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5095)
inline Word::OtherCorrectionsExceptionPtr Word::OtherCorrectionsExceptions::Item ( VARIANT * Index ) {
    struct OtherCorrectionsException * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OtherCorrectionsExceptionPtr(_result, false);
}

#pragma implementation_key(5096)
inline Word::OtherCorrectionsExceptionPtr Word::OtherCorrectionsExceptions::Add ( _bstr_t Name ) {
    struct OtherCorrectionsException * _result;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OtherCorrectionsExceptionPtr(_result, false);
}

//
// interface OtherCorrectionsException wrapper method implementations
//

#pragma implementation_key(5097)
inline Word::_ApplicationPtr Word::OtherCorrectionsException::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5098)
inline long Word::OtherCorrectionsException::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5099)
inline IDispatchPtr Word::OtherCorrectionsException::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5100)
inline long Word::OtherCorrectionsException::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5101)
inline _bstr_t Word::OtherCorrectionsException::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5102)
inline HRESULT Word::OtherCorrectionsException::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface EmailSignatureEntries wrapper method implementations
//

#pragma implementation_key(5103)
inline Word::_ApplicationPtr Word::EmailSignatureEntries::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5104)
inline long Word::EmailSignatureEntries::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5105)
inline IDispatchPtr Word::EmailSignatureEntries::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5106)
inline IUnknownPtr Word::EmailSignatureEntries::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5107)
inline long Word::EmailSignatureEntries::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5108)
inline Word::EmailSignatureEntryPtr Word::EmailSignatureEntries::Item ( VARIANT * Index ) {
    struct EmailSignatureEntry * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EmailSignatureEntryPtr(_result, false);
}

#pragma implementation_key(5109)
inline Word::EmailSignatureEntryPtr Word::EmailSignatureEntries::Add ( _bstr_t Name, struct Range * Range ) {
    struct EmailSignatureEntry * _result;
    HRESULT _hr = raw_Add(Name, Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EmailSignatureEntryPtr(_result, false);
}

//
// interface EmailSignatureEntry wrapper method implementations
//

#pragma implementation_key(5110)
inline Word::_ApplicationPtr Word::EmailSignatureEntry::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5111)
inline long Word::EmailSignatureEntry::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5112)
inline IDispatchPtr Word::EmailSignatureEntry::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5113)
inline long Word::EmailSignatureEntry::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5114)
inline _bstr_t Word::EmailSignatureEntry::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5115)
inline void Word::EmailSignatureEntry::PutName ( _bstr_t prop ) {
    HRESULT _hr = put_Name(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5116)
inline HRESULT Word::EmailSignatureEntry::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface HTMLDivision wrapper method implementations
//

#pragma implementation_key(5117)
inline Word::_ApplicationPtr Word::HTMLDivision::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5118)
inline long Word::HTMLDivision::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5119)
inline IDispatchPtr Word::HTMLDivision::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5120)
inline Word::RangePtr Word::HTMLDivision::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(5121)
inline Word::BordersPtr Word::HTMLDivision::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(5122)
inline float Word::HTMLDivision::GetLeftIndent ( ) {
    float _result;
    HRESULT _hr = get_LeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5123)
inline void Word::HTMLDivision::PutLeftIndent ( float prop ) {
    HRESULT _hr = put_LeftIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5124)
inline float Word::HTMLDivision::GetRightIndent ( ) {
    float _result;
    HRESULT _hr = get_RightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5125)
inline void Word::HTMLDivision::PutRightIndent ( float prop ) {
    HRESULT _hr = put_RightIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5126)
inline float Word::HTMLDivision::GetSpaceBefore ( ) {
    float _result;
    HRESULT _hr = get_SpaceBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5127)
inline void Word::HTMLDivision::PutSpaceBefore ( float prop ) {
    HRESULT _hr = put_SpaceBefore(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5128)
inline float Word::HTMLDivision::GetSpaceAfter ( ) {
    float _result;
    HRESULT _hr = get_SpaceAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5129)
inline void Word::HTMLDivision::PutSpaceAfter ( float prop ) {
    HRESULT _hr = put_SpaceAfter(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5130)
inline Word::HTMLDivisionsPtr Word::HTMLDivision::GetHTMLDivisions ( ) {
    struct HTMLDivisions * _result;
    HRESULT _hr = get_HTMLDivisions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLDivisionsPtr(_result, false);
}

#pragma implementation_key(5131)
inline Word::HTMLDivisionPtr Word::HTMLDivision::HTMLDivisionParent ( VARIANT * LevelsUp ) {
    struct HTMLDivision * _result;
    HRESULT _hr = raw_HTMLDivisionParent(LevelsUp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLDivisionPtr(_result, false);
}

#pragma implementation_key(5132)
inline HRESULT Word::HTMLDivision::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface HTMLDivisions wrapper method implementations
//

#pragma implementation_key(5133)
inline Word::_ApplicationPtr Word::HTMLDivisions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5134)
inline long Word::HTMLDivisions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5135)
inline IDispatchPtr Word::HTMLDivisions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5136)
inline IUnknownPtr Word::HTMLDivisions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5137)
inline long Word::HTMLDivisions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5138)
inline long Word::HTMLDivisions::GetNestingLevel ( ) {
    long _result;
    HRESULT _hr = get_NestingLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5139)
inline Word::HTMLDivisionPtr Word::HTMLDivisions::Add ( VARIANT * Range ) {
    struct HTMLDivision * _result;
    HRESULT _hr = raw_Add(Range, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLDivisionPtr(_result, false);
}

#pragma implementation_key(5140)
inline Word::HTMLDivisionPtr Word::HTMLDivisions::Item ( long Index ) {
    struct HTMLDivision * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLDivisionPtr(_result, false);
}

//
// interface DiagramNode wrapper method implementations
//

#pragma implementation_key(5141)
inline Word::_ApplicationPtr Word::DiagramNode::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5142)
inline long Word::DiagramNode::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5143)
inline IDispatchPtr Word::DiagramNode::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5144)
inline Word::DiagramNodeChildrenPtr Word::DiagramNode::GetChildren ( ) {
    struct DiagramNodeChildren * _result;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodeChildrenPtr(_result, false);
}

#pragma implementation_key(5145)
inline Word::ShapePtr Word::DiagramNode::GetShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5146)
inline Word::DiagramNodePtr Word::DiagramNode::GetRoot ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(5147)
inline Word::DiagramPtr Word::DiagramNode::GetDiagram ( ) {
    struct Diagram * _result;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramPtr(_result, false);
}

#pragma implementation_key(5148)
inline enum Office::MsoOrgChartLayoutType Word::DiagramNode::GetLayout ( ) {
    enum Office::MsoOrgChartLayoutType _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5149)
inline void Word::DiagramNode::PutLayout ( enum Office::MsoOrgChartLayoutType prop ) {
    HRESULT _hr = put_Layout(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5150)
inline Word::ShapePtr Word::DiagramNode::GetTextShape ( ) {
    struct Shape * _result;
    HRESULT _hr = get_TextShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5151)
inline Word::DiagramNodePtr Word::DiagramNode::AddNode ( enum Office::MsoRelativeNodePosition Pos, enum Office::MsoDiagramNodeType NodeType ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_AddNode(Pos, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(5152)
inline HRESULT Word::DiagramNode::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5153)
inline HRESULT Word::DiagramNode::MoveNode ( struct DiagramNode * * TargetNode, enum Office::MsoRelativeNodePosition Pos ) {
    HRESULT _hr = raw_MoveNode(TargetNode, Pos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5154)
inline HRESULT Word::DiagramNode::ReplaceNode ( struct DiagramNode * * TargetNode ) {
    HRESULT _hr = raw_ReplaceNode(TargetNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5155)
inline HRESULT Word::DiagramNode::SwapNode ( struct DiagramNode * * TargetNode, enum Office::MsoRelativeNodePosition Pos ) {
    HRESULT _hr = raw_SwapNode(TargetNode, Pos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5156)
inline Word::DiagramNodePtr Word::DiagramNode::CloneNode ( VARIANT_BOOL copyChildren, struct DiagramNode * * TargetNode, enum Office::MsoRelativeNodePosition Pos ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_CloneNode(copyChildren, TargetNode, Pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(5157)
inline HRESULT Word::DiagramNode::TransferChildren ( struct DiagramNode * * ReceivingNode ) {
    HRESULT _hr = raw_TransferChildren(ReceivingNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5158)
inline Word::DiagramNodePtr Word::DiagramNode::NextNode ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_NextNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(5159)
inline Word::DiagramNodePtr Word::DiagramNode::PrevNode ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_PrevNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

//
// interface DiagramNodeChildren wrapper method implementations
//

#pragma implementation_key(5160)
inline Word::_ApplicationPtr Word::DiagramNodeChildren::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5161)
inline long Word::DiagramNodeChildren::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5162)
inline IUnknownPtr Word::DiagramNodeChildren::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5163)
inline IDispatchPtr Word::DiagramNodeChildren::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5164)
inline long Word::DiagramNodeChildren::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5165)
inline Word::DiagramNodePtr Word::DiagramNodeChildren::GetFirstChild ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_FirstChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(5166)
inline Word::DiagramNodePtr Word::DiagramNodeChildren::GetLastChild ( ) {
    struct DiagramNode * _result;
    HRESULT _hr = get_LastChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(5167)
inline Word::DiagramNodePtr Word::DiagramNodeChildren::Item ( VARIANT * Index ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(5168)
inline Word::DiagramNodePtr Word::DiagramNodeChildren::AddNode ( VARIANT * Index, enum Office::MsoDiagramNodeType NodeType ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_AddNode(Index, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(5169)
inline HRESULT Word::DiagramNodeChildren::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DiagramNodes wrapper method implementations
//

#pragma implementation_key(5170)
inline Word::_ApplicationPtr Word::DiagramNodes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5171)
inline long Word::DiagramNodes::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5172)
inline IUnknownPtr Word::DiagramNodes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5173)
inline IDispatchPtr Word::DiagramNodes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5174)
inline long Word::DiagramNodes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5175)
inline Word::DiagramNodePtr Word::DiagramNodes::Item ( VARIANT * Index ) {
    struct DiagramNode * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(5176)
inline HRESULT Word::DiagramNodes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Diagram wrapper method implementations
//

#pragma implementation_key(5177)
inline Word::_ApplicationPtr Word::Diagram::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5178)
inline long Word::Diagram::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5179)
inline IDispatchPtr Word::Diagram::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5180)
inline Word::DiagramNodesPtr Word::Diagram::GetNodes ( ) {
    struct DiagramNodes * _result;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodesPtr(_result, false);
}

#pragma implementation_key(5181)
inline enum Office::MsoDiagramType Word::Diagram::GetType ( ) {
    enum Office::MsoDiagramType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5182)
inline enum Office::MsoTriState Word::Diagram::GetAutoLayout ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5183)
inline void Word::Diagram::PutAutoLayout ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_AutoLayout(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5184)
inline enum Office::MsoTriState Word::Diagram::GetReverse ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Reverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5185)
inline void Word::Diagram::PutReverse ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_Reverse(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5186)
inline enum Office::MsoTriState Word::Diagram::GetAutoFormat ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5187)
inline void Word::Diagram::PutAutoFormat ( enum Office::MsoTriState prop ) {
    HRESULT _hr = put_AutoFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5188)
inline HRESULT Word::Diagram::Convert ( enum Office::MsoDiagramType Type ) {
    HRESULT _hr = raw_Convert(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface CustomProperty wrapper method implementations
//

#pragma implementation_key(5189)
inline _bstr_t Word::CustomProperty::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5190)
inline _bstr_t Word::CustomProperty::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5191)
inline void Word::CustomProperty::PutValue ( _bstr_t prop ) {
    HRESULT _hr = put_Value(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5192)
inline Word::_ApplicationPtr Word::CustomProperty::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5193)
inline long Word::CustomProperty::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5194)
inline IDispatchPtr Word::CustomProperty::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5195)
inline HRESULT Word::CustomProperty::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface CustomProperties wrapper method implementations
//

#pragma implementation_key(5196)
inline IUnknownPtr Word::CustomProperties::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5197)
inline long Word::CustomProperties::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5198)
inline Word::_ApplicationPtr Word::CustomProperties::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5199)
inline long Word::CustomProperties::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5200)
inline IDispatchPtr Word::CustomProperties::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5201)
inline Word::CustomPropertyPtr Word::CustomProperties::Item ( VARIANT * Index ) {
    struct CustomProperty * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomPropertyPtr(_result, false);
}

#pragma implementation_key(5202)
inline Word::CustomPropertyPtr Word::CustomProperties::Add ( _bstr_t Name, _bstr_t Value ) {
    struct CustomProperty * _result;
    HRESULT _hr = raw_Add(Name, Value, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomPropertyPtr(_result, false);
}

//
// interface SmartTag wrapper method implementations
//

#pragma implementation_key(5203)
inline _bstr_t Word::SmartTag::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5204)
inline _bstr_t Word::SmartTag::GetXML ( ) {
    BSTR _result;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5205)
inline Word::RangePtr Word::SmartTag::GetRange ( ) {
    struct Range * _result;
    HRESULT _hr = get_Range(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RangePtr(_result, false);
}

#pragma implementation_key(5206)
inline _bstr_t Word::SmartTag::GetDownloadURL ( ) {
    BSTR _result;
    HRESULT _hr = get_DownloadURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5207)
inline Word::CustomPropertiesPtr Word::SmartTag::GetProperties ( ) {
    struct CustomProperties * _result;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomPropertiesPtr(_result, false);
}

#pragma implementation_key(5208)
inline Word::_ApplicationPtr Word::SmartTag::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5209)
inline long Word::SmartTag::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5210)
inline IDispatchPtr Word::SmartTag::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5211)
inline HRESULT Word::SmartTag::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5212)
inline HRESULT Word::SmartTag::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SmartTags wrapper method implementations
//

#pragma implementation_key(5213)
inline IUnknownPtr Word::SmartTags::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5214)
inline long Word::SmartTags::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5215)
inline Word::_ApplicationPtr Word::SmartTags::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5216)
inline long Word::SmartTags::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5217)
inline IDispatchPtr Word::SmartTags::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5218)
inline Word::SmartTagPtr Word::SmartTags::Item ( VARIANT * Index ) {
    struct SmartTag * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagPtr(_result, false);
}

#pragma implementation_key(5219)
inline Word::SmartTagPtr Word::SmartTags::Add ( _bstr_t Name, VARIANT * Range, VARIANT * Properties ) {
    struct SmartTag * _result;
    HRESULT _hr = raw_Add(Name, Range, Properties, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartTagPtr(_result, false);
}

//
// interface StyleSheet wrapper method implementations
//

#pragma implementation_key(5220)
inline Word::_ApplicationPtr Word::StyleSheet::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5221)
inline long Word::StyleSheet::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5222)
inline IDispatchPtr Word::StyleSheet::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5223)
inline _bstr_t Word::StyleSheet::GetFullName ( ) {
    BSTR _result;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5224)
inline long Word::StyleSheet::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5225)
inline _bstr_t Word::StyleSheet::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5226)
inline _bstr_t Word::StyleSheet::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5227)
inline enum WdStyleSheetLinkType Word::StyleSheet::GetType ( ) {
    enum WdStyleSheetLinkType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5228)
inline void Word::StyleSheet::PutType ( enum WdStyleSheetLinkType prop ) {
    HRESULT _hr = put_Type(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5229)
inline _bstr_t Word::StyleSheet::GetTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5230)
inline void Word::StyleSheet::PutTitle ( _bstr_t prop ) {
    HRESULT _hr = put_Title(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5231)
inline HRESULT Word::StyleSheet::Move ( enum WdStyleSheetPrecedence Precedence ) {
    HRESULT _hr = raw_Move(Precedence);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5232)
inline HRESULT Word::StyleSheet::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface StyleSheets wrapper method implementations
//

#pragma implementation_key(5233)
inline Word::_ApplicationPtr Word::StyleSheets::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5234)
inline long Word::StyleSheets::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5235)
inline IDispatchPtr Word::StyleSheets::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5236)
inline IUnknownPtr Word::StyleSheets::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5237)
inline long Word::StyleSheets::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5238)
inline Word::StyleSheetPtr Word::StyleSheets::Item ( VARIANT * Index ) {
    struct StyleSheet * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StyleSheetPtr(_result, false);
}

#pragma implementation_key(5239)
inline Word::StyleSheetPtr Word::StyleSheets::Add ( _bstr_t FileName, enum WdStyleSheetLinkType LinkType, _bstr_t Title, enum WdStyleSheetPrecedence Precedence ) {
    struct StyleSheet * _result;
    HRESULT _hr = raw_Add(FileName, LinkType, Title, Precedence, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return StyleSheetPtr(_result, false);
}

//
// interface MappedDataField wrapper method implementations
//

#pragma implementation_key(5240)
inline Word::_ApplicationPtr Word::MappedDataField::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5241)
inline long Word::MappedDataField::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5242)
inline IDispatchPtr Word::MappedDataField::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5243)
inline long Word::MappedDataField::GetIndex ( ) {
    long _result;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5244)
inline _bstr_t Word::MappedDataField::GetDataFieldName ( ) {
    BSTR _result;
    HRESULT _hr = get_DataFieldName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5245)
inline _bstr_t Word::MappedDataField::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5246)
inline _bstr_t Word::MappedDataField::GetValue ( ) {
    BSTR _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5247)
inline long Word::MappedDataField::GetDataFieldIndex ( ) {
    long _result;
    HRESULT _hr = get_DataFieldIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5248)
inline void Word::MappedDataField::PutDataFieldIndex ( long prop ) {
    HRESULT _hr = put_DataFieldIndex(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface MappedDataFields wrapper method implementations
//

#pragma implementation_key(5249)
inline Word::_ApplicationPtr Word::MappedDataFields::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5250)
inline long Word::MappedDataFields::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5251)
inline IDispatchPtr Word::MappedDataFields::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5252)
inline long Word::MappedDataFields::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5253)
inline IUnknownPtr Word::MappedDataFields::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5254)
inline Word::MappedDataFieldPtr Word::MappedDataFields::Item ( enum WdMappedDataFields Index ) {
    struct MappedDataField * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MappedDataFieldPtr(_result, false);
}

//
// interface CanvasShapes wrapper method implementations
//

#pragma implementation_key(5255)
inline Word::_ApplicationPtr Word::CanvasShapes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5256)
inline long Word::CanvasShapes::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5257)
inline IDispatchPtr Word::CanvasShapes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5258)
inline long Word::CanvasShapes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5259)
inline IUnknownPtr Word::CanvasShapes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5260)
inline Word::ShapePtr Word::CanvasShapes::Item ( VARIANT * Index ) {
    struct Shape * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5261)
inline Word::ShapePtr Word::CanvasShapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5262)
inline Word::ShapePtr Word::CanvasShapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5263)
inline Word::ShapePtr Word::CanvasShapes::AddCurve ( VARIANT * SafeArrayOfPoints ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5264)
inline Word::ShapePtr Word::CanvasShapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5265)
inline Word::ShapePtr Word::CanvasShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5266)
inline Word::ShapePtr Word::CanvasShapes::AddPicture ( _bstr_t FileName, VARIANT * LinkToFile, VARIANT * SaveWithDocument, VARIANT * Left, VARIANT * Top, VARIANT * Width, VARIANT * Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5267)
inline Word::ShapePtr Word::CanvasShapes::AddPolyline ( VARIANT * SafeArrayOfPoints ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5268)
inline Word::ShapePtr Word::CanvasShapes::AddShape ( long Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5269)
inline Word::ShapePtr Word::CanvasShapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5270)
inline Word::ShapePtr Word::CanvasShapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(5271)
inline Word::FreeformBuilderPtr Word::CanvasShapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(5272)
inline Word::ShapeRangePtr Word::CanvasShapes::Range ( VARIANT * Index ) {
    struct ShapeRange * _result;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(5273)
inline HRESULT Word::CanvasShapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TableStyle wrapper method implementations
//

#pragma implementation_key(5274)
inline Word::_ApplicationPtr Word::TableStyle::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5275)
inline long Word::TableStyle::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5276)
inline IDispatchPtr Word::TableStyle::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5277)
inline VARIANT_BOOL Word::TableStyle::GetAllowPageBreaks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AllowPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5278)
inline void Word::TableStyle::PutAllowPageBreaks ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_AllowPageBreaks(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5279)
inline Word::BordersPtr Word::TableStyle::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(5280)
inline void Word::TableStyle::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5281)
inline float Word::TableStyle::GetBottomPadding ( ) {
    float _result;
    HRESULT _hr = get_BottomPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5282)
inline void Word::TableStyle::PutBottomPadding ( float prop ) {
    HRESULT _hr = put_BottomPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5283)
inline float Word::TableStyle::GetLeftPadding ( ) {
    float _result;
    HRESULT _hr = get_LeftPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5284)
inline void Word::TableStyle::PutLeftPadding ( float prop ) {
    HRESULT _hr = put_LeftPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5285)
inline float Word::TableStyle::GetTopPadding ( ) {
    float _result;
    HRESULT _hr = get_TopPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5286)
inline void Word::TableStyle::PutTopPadding ( float prop ) {
    HRESULT _hr = put_TopPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5287)
inline float Word::TableStyle::GetRightPadding ( ) {
    float _result;
    HRESULT _hr = get_RightPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5288)
inline void Word::TableStyle::PutRightPadding ( float prop ) {
    HRESULT _hr = put_RightPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5289)
inline enum WdRowAlignment Word::TableStyle::GetAlignment ( ) {
    enum WdRowAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5290)
inline void Word::TableStyle::PutAlignment ( enum WdRowAlignment prop ) {
    HRESULT _hr = put_Alignment(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5291)
inline float Word::TableStyle::GetSpacing ( ) {
    float _result;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5292)
inline void Word::TableStyle::PutSpacing ( float prop ) {
    HRESULT _hr = put_Spacing(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5293)
inline Word::ConditionalStylePtr Word::TableStyle::Condition ( enum WdConditionCode ConditionCode ) {
    struct ConditionalStyle * _result;
    HRESULT _hr = raw_Condition(ConditionCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConditionalStylePtr(_result, false);
}

#pragma implementation_key(5294)
inline enum WdTableDirection Word::TableStyle::GetTableDirection ( ) {
    enum WdTableDirection _result;
    HRESULT _hr = get_TableDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5295)
inline void Word::TableStyle::PutTableDirection ( enum WdTableDirection prop ) {
    HRESULT _hr = put_TableDirection(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5296)
inline long Word::TableStyle::GetAllowBreakAcrossPage ( ) {
    long _result;
    HRESULT _hr = get_AllowBreakAcrossPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5297)
inline void Word::TableStyle::PutAllowBreakAcrossPage ( long prop ) {
    HRESULT _hr = put_AllowBreakAcrossPage(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5298)
inline float Word::TableStyle::GetLeftIndent ( ) {
    float _result;
    HRESULT _hr = get_LeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5299)
inline void Word::TableStyle::PutLeftIndent ( float prop ) {
    HRESULT _hr = put_LeftIndent(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5300)
inline Word::ShadingPtr Word::TableStyle::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(5301)
inline long Word::TableStyle::GetRowStripe ( ) {
    long _result;
    HRESULT _hr = get_RowStripe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5302)
inline void Word::TableStyle::PutRowStripe ( long prop ) {
    HRESULT _hr = put_RowStripe(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5303)
inline long Word::TableStyle::GetColumnStripe ( ) {
    long _result;
    HRESULT _hr = get_ColumnStripe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5304)
inline void Word::TableStyle::PutColumnStripe ( long prop ) {
    HRESULT _hr = put_ColumnStripe(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ConditionalStyle wrapper method implementations
//

#pragma implementation_key(5305)
inline Word::_ApplicationPtr Word::ConditionalStyle::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5306)
inline long Word::ConditionalStyle::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5307)
inline IDispatchPtr Word::ConditionalStyle::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5308)
inline Word::ShadingPtr Word::ConditionalStyle::GetShading ( ) {
    struct Shading * _result;
    HRESULT _hr = get_Shading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadingPtr(_result, false);
}

#pragma implementation_key(5309)
inline Word::BordersPtr Word::ConditionalStyle::GetBorders ( ) {
    struct Borders * _result;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(5310)
inline void Word::ConditionalStyle::PutBorders ( struct Borders * prop ) {
    HRESULT _hr = put_Borders(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5311)
inline float Word::ConditionalStyle::GetBottomPadding ( ) {
    float _result;
    HRESULT _hr = get_BottomPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5312)
inline void Word::ConditionalStyle::PutBottomPadding ( float prop ) {
    HRESULT _hr = put_BottomPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5313)
inline float Word::ConditionalStyle::GetTopPadding ( ) {
    float _result;
    HRESULT _hr = get_TopPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5314)
inline void Word::ConditionalStyle::PutTopPadding ( float prop ) {
    HRESULT _hr = put_TopPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5315)
inline float Word::ConditionalStyle::GetLeftPadding ( ) {
    float _result;
    HRESULT _hr = get_LeftPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5316)
inline void Word::ConditionalStyle::PutLeftPadding ( float prop ) {
    HRESULT _hr = put_LeftPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5317)
inline float Word::ConditionalStyle::GetRightPadding ( ) {
    float _result;
    HRESULT _hr = get_RightPadding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5318)
inline void Word::ConditionalStyle::PutRightPadding ( float prop ) {
    HRESULT _hr = put_RightPadding(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5319)
inline Word::_ParagraphFormatPtr Word::ConditionalStyle::GetParagraphFormat ( ) {
    struct _ParagraphFormat * _result;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(5320)
inline void Word::ConditionalStyle::PutParagraphFormat ( struct _ParagraphFormat * prop ) {
    HRESULT _hr = put_ParagraphFormat(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5321)
inline Word::_FontPtr Word::ConditionalStyle::GetFont ( ) {
    struct _Font * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FontPtr(_result, false);
}

#pragma implementation_key(5322)
inline void Word::ConditionalStyle::PutFont ( struct _Font * prop ) {
    HRESULT _hr = put_Font(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FootnoteOptions wrapper method implementations
//

#pragma implementation_key(5323)
inline Word::_ApplicationPtr Word::FootnoteOptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5324)
inline long Word::FootnoteOptions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5325)
inline IDispatchPtr Word::FootnoteOptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5326)
inline enum WdFootnoteLocation Word::FootnoteOptions::GetLocation ( ) {
    enum WdFootnoteLocation _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5327)
inline void Word::FootnoteOptions::PutLocation ( enum WdFootnoteLocation prop ) {
    HRESULT _hr = put_Location(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5328)
inline enum WdNoteNumberStyle Word::FootnoteOptions::GetNumberStyle ( ) {
    enum WdNoteNumberStyle _result;
    HRESULT _hr = get_NumberStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5329)
inline void Word::FootnoteOptions::PutNumberStyle ( enum WdNoteNumberStyle prop ) {
    HRESULT _hr = put_NumberStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5330)
inline long Word::FootnoteOptions::GetStartingNumber ( ) {
    long _result;
    HRESULT _hr = get_StartingNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5331)
inline void Word::FootnoteOptions::PutStartingNumber ( long prop ) {
    HRESULT _hr = put_StartingNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5332)
inline enum WdNumberingRule Word::FootnoteOptions::GetNumberingRule ( ) {
    enum WdNumberingRule _result;
    HRESULT _hr = get_NumberingRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5333)
inline void Word::FootnoteOptions::PutNumberingRule ( enum WdNumberingRule prop ) {
    HRESULT _hr = put_NumberingRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface EndnoteOptions wrapper method implementations
//

#pragma implementation_key(5334)
inline Word::_ApplicationPtr Word::EndnoteOptions::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5335)
inline long Word::EndnoteOptions::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5336)
inline IDispatchPtr Word::EndnoteOptions::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5337)
inline enum WdEndnoteLocation Word::EndnoteOptions::GetLocation ( ) {
    enum WdEndnoteLocation _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5338)
inline void Word::EndnoteOptions::PutLocation ( enum WdEndnoteLocation prop ) {
    HRESULT _hr = put_Location(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5339)
inline enum WdNoteNumberStyle Word::EndnoteOptions::GetNumberStyle ( ) {
    enum WdNoteNumberStyle _result;
    HRESULT _hr = get_NumberStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5340)
inline void Word::EndnoteOptions::PutNumberStyle ( enum WdNoteNumberStyle prop ) {
    HRESULT _hr = put_NumberStyle(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5341)
inline long Word::EndnoteOptions::GetStartingNumber ( ) {
    long _result;
    HRESULT _hr = get_StartingNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5342)
inline void Word::EndnoteOptions::PutStartingNumber ( long prop ) {
    HRESULT _hr = put_StartingNumber(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5343)
inline enum WdNumberingRule Word::EndnoteOptions::GetNumberingRule ( ) {
    enum WdNumberingRule _result;
    HRESULT _hr = get_NumberingRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5344)
inline void Word::EndnoteOptions::PutNumberingRule ( enum WdNumberingRule prop ) {
    HRESULT _hr = put_NumberingRule(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Reviewers wrapper method implementations
//

#pragma implementation_key(5345)
inline IUnknownPtr Word::Reviewers::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5346)
inline Word::_ApplicationPtr Word::Reviewers::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5347)
inline long Word::Reviewers::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5348)
inline IDispatchPtr Word::Reviewers::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5349)
inline long Word::Reviewers::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5350)
inline Word::ReviewerPtr Word::Reviewers::Item ( VARIANT * Index ) {
    struct Reviewer * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ReviewerPtr(_result, false);
}

//
// interface Reviewer wrapper method implementations
//

#pragma implementation_key(5351)
inline Word::_ApplicationPtr Word::Reviewer::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5352)
inline long Word::Reviewer::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5353)
inline IDispatchPtr Word::Reviewer::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5354)
inline VARIANT_BOOL Word::Reviewer::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5355)
inline void Word::Reviewer::PutVisible ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TaskPane wrapper method implementations
//

#pragma implementation_key(5356)
inline Word::_ApplicationPtr Word::TaskPane::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5357)
inline long Word::TaskPane::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5358)
inline IDispatchPtr Word::TaskPane::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5359)
inline VARIANT_BOOL Word::TaskPane::GetVisible ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5360)
inline void Word::TaskPane::PutVisible ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TaskPanes wrapper method implementations
//

#pragma implementation_key(5361)
inline IUnknownPtr Word::TaskPanes::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(5362)
inline long Word::TaskPanes::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5363)
inline Word::_ApplicationPtr Word::TaskPanes::GetApplication ( ) {
    struct _Application * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(5364)
inline long Word::TaskPanes::GetCreator ( ) {
    long _result;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(5365)
inline IDispatchPtr Word::TaskPanes::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5366)
inline Word::TaskPanePtr Word::TaskPanes::Item ( enum WdTaskPanes Index ) {
    struct TaskPane * _result;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TaskPanePtr(_result, false);
}

//
// interface IApplicationEvents3 wrapper method implementations
//

#pragma implementation_key(5367)
inline HRESULT Word::IApplicationEvents3::Startup ( ) {
    HRESULT _hr = raw_Startup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5368)
inline HRESULT Word::IApplicationEvents3::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5369)
inline HRESULT Word::IApplicationEvents3::DocumentChange ( ) {
    HRESULT _hr = raw_DocumentChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5370)
inline HRESULT Word::IApplicationEvents3::DocumentOpen ( struct _Document * Doc ) {
    HRESULT _hr = raw_DocumentOpen(Doc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5371)
inline HRESULT Word::IApplicationEvents3::DocumentBeforeClose ( struct _Document * Doc, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_DocumentBeforeClose(Doc, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5372)
inline HRESULT Word::IApplicationEvents3::DocumentBeforePrint ( struct _Document * Doc, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_DocumentBeforePrint(Doc, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5373)
inline HRESULT Word::IApplicationEvents3::DocumentBeforeSave ( struct _Document * Doc, VARIANT_BOOL * SaveAsUI, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_DocumentBeforeSave(Doc, SaveAsUI, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5374)
inline HRESULT Word::IApplicationEvents3::NewDocument ( struct _Document * Doc ) {
    HRESULT _hr = raw_NewDocument(Doc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5375)
inline HRESULT Word::IApplicationEvents3::WindowActivate ( struct _Document * Doc, struct Window * Wn ) {
    HRESULT _hr = raw_WindowActivate(Doc, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5376)
inline HRESULT Word::IApplicationEvents3::WindowDeactivate ( struct _Document * Doc, struct Window * Wn ) {
    HRESULT _hr = raw_WindowDeactivate(Doc, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5377)
inline HRESULT Word::IApplicationEvents3::WindowSelectionChange ( struct Selection * Sel ) {
    HRESULT _hr = raw_WindowSelectionChange(Sel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5378)
inline HRESULT Word::IApplicationEvents3::WindowBeforeRightClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WindowBeforeRightClick(Sel, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5379)
inline HRESULT Word::IApplicationEvents3::WindowBeforeDoubleClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WindowBeforeDoubleClick(Sel, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5380)
inline HRESULT Word::IApplicationEvents3::EPostagePropertyDialog ( struct _Document * Doc ) {
    HRESULT _hr = raw_EPostagePropertyDialog(Doc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5381)
inline HRESULT Word::IApplicationEvents3::EPostageInsert ( struct _Document * Doc ) {
    HRESULT _hr = raw_EPostageInsert(Doc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5382)
inline HRESULT Word::IApplicationEvents3::MailMergeAfterMerge ( struct _Document * Doc, struct _Document * DocResult ) {
    HRESULT _hr = raw_MailMergeAfterMerge(Doc, DocResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5383)
inline HRESULT Word::IApplicationEvents3::MailMergeAfterRecordMerge ( struct _Document * Doc ) {
    HRESULT _hr = raw_MailMergeAfterRecordMerge(Doc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5384)
inline HRESULT Word::IApplicationEvents3::MailMergeBeforeMerge ( struct _Document * Doc, long StartRecord, long EndRecord, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_MailMergeBeforeMerge(Doc, StartRecord, EndRecord, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5385)
inline HRESULT Word::IApplicationEvents3::MailMergeBeforeRecordMerge ( struct _Document * Doc, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_MailMergeBeforeRecordMerge(Doc, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5386)
inline HRESULT Word::IApplicationEvents3::MailMergeDataSourceLoad ( struct _Document * Doc ) {
    HRESULT _hr = raw_MailMergeDataSourceLoad(Doc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5387)
inline HRESULT Word::IApplicationEvents3::MailMergeDataSourceValidate ( struct _Document * Doc, VARIANT_BOOL * Handled ) {
    HRESULT _hr = raw_MailMergeDataSourceValidate(Doc, Handled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5388)
inline HRESULT Word::IApplicationEvents3::MailMergeWizardSendToCustom ( struct _Document * Doc ) {
    HRESULT _hr = raw_MailMergeWizardSendToCustom(Doc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5389)
inline HRESULT Word::IApplicationEvents3::MailMergeWizardStateChange ( struct _Document * Doc, int * FromState, int * ToState, VARIANT_BOOL * Handled ) {
    HRESULT _hr = raw_MailMergeWizardStateChange(Doc, FromState, ToState, Handled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5390)
inline HRESULT Word::IApplicationEvents3::WindowSize ( struct _Document * Doc, struct Window * Wn ) {
    HRESULT _hr = raw_WindowSize(Doc, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface ApplicationEvents3 wrapper method implementations
//

#pragma implementation_key(5391)
inline HRESULT Word::ApplicationEvents3::Quit ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(5392)
inline HRESULT Word::ApplicationEvents3::DocumentChange ( ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(5393)
inline HRESULT Word::ApplicationEvents3::DocumentOpen ( struct _Document * Doc ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Doc);
}

#pragma implementation_key(5394)
inline HRESULT Word::ApplicationEvents3::DocumentBeforeClose ( struct _Document * Doc, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Doc, Cancel);
}

#pragma implementation_key(5395)
inline HRESULT Word::ApplicationEvents3::DocumentBeforePrint ( struct _Document * Doc, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Doc, Cancel);
}

#pragma implementation_key(5396)
inline HRESULT Word::ApplicationEvents3::DocumentBeforeSave ( struct _Document * Doc, VARIANT_BOOL * SaveAsUI, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b\x400b", Doc, SaveAsUI, Cancel);
}

#pragma implementation_key(5397)
inline HRESULT Word::ApplicationEvents3::NewDocument ( struct _Document * Doc ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Doc);
}

#pragma implementation_key(5398)
inline HRESULT Word::ApplicationEvents3::WindowActivate ( struct _Document * Doc, struct Window * Wn ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Doc, Wn);
}

#pragma implementation_key(5399)
inline HRESULT Word::ApplicationEvents3::WindowDeactivate ( struct _Document * Doc, struct Window * Wn ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Doc, Wn);
}

#pragma implementation_key(5400)
inline HRESULT Word::ApplicationEvents3::WindowSelectionChange ( struct Selection * Sel ) {
    return _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Sel);
}

#pragma implementation_key(5401)
inline HRESULT Word::ApplicationEvents3::WindowBeforeRightClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Sel, Cancel);
}

#pragma implementation_key(5402)
inline HRESULT Word::ApplicationEvents3::WindowBeforeDoubleClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Sel, Cancel);
}

#pragma implementation_key(5403)
inline HRESULT Word::ApplicationEvents3::EPostagePropertyDialog ( struct _Document * Doc ) {
    return _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Doc);
}

#pragma implementation_key(5404)
inline HRESULT Word::ApplicationEvents3::EPostageInsert ( struct _Document * Doc ) {
    return _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Doc);
}

#pragma implementation_key(5405)
inline HRESULT Word::ApplicationEvents3::MailMergeAfterMerge ( struct _Document * Doc, struct _Document * DocResult ) {
    return _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Doc, DocResult);
}

#pragma implementation_key(5406)
inline HRESULT Word::ApplicationEvents3::MailMergeAfterRecordMerge ( struct _Document * Doc ) {
    return _com_dispatch_method(this, 0x12, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Doc);
}

#pragma implementation_key(5407)
inline HRESULT Word::ApplicationEvents3::MailMergeBeforeMerge ( struct _Document * Doc, long StartRecord, long EndRecord, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x13, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003\x400b", Doc, StartRecord, EndRecord, Cancel);
}

#pragma implementation_key(5408)
inline HRESULT Word::ApplicationEvents3::MailMergeBeforeRecordMerge ( struct _Document * Doc, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Doc, Cancel);
}

#pragma implementation_key(5409)
inline HRESULT Word::ApplicationEvents3::MailMergeDataSourceLoad ( struct _Document * Doc ) {
    return _com_dispatch_method(this, 0x15, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Doc);
}

#pragma implementation_key(5410)
inline HRESULT Word::ApplicationEvents3::MailMergeDataSourceValidate ( struct _Document * Doc, VARIANT_BOOL * Handled ) {
    return _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Doc, Handled);
}

#pragma implementation_key(5411)
inline HRESULT Word::ApplicationEvents3::MailMergeWizardSendToCustom ( struct _Document * Doc ) {
    return _com_dispatch_method(this, 0x17, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Doc);
}

#pragma implementation_key(5412)
inline HRESULT Word::ApplicationEvents3::MailMergeWizardStateChange ( struct _Document * Doc, int * FromState, int * ToState, VARIANT_BOOL * Handled ) {
    return _com_dispatch_method(this, 0x18, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x4003\x4003\x400b", Doc, FromState, ToState, Handled);
}

#pragma implementation_key(5413)
inline HRESULT Word::ApplicationEvents3::WindowSize ( struct _Document * Doc, struct Window * Wn ) {
    return _com_dispatch_method(this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Doc, Wn);
}
