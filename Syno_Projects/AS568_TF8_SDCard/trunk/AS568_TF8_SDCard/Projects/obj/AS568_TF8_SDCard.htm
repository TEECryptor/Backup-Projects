<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\AS568_TF8_SDCard.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\AS568_TF8_SDCard.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Sat Jan 23 06:19:46 2016
<BR><P>
<H3>Maximum Stack Usage =       3640 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SD_MsgProcess &rArr; SD_CmdProc &rArr; DoAS5xxCMD &rArr; CMD_GenRSAKeyPair &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1e]">ACMP_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ACMP_Handler</a><BR>
 <LI><a href="#[162]">SHA1_Update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[162]">SHA1_Update</a><BR>
 <LI><a href="#[161]">SM3_Update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[161]">SM3_Update</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ACMP_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[11]">AEA_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[2d]">Chap9_ClearFeature</a> from ctrlitem.o(.text) referenced from ctrlusb.o(.constdata)
 <LI><a href="#[32]">Chap9_GetConfig</a> from ctrlitem.o(.text) referenced from ctrlusb.o(.constdata)
 <LI><a href="#[31]">Chap9_GetDescriptor</a> from ctrlitem.o(.text) referenced from ctrlusb.o(.constdata)
 <LI><a href="#[34]">Chap9_GetInterface</a> from ctrlitem.o(.text) referenced from ctrlusb.o(.constdata)
 <LI><a href="#[2c]">Chap9_GetStatus</a> from ctrlitem.o(.text) referenced from ctrlusb.o(.constdata)
 <LI><a href="#[2e]">Chap9_SendACK</a> from ctrlitem.o(.text) referenced 3 times from ctrlusb.o(.constdata)
 <LI><a href="#[30]">Chap9_SetAddress</a> from ctrlitem.o(.text) referenced from ctrlusb.o(.constdata)
 <LI><a href="#[33]">Chap9_SetConfiguration</a> from ctrlitem.o(.text) referenced from ctrlusb.o(.constdata)
 <LI><a href="#[2f]">Chap9_SetFeature</a> from ctrlitem.o(.text) referenced from ctrlusb.o(.constdata)
 <LI><a href="#[35]">Chap9_SetInterface</a> from ctrlitem.o(.text) referenced from ctrlusb.o(.constdata)
 <LI><a href="#[e]">GPIO_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[19]">I2C0_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[1c]">ISO7816_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[21]">RTC_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[3c]">Reset_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[1d]">SCI_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[d]">SCM_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[22]">SDI_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[20]">SDSI_Handler</a> from sdsi.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[3a]">SD_Erase</a> from sd_systemapp.o(.text) referenced from sd_systemapp.o(.data)
 <LI><a href="#[3b]">SD_FileInit</a> from sd_systemapp.o(.text) referenced from sd_systemapp.o(.data)
 <LI><a href="#[36]">SD_Init</a> from sd_systemapp.o(.text) referenced from sd_systemapp.o(.data)
 <LI><a href="#[39]">SD_MsgProcess</a> from sd_systemapp.o(.text) referenced from sd_systemapp.o(.data)
 <LI><a href="#[37]">SD_Read</a> from sd_systemapp.o(.text) referenced from sd_systemapp.o(.data)
 <LI><a href="#[38]">SD_Write</a> from sd_systemapp.o(.text) referenced from sd_systemapp.o(.data)
 <LI><a href="#[10]">SEA_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[12]">SPI0_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[23]">SPI1_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[17]">SSI_Handler</a> from ssi.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[1b]">SWPM_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[1a]">SWPS_Handler</a> from swps.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[24]">SYS_GenSramKey</a> from system_sy03.o(.text) referenced from startup_sy03.o(.text)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[25]">SystemInit</a> from system_sy03.o(.text) referenced from startup_sy03.o(.text)
 <LI><a href="#[f]">T0_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[15]">T1_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[16]">T2_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[13]">TRNG_Handler</a> from startup_sy03.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[18]">UART0_Handler</a> from uart.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[14]">USB_Handler</a> from usbprotocol.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[1f]">VPWM_Handler</a> from vpwm.o(.text) referenced from startup_sy03.o(RESET)
 <LI><a href="#[3d]">__main</a> from __main.o(!!!main) referenced from startup_sy03.o(.text)
 <LI><a href="#[2a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[2b]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[28]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[27]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
 <LI><a href="#[29]">fputc</a> from retarget.o(.text) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[41]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2d8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2d9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[42]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2da]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2b7]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[43]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[44]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[46]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[48]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[4a]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[4b]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[4c]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[4e]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[4f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[51]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[52]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[53]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[55]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[57]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[59]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[5a]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[5b]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[5d]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[5f]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[60]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[62]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[64]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[66]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[70]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[2db]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[68]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2dc]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2dd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[2de]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2df]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[2e0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2e1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[2e2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[2e3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2e4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2e5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2e6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2e7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2e8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2e9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2ea]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2eb]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[2ec]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2ed]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[75]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2ee]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2ef]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2f0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2f1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2f2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2f3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[40]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2f4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2f5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[71]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 3136 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; FS_Init &rArr; FS_Format &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2f6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[2d7]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[74]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2f7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[76]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_OtpRead
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Final
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PubKeyOpt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataWithECC
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadToc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4ExternKey
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_ECB
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_ECB
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_ins_gen
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult_s
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt_NoCRT
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
</UL>

<P><STRONG><a name="[2f8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_sy03.o(.text))

<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ACMP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>AEA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIO_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ISO7816_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SCI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SCM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SDI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SEA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SWPM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>T0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>T1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>T2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TRNG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_sy03.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[24]"></a>SYS_GenSramKey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_sy03.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>SystemInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system_sy03.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SCM_LoadHFRoscTrim
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_LoadHFRoscTrim
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RomFuncInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>EFC_ConfigTiming</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, efc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFC_ConfigTiming
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_SetSysClk
</UL>

<P><STRONG><a name="[86]"></a>EFC_Program</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, efc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_LockTest
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_SetEoSt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_LockJtag
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_OtpWrite
</UL>

<P><STRONG><a name="[7c]"></a>EFC_IsEraseOK</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, efc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EFC_IsEraseOK
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_Erase
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteBlock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteBlocks
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_CheckBKStatus
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_RecoverPage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_BackupPage
</UL>

<P><STRONG><a name="[7b]"></a>EFC_Erase</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, efc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_IsEraseOK
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ClrProgFlag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteBlock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteBlocks
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_CheckBKStatus
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_RecoverPage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_BackupPage
</UL>

<P><STRONG><a name="[7d]"></a>EFC_ClrProgFlag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, efc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EFC_ClrProgFlag &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_WrProtect
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ChipErase
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearProg
</UL>

<P><STRONG><a name="[7f]"></a>EFC_ChipErase</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, efc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_WrProtect
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ClrProgFlag
</UL>

<P><STRONG><a name="[82]"></a>EFC_PageProg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, efc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFC_PageProg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteBlock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteBlocks
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_RecoverPage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_BackupPage
</UL>

<P><STRONG><a name="[83]"></a>EFC_WriteInfo</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, efc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = EFC_WriteInfo &rArr; FlashWriteBlock &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearProg
</UL>

<P><STRONG><a name="[84]"></a>EFC_ReadInfo</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, efc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EFC_ReadInfo &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteBlocks
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_CheckBKStatus
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_RecoverPage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_BackupPage
</UL>

<P><STRONG><a name="[85]"></a>EFC_OtpWrite</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, efc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_WrProtect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_Program
</UL>

<P><STRONG><a name="[87]"></a>EFC_OtpRead</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, efc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[89]"></a>EFC_ReadChipSN</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, efc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[8a]"></a>EFC_LockJtag</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, efc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_WrProtect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_Program
</UL>

<P><STRONG><a name="[8b]"></a>EFC_SetEoSt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, efc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_WrProtect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_Program
</UL>

<P><STRONG><a name="[8c]"></a>EFC_LockTest</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, efc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_WrProtect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_Program
</UL>

<P><STRONG><a name="[29]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; sendchar &rArr; SER_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>fgetc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[2c1]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[90]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[77]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitSimulate
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[92]"></a>SCM_AnModPowerEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_RegWrEn
</UL>

<P><STRONG><a name="[94]"></a>SCM_AnModPowerDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_RegWrEn
</UL>

<P><STRONG><a name="[95]"></a>SCM_SetSysClk</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, scm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCM_SetSysClk &rArr; EFC_ConfigTiming
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_RegWrEn
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ConfigTiming
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DoWithPackage
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RemoteWakeWp
</UL>

<P><STRONG><a name="[c2]"></a>SCM_GetSysClk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWPS_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPWM_VoiceInit
</UL>

<P><STRONG><a name="[2f9]"></a>SCM_SetSysClkLowFreq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scm.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>SCM_RecoverSysClk</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, scm.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>SCM_HFRoscPd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_RegWrEn
</UL>

<P><STRONG><a name="[7a]"></a>SCM_LoadHFRoscTrim</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, scm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCM_LoadHFRoscTrim
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[98]"></a>SCM_SetBodLv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, scm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_RegWrEn
</UL>

<P><STRONG><a name="[99]"></a>SCM_EnableTpr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_RegWrEn
</UL>

<P><STRONG><a name="[9a]"></a>SCM_DisableTpr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, scm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_RegWrEn
</UL>

<P><STRONG><a name="[134]"></a>SCM_UsbPhySet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, scm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[135]"></a>SCM_EnableUsbPuRes</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[2fb]"></a>SCM_DisableUsbPuRes</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scm.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>SCM_SetLdoPowerMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_RegWrEn
</UL>

<P><STRONG><a name="[9c]"></a>SYST_Config</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, scm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[136]"></a>_delay_ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RemoteWakeWp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[a7]"></a>_delay_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_SpiSlvWrite
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_WaitTxIdle
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WaitBusy
</UL>

<P><STRONG><a name="[9e]"></a>SER_init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SER_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[8d]"></a>sendchar</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendchar &rArr; SER_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8f]"></a>getkey</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[91]"></a>ExitSimulate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a1]"></a>WaitSqiCycles</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sqi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_QIPageProg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_ChipErase
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SectErase
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WRSR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_RDSR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_HPM
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WRDI
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WREN
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_ReadID
</UL>

<P><STRONG><a name="[a0]"></a>SQI_ReadID</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, sqi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSqiCycles
</UL>

<P><STRONG><a name="[a2]"></a>SQI_WREN</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SQI_WREN
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSqiCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_QIPageProg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_ChipErase
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SectErase
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WRSR
</UL>

<P><STRONG><a name="[a3]"></a>SQI_WRDI</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, sqi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSqiCycles
</UL>

<P><STRONG><a name="[a4]"></a>SQI_HPM</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SQI_HPM
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSqiCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetQIOWFastRead
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetQIOFastRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetDIOFastRead
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_QIPageProg
</UL>

<P><STRONG><a name="[a5]"></a>SQI_RDSR</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSqiCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetQIOWFastRead
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetQIOFastRead
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetQOFastRead
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_QIPageProg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_ChipErase
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WaitBusy
</UL>

<P><STRONG><a name="[a6]"></a>SQI_WaitBusy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_RDSR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SectErase
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WRSR
</UL>

<P><STRONG><a name="[a8]"></a>SQI_WRSR</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SQI_WRSR &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WaitBusy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WREN
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSqiCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetQIOWFastRead
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetQIOFastRead
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetQOFastRead
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_QIPageProg
</UL>

<P><STRONG><a name="[ab]"></a>SQI_SectErase</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SQI_SectErase &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WaitBusy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WREN
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSqiCycles
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_MpuWrEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_EraseSector
</UL>

<P><STRONG><a name="[ac]"></a>SQI_ChipErase</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sqi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WrProtect
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_RDSR
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WREN
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSqiCycles
</UL>

<P><STRONG><a name="[e3]"></a>SQI_PageProg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SQI_PageProg
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_Program
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_PageProgram
</UL>

<P><STRONG><a name="[ad]"></a>SQI_QIPageProg</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, sqi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WRSR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_RDSR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_HPM
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WREN
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSqiCycles
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_MpuWrEnable
</UL>

<P><STRONG><a name="[b4]"></a>SQI_SetRead</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sqi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
</UL>

<P><STRONG><a name="[b5]"></a>SQI_SetFastRead</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sqi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
</UL>

<P><STRONG><a name="[b6]"></a>SQI_SetDOFastRead</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sqi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
</UL>

<P><STRONG><a name="[ae]"></a>SQI_SetDIOFastRead</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SQI_SetDIOFastRead &rArr; SQI_HPM
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_HPM
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
</UL>

<P><STRONG><a name="[af]"></a>SQI_SetQOFastRead</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SQI_SetQOFastRead &rArr; SQI_WRSR &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WRSR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_RDSR
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
</UL>

<P><STRONG><a name="[b0]"></a>SQI_SetQIOFastRead</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SQI_SetQIOFastRead &rArr; SQI_WRSR &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WRSR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_RDSR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_HPM
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
</UL>

<P><STRONG><a name="[b1]"></a>SQI_SetQIOWFastRead</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SQI_SetQIOWFastRead &rArr; SQI_WRSR &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WRSR
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_RDSR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_HPM
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
</UL>

<P><STRONG><a name="[b2]"></a>SQI_Init</STRONG> (Thumb, 468 bytes, Stack size 16 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SQI_Init &rArr; SQI_SetQIOWFastRead &rArr; SQI_WRSR &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetQIOWFastRead
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetQIOFastRead
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetQOFastRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetDIOFastRead
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetDOFastRead
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetFastRead
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SetRead
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WRSR
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WriteData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_ReadData
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[2fc]"></a>SQI_WriteInfo</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sqi.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>SQI_ReadData</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SQI_ReadData &rArr; SQI_Init &rArr; SQI_SetQIOWFastRead &rArr; SQI_WRSR &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSector
</UL>

<P><STRONG><a name="[b8]"></a>SQI_WriteData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SQI_WriteData &rArr; SQI_Init &rArr; SQI_SetQIOWFastRead &rArr; SQI_WRSR &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteSector
</UL>

<P><STRONG><a name="[ba]"></a>SSI_PortInit</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_SpiSlvInit
</UL>

<P><STRONG><a name="[b9]"></a>SSI_SpiSlvInit</STRONG> (Thumb, 188 bytes, Stack size 36 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_PortInit
</UL>

<P><STRONG><a name="[bb]"></a>SSI_WaitTxIdle</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>

<P><STRONG><a name="[bc]"></a>SSI_SpiSlvWrite</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>

<P><STRONG><a name="[bd]"></a>SSI_StopReceive</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[c0]"></a>SSI_StartReceive</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[2fd]"></a>SSI_GetRxSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>SSI_Handler</STRONG> (Thumb, 226 bytes, Stack size 12 bytes, ssi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SSI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>SWPS_Init</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, swps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_GetSysClk
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2fe]"></a>SWPS_SendFrame</STRONG> (Thumb, 256 bytes, Stack size 12 bytes, swps.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>SWPS_GetFrame</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, swps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1a]"></a>SWPS_Handler</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, swps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SWPS_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[2ff]"></a>SWPS_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swps.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>UART_PortInit</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[c7]"></a>UART_GetRegs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IntProc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[c5]"></a>UART_Init</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetRegs
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PortInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[c8]"></a>UART_SendByte</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetRegs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendBuf
</UL>

<P><STRONG><a name="[cb]"></a>UART_ReceByte</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[cc]"></a>UART_SendBuf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>

<P><STRONG><a name="[cd]"></a>UART_ReceBuf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[ce]"></a>UARTx_IntProc</STRONG> (Thumb, 320 bytes, Stack size 20 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UARTx_IntProc
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[18]"></a>UART0_Handler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_Handler &rArr; UARTx_IntProc
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IntProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>VPWM_VoiceInit</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, vpwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_GetSysClk
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_ReleaseModRst
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_KeepModRst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_EnableModClk
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_DisableModClk
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[300]"></a>VPWM_VoicePlay</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, vpwm.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>VPWM_GetPlayStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, vpwm.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>VPWM_SetVolume</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vpwm.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>VPWM_Handler</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, vpwm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>VPWM_PwmInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vpwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_ReleaseModRst
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_KeepModRst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_EnableModClk
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_DisableModClk
</UL>

<P><STRONG><a name="[303]"></a>VPWM_PwmWaveOutput</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, vpwm.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>ReadRandData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, trng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_GenRandom
</UL>

<P><STRONG><a name="[d6]"></a>Trng_WaitDone</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, trng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_GenRandom
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_Init
</UL>

<P><STRONG><a name="[d5]"></a>Trng_Init</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, trng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Trng_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateBytes
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Random
</UL>

<P><STRONG><a name="[d7]"></a>Trng_GenRandom</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, trng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Trng_GenRandom &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_WaitDone
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRandData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenSessionKey
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRandom
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKey
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKey
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateSymmKey
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateBytes
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Random
</UL>

<P><STRONG><a name="[273]"></a>Prng_GenRandom</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, trng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Prng_GenRandom
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PreProcess
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult_s
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpSign
</UL>

<P><STRONG><a name="[dd]"></a>SF_WriteBlocks</STRONG> (Thumb, 286 bytes, Stack size 1080 bytes, sflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ReadInfo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_PageProg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_Erase
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_IsEraseOK
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_BackupPage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteData
</UL>

<P><STRONG><a name="[de]"></a>SF_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = SF_Init &rArr; SF_CheckBKStatus &rArr; SF_RecoverPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_CheckBKStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>SF_WriteData</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, sflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_WrProtect
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteBlocks
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteDirNodeInfo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Format
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataWithECC
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteFileNodeInfo
</UL>

<P><STRONG><a name="[e0]"></a>SF_ReadData</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, sflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName2
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFileNodeInfo
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFreeSpace
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Enum
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadNodeInfo
</UL>

<P><STRONG><a name="[e1]"></a>XF_EraseSector</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, xflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XF_EraseSector &rArr; SQI_SectErase &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SectErase
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_WriteSector
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_CheckBKStatus
</UL>

<P><STRONG><a name="[e4]"></a>XF_Program</STRONG> (Thumb, 106 bytes, Stack size 288 bytes, xflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_PageProg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[e7]"></a>XF_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_CheckBKStatus
</UL>

<P><STRONG><a name="[e9]"></a>XF_WriteData</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, xflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = XF_WriteData &rArr; XF_WriteSector &rArr; XF_EraseSector &rArr; SQI_SectErase &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_WriteSector
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_FormatCD
</UL>

<P><STRONG><a name="[ea]"></a>XF_ReadData</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, xflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_Read
</UL>

<P><STRONG><a name="[ec]"></a>SDSI_ConfigRegs</STRONG> (Thumb, 650 bytes, Stack size 0 bytes, sdsi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSI_Handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSI_Init
</UL>

<P><STRONG><a name="[304]"></a>SDSI_ConfigRegs1</STRONG> (Thumb, 586 bytes, Stack size 0 bytes, sdsi.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>SDSI_Init</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, sdsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDSI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSI_ConfigRegs
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AppInit
</UL>

<P><STRONG><a name="[305]"></a>SDSI_IsInFile</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sdsi.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>SDSI_Handler</STRONG> (Thumb, 1216 bytes, Stack size 40 bytes, sdsi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDSI_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSI_ConfigRegs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>SDI_FlushDatBuf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlockNoCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlockWithCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlockNxt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlock1st
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteBlock
</UL>

<P><STRONG><a name="[f1]"></a>SDI_Wait</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlockNoCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlockWithCmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlockNoCmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlockWithCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GoInactiveState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadStatus
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_EraseBlock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlockNxt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlock1st
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteBlock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_StopTransmission
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlockNxt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlock1st
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadBlock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetNumOfWrBlk
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_DeselectCard
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadCID
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadCSD
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SelectCard
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SetBlockLen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Set4BitBusWidth
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadSCR
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Switch2HighSpeed
</UL>

<P><STRONG><a name="[ee]"></a>SDI_SendCmd</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, sdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlockWithCmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlockWithCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GoInactiveState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadStatus
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_EraseBlock
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlock1st
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteBlock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_StopTransmission
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlock1st
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadBlock
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_DeselectCard
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadCID
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadCSD
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SelectCard
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SetBlockLen
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Switch2HighSpeed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendACmd
</UL>

<P><STRONG><a name="[ef]"></a>SDI_GetRespR1</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDI_GetRespR1
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlockWithCmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlockWithCmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_EraseBlock
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlock1st
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteBlock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_StopTransmission
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlock1st
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadBlock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetNumOfWrBlk
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SelectCard
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SetBlockLen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Set4BitBusWidth
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadSCR
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Switch2HighSpeed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendACmd
</UL>

<P><STRONG><a name="[f7]"></a>SDI_GetRespR2</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadCID
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadCSD
</UL>

<P><STRONG><a name="[fa]"></a>SDI_GetRespR3</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
</UL>

<P><STRONG><a name="[fb]"></a>SDI_GetRespR6</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, sdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
</UL>

<P><STRONG><a name="[f9]"></a>SDI_GetRespR7</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
</UL>

<P><STRONG><a name="[ed]"></a>SDI_SendACmd</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SDI_SendACmd &rArr; SDI_GetRespR1
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetNumOfWrBlk
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Set4BitBusWidth
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadSCR
</UL>

<P><STRONG><a name="[f0]"></a>SDI_Switch2HighSpeed</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDI_Switch2HighSpeed &rArr; SDI_GetRespR1
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
</UL>

<P><STRONG><a name="[f2]"></a>SDI_ReadSCR</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDI_ReadSCR &rArr; SDI_SendACmd &rArr; SDI_GetRespR1
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendACmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
</UL>

<P><STRONG><a name="[f3]"></a>SDI_Set4BitBusWidth</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDI_Set4BitBusWidth &rArr; SDI_SendACmd &rArr; SDI_GetRespR1
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendACmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
</UL>

<P><STRONG><a name="[f4]"></a>SDI_SetBlockLen</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDI_SetBlockLen &rArr; SDI_GetRespR1
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
</UL>

<P><STRONG><a name="[f5]"></a>SDI_SelectCard</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDI_SelectCard &rArr; SDI_GetRespR1
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
</UL>

<P><STRONG><a name="[f6]"></a>SDI_ReadCSD</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDI_ReadCSD
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
</UL>

<P><STRONG><a name="[f8]"></a>SDI_Init</STRONG> (Thumb, 954 bytes, Stack size 64 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SDI_Init &rArr; SDI_ReadSCR &rArr; SDI_SendACmd &rArr; SDI_GetRespR1
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_GetSysClk
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadCSD
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SelectCard
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SetBlockLen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Set4BitBusWidth
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadSCR
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Switch2HighSpeed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendACmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR7
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR6
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR3
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[fe]"></a>SDI_ReadCID</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, sdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>

<P><STRONG><a name="[ff]"></a>SDI_DeselectCard</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, sdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>

<P><STRONG><a name="[100]"></a>SDI_GetNumOfWrBlk</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, sdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendACmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>

<P><STRONG><a name="[101]"></a>SDI_ReadBlock</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDI_ReadBlock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSector
</UL>

<P><STRONG><a name="[102]"></a>SDI_ReadMultiBlock1st</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, sdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[103]"></a>SDI_ReadMultiBlockNxt</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, sdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[104]"></a>SDI_StopTransmission</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDI_StopTransmission &rArr; SDI_GetRespR1
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MsgProcess
</UL>

<P><STRONG><a name="[105]"></a>SDI_WriteBlock</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDI_WriteBlock &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_FlushDatBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteSector
</UL>

<P><STRONG><a name="[107]"></a>SDI_WriteMultiBlock1st</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, sdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_FlushDatBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[108]"></a>SDI_WriteMultiBlockNxt</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, sdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_FlushDatBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[109]"></a>SDI_EraseBlock</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDI_EraseBlock &rArr; SDI_GetRespR1
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
</UL>

<P><STRONG><a name="[10a]"></a>SDI_ReadStatus</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>

<P><STRONG><a name="[10b]"></a>SDI_GoInactiveState</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, sdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>

<P><STRONG><a name="[10c]"></a>SDI_ReadMultiBlockWithCmd</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SDI_ReadMultiBlockWithCmd &rArr; SDI_GetRespR1
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDataFromMemory
</UL>

<P><STRONG><a name="[10d]"></a>SDI_ReadMultiBlockNoCmd</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDI_ReadMultiBlockNoCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>

<P><STRONG><a name="[10e]"></a>SDI_WriteMultiBlockWithCmd</STRONG> (Thumb, 276 bytes, Stack size 20 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SDI_WriteMultiBlockWithCmd &rArr; SDI_GetRespR1
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_GetRespR1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_SendCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_FlushDatBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDataToMemory
</UL>

<P><STRONG><a name="[10f]"></a>SDI_WriteMultiBlockNoCmd</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, sdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDI_WriteMultiBlockNoCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_FlushDatBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
</UL>

<P><STRONG><a name="[110]"></a>SCSI_ModeSense6</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SCSI_ModeSense6 &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
</UL>

<P><STRONG><a name="[112]"></a>SCSI_ModeSense10</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SCSI_ModeSense10 &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
</UL>

<P><STRONG><a name="[113]"></a>SCSI_ReadCapacity</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SCSI_ReadCapacity &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
</UL>

<P><STRONG><a name="[114]"></a>SCSI_Inquiry</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SCSI_Inquiry &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
</UL>

<P><STRONG><a name="[115]"></a>SCSI_ReadFormatCapacity</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SCSI_ReadFormatCapacity &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
</UL>

<P><STRONG><a name="[116]"></a>SCSI_ReadToc</STRONG> (Thumb, 210 bytes, Stack size 112 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SCSI_ReadToc &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
</UL>

<P><STRONG><a name="[117]"></a>SCSI_GetConfigration</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SCSI_GetConfigration &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
</UL>

<P><STRONG><a name="[118]"></a>SCSI_RequestSense</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SCSI_RequestSense &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
</UL>

<P><STRONG><a name="[11f]"></a>SCSI_CommonCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bulkitem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoOutCmd
</UL>

<P><STRONG><a name="[122]"></a>SCSI_TestUnitReady</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, bulkitem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
</UL>

<P><STRONG><a name="[119]"></a>Disk_ReadLBA</STRONG> (Thumb, 80 bytes, Stack size 536 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = Disk_ReadLBA &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadLBA
</UL>

<P><STRONG><a name="[11a]"></a>Disk_WriteLBA</STRONG> (Thumb, 294 bytes, Stack size 536 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = Disk_WriteLBA &rArr; USB_BulkReceive &rArr; USB_ReadFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_WriteLBA
</UL>

<P><STRONG><a name="[11c]"></a>SCSI_ReadLBA</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = SCSI_ReadLBA &rArr; Disk_ReadLBA &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disk_ReadLBA
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
</UL>

<P><STRONG><a name="[11d]"></a>SCSI_WriteLBA</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = SCSI_WriteLBA &rArr; Disk_WriteLBA &rArr; USB_BulkReceive &rArr; USB_ReadFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disk_WriteLBA
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoOutCmd
</UL>

<P><STRONG><a name="[11e]"></a>SCSI_DoOutCmd</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = SCSI_DoOutCmd &rArr; SCSI_WriteLBA &rArr; Disk_WriteLBA &rArr; USB_BulkReceive &rArr; USB_ReadFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendStall
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_WriteLBA
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CommonCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoSCSICmd
</UL>

<P><STRONG><a name="[121]"></a>SCSI_DoInCmd</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = SCSI_DoInCmd &rArr; SCSI_ReadLBA &rArr; Disk_ReadLBA &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendACK
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadLBA
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CommonCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_GetConfigration
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadToc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoSCSICmd
</UL>

<P><STRONG><a name="[124]"></a>DoSCSICmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bulkitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = DoSCSICmd &rArr; SCSI_DoInCmd &rArr; SCSI_ReadLBA &rArr; Disk_ReadLBA &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCSWBack
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoOutCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealCBW
</UL>

<P><STRONG><a name="[306]"></a>InitSCSICallBackFunc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bulkusb.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>DealCBW</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bulkusb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = DealCBW &rArr; DoSCSICmd &rArr; SCSI_DoInCmd &rArr; SCSI_ReadLBA &rArr; Disk_ReadLBA &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoSCSICmd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CBWHandle
</UL>

<P><STRONG><a name="[127]"></a>ReceiveCBW</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bulkusb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ReceiveCBW &rArr; USB_BulkReceive &rArr; USB_ReadFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendStall
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CBWHandle
</UL>

<P><STRONG><a name="[128]"></a>USB_CBWHandle</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, bulkusb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = USB_CBWHandle &rArr; DealCBW &rArr; DoSCSICmd &rArr; SCSI_DoInCmd &rArr; SCSI_ReadLBA &rArr; Disk_ReadLBA &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCBW
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealCBW
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkPoll
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DoWithPackage
</UL>

<P><STRONG><a name="[125]"></a>SendCSWBack</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, bulkusb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SendCSWBack &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoSCSICmd
</UL>

<P><STRONG><a name="[30]"></a>Chap9_SetAddress</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ctrlitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chap9_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendACK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlusb.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>Chap9_GetDescriptor</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ctrlitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Chap9_GetDescriptor &rArr; USB_CtrlSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendStall_In
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CtrlSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlusb.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>Chap9_SetConfiguration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ctrlitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chap9_SetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendACK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlusb.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>Chap9_SendACK</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctrlitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chap9_SendACK
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendACK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlusb.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>Chap9_GetStatus</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ctrlitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Chap9_GetStatus &rArr; USB_CtrlSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CtrlSend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendACK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlusb.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>Chap9_SetFeature</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ctrlitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chap9_SetFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendACK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlusb.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>Chap9_ClearFeature</STRONG> (Thumb, 544 bytes, Stack size 16 bytes, ctrlitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chap9_ClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendACK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlusb.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>Chap9_GetConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ctrlitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Chap9_GetConfig &rArr; USB_CtrlSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CtrlSend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendACK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlusb.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>Chap9_GetInterface</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ctrlitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Chap9_GetInterface &rArr; USB_CtrlSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CtrlSend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendACK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlusb.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>Chap9_SetInterface</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ctrlitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chap9_SetInterface
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendACK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrlusb.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>Class_SendMaxLun</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ctrlitem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Class_SendMaxLun &rArr; USB_CtrlSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CtrlSend
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupHandle
</UL>

<P><STRONG><a name="[12d]"></a>USB_SetupHandle</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ctrlusb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_SetupHandle &rArr; Class_SendMaxLun &rArr; USB_CtrlSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupReceive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Class_SendMaxLun
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendACK
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DoWithPackage
</UL>

<P><STRONG><a name="[130]"></a>USB_ReadFIFO</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, usbbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CtrlReceive
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupReceive
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkReceive
</UL>

<P><STRONG><a name="[11b]"></a>USB_BulkReceive</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, usbbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_BulkReceive &rArr; USB_ReadFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadFIFO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCBW
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disk_WriteLBA
</UL>

<P><STRONG><a name="[131]"></a>USB_WriteFIFO</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, usbbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CtrlSend
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
</UL>

<P><STRONG><a name="[111]"></a>USB_BulkSend</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, usbbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteFIFO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCSWBack
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disk_ReadLBA
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_GetConfigration
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadToc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6
</UL>

<P><STRONG><a name="[307]"></a>USB_SendZero</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usbbase.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>USB_SetupReceive</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, usbbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_SetupReceive &rArr; USB_ReadFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupHandle
</UL>

<P><STRONG><a name="[132]"></a>USB_CtrlReceive</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, usbbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadFIFO
</UL>

<P><STRONG><a name="[12b]"></a>USB_CtrlSend</STRONG> (Thumb, 544 bytes, Stack size 40 bytes, usbbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_CtrlSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WriteFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Class_SendMaxLun
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_GetInterface
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_GetConfig
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_GetStatus
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_GetDescriptor
</UL>

<P><STRONG><a name="[129]"></a>USB_SetAddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_SetAddress
</UL>

<P><STRONG><a name="[123]"></a>USB_SendACK</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, usbbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupHandle
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_SetInterface
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_GetInterface
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_GetConfig
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_ClearFeature
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_SetFeature
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_GetStatus
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_SendACK
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_SetConfiguration
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_SetAddress
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendStall
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoInCmd
</UL>

<P><STRONG><a name="[120]"></a>USB_SendStall</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, usbbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_SendStall
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendACK
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCBW
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_DoOutCmd
</UL>

<P><STRONG><a name="[308]"></a>USB_DisConnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbbase.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>USB_Init</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, usbbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_EnableUsbPuRes
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_UsbPhySet
</UL>

<P><STRONG><a name="[139]"></a>USB_Reset</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, usbbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DoWithPackage
</UL>

<P><STRONG><a name="[309]"></a>USB_SendStall_Out</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, usbbase.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>USB_SendStall_In</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, usbbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chap9_GetDescriptor
</UL>

<P><STRONG><a name="[137]"></a>USB_RemoteWakeWp</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_SetSysClk
</UL>

<P><STRONG><a name="[138]"></a>USB_DoWithPackage</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, usbprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = USB_DoWithPackage &rArr; USB_CBWHandle &rArr; DealCBW &rArr; DoSCSICmd &rArr; SCSI_DoInCmd &rArr; SCSI_ReadLBA &rArr; Disk_ReadLBA &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_SetSysClk
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Reset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetupHandle
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CBWHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Handler
</UL>

<P><STRONG><a name="[13a]"></a>USB_BulkPoll</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, usbprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CBWHandle
</UL>

<P><STRONG><a name="[14]"></a>USB_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = USB_Handler &rArr; USB_DoWithPackage &rArr; USB_CBWHandle &rArr; DealCBW &rArr; DoSCSICmd &rArr; SCSI_DoInCmd &rArr; SCSI_ReadLBA &rArr; Disk_ReadLBA &rArr; USB_BulkSend &rArr; USB_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DoWithPackage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sy03.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>main</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3136 + Unknown Stack Size
<LI>Call Chain = main &rArr; FS_Init &rArr; FS_Format &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_SetSysClk
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_AppInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[148]"></a>SetCmdResult</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, command.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenSessionKey
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetLable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCosInfo
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevAuth
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetPinInfo
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearSecureState
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumApplication
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenApplication
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CloseApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteFile
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumFile
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetFileInfo
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadFile
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFile
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateContainer
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenContainer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CloseContainer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumContainer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainerByName
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCONType
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportCert
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportCert
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRandom
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenExtRSAkey
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKey
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKeyEx
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAPubKeyOPT
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAPriKeyOPT
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCVerify
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKey
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKeyEx
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCEncrypt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCDecrypt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCSign
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCVerify
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataWithECC
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportPublicKey
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSymmKey
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateSymmKey
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Encrypt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptUpdate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptFinal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DecryptInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Decrypt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DecryptUpdate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DecryptFinal
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Digest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestUpdate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestFinal
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_MACInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Mac
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_MACUpdate
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_MACFinal
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DestroySessionKey
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearProg
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetDevInfo
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetDevParam
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetDevSleep
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetBurnMode
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetDevStatus
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CleanFlash
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFlash
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetUpdateParam
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevInit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_FormatCD
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RandXN
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenPrime
</UL>

<P><STRONG><a name="[179]"></a>IsHasControl</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, command.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteFile
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetFileInfo
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadFile
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFile
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateContainer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainer
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
</UL>

<P><STRONG><a name="[13f]"></a>SMS4MAC</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = SMS4MAC &rArr; SMS4_Run &rArr; SMS4_Run_CFB &rArr; SMS4_Run_ECB &rArr; SMS4BlockDec &rArr; SM4_F &rArr; SM4_T
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
</UL>

<P><STRONG><a name="[177]"></a>GetAppStateInfoById</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, command.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenSessionKey
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetPinInfo
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearSecureState
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CloseApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteFile
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumFile
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetFileInfo
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadFile
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFile
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateContainer
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenContainer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CloseContainer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumContainer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainer
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportCert
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportCert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKey
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKeyEx
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKey
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKeyEx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataWithECC
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportPublicKey
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
</UL>

<P><STRONG><a name="[1c8]"></a>SaveContainerId</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SaveContainerId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateContainer
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenContainer
</UL>

<P><STRONG><a name="[1c5]"></a>ClearContainerId</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClearContainerId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CloseContainer
</UL>

<P><STRONG><a name="[17a]"></a>IsContainerIdValid</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsContainerIdValid
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenSessionKey
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportCert
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportCert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKey
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKeyEx
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKey
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKeyEx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataWithECC
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportPublicKey
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
</UL>

<P><STRONG><a name="[144]"></a>SaveSessionKey</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveSessionKey &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenSessionKey
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKey
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKey
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSymmKey
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateSymmKey
</UL>

<P><STRONG><a name="[14b]"></a>CleanSessionKeyState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, command.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Encrypt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptUpdate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptFinal
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Decrypt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DecryptUpdate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DecryptFinal
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Mac
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_MACUpdate
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_MACFinal
</UL>

<P><STRONG><a name="[145]"></a>ReleaseSessionKey</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReleaseSessionKey
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DestroySessionKey
</UL>

<P><STRONG><a name="[146]"></a>CMD_ClearProg</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2736<LI>Call Chain = CMD_ClearProg &rArr; FS_Format &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_WrProtect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_WriteInfo
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ClrProgFlag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Format
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[149]"></a>CMD_DestroySessionKey</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CMD_DestroySessionKey &rArr; ReleaseSessionKey
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSessionKey
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[14a]"></a>CMD_MACFinal</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMD_MACFinal &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSessionKeyState
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[14c]"></a>CMD_EncryptDecryptUpdate</STRONG> (Thumb, 1390 bytes, Stack size 40 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = CMD_EncryptDecryptUpdate &rArr; DES_Run &rArr; DES3_Run_CBC &rArr; DES3_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SM_Run
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Aes_Run
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Run
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Encrypt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptUpdate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptFinal
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Decrypt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DecryptUpdate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Mac
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_MACUpdate
</UL>

<P><STRONG><a name="[155]"></a>CMD_MACUpdate</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = CMD_MACUpdate &rArr; CMD_EncryptDecryptUpdate &rArr; DES_Run &rArr; DES3_Run_CBC &rArr; DES3_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSessionKeyState
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[156]"></a>CMD_Mac</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = CMD_Mac &rArr; CMD_EncryptDecryptUpdate &rArr; DES_Run &rArr; DES3_Run_CBC &rArr; DES3_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSessionKeyState
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[157]"></a>CMD_EncryptDecryptInit</STRONG> (Thumb, 1100 bytes, Stack size 80 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = CMD_EncryptDecryptInit &rArr; SMS4_Init &rArr; SMS4ExternKey &rArr; SM4_T2
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DecryptInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_MACInit
</UL>

<P><STRONG><a name="[15a]"></a>CMD_MACInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = CMD_MACInit &rArr; CMD_EncryptDecryptInit &rArr; SMS4_Init &rArr; SMS4ExternKey &rArr; SM4_T2
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[15b]"></a>CMD_DigestFinal</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = CMD_DigestFinal &rArr; SHA256_Final &rArr; SHA256_Update &rArr; SHA256_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Final
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Final
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[160]"></a>CMD_DigestUpdate</STRONG> (Thumb, 454 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = CMD_DigestUpdate &rArr; SHA256_Update &rArr; SHA256_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Update
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Update
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[165]"></a>CMD_Digest</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = CMD_Digest &rArr; SHA256_Final &rArr; SHA256_Update &rArr; SHA256_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Update
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Final
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Update
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Final
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[166]"></a>CMD_DigestInit</STRONG> (Thumb, 836 bytes, Stack size 168 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = CMD_DigestInit &rArr; SM3_GetSignIDValue &rArr; SM3_GetMsgValue &rArr; SM3_Update &rArr;  SM3_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Update
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetSignIDValue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[16c]"></a>CMD_DecryptFinal</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_DecryptFinal
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSessionKeyState
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[16d]"></a>CMD_DecryptUpdate</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = CMD_DecryptUpdate &rArr; CMD_EncryptDecryptUpdate &rArr; DES_Run &rArr; DES3_Run_CBC &rArr; DES3_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSessionKeyState
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[16e]"></a>CMD_Decrypt</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = CMD_Decrypt &rArr; CMD_EncryptDecryptUpdate &rArr; DES_Run &rArr; DES3_Run_CBC &rArr; DES3_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSessionKeyState
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[16f]"></a>CMD_DecryptInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = CMD_DecryptInit &rArr; CMD_EncryptDecryptInit &rArr; SMS4_Init &rArr; SMS4ExternKey &rArr; SM4_T2
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[170]"></a>CMD_EncryptFinal</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = CMD_EncryptFinal &rArr; CMD_EncryptDecryptUpdate &rArr; DES_Run &rArr; DES3_Run_CBC &rArr; DES3_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSessionKeyState
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[171]"></a>CMD_EncryptUpdate</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = CMD_EncryptUpdate &rArr; CMD_EncryptDecryptUpdate &rArr; DES_Run &rArr; DES3_Run_CBC &rArr; DES3_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSessionKeyState
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[172]"></a>CMD_Encrypt</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = CMD_Encrypt &rArr; CMD_EncryptDecryptUpdate &rArr; DES_Run &rArr; DES3_Run_CBC &rArr; DES3_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSessionKeyState
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[173]"></a>CMD_EncryptInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = CMD_EncryptInit &rArr; CMD_EncryptDecryptInit &rArr; SMS4_Init &rArr; SMS4ExternKey &rArr; SM4_T2
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[174]"></a>CMD_GenerateSymmKey</STRONG> (Thumb, 486 bytes, Stack size 56 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = CMD_GenerateSymmKey &rArr; dbg_print_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSessionKey
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_GenRandom
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[175]"></a>CMD_ImportSymmKey</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = CMD_ImportSymmKey &rArr; dbg_print_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSessionKey
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[176]"></a>CMD_ImportSessionKey</STRONG> (Thumb, 2230 bytes, Stack size 1144 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168 + Unknown Stack Size
<LI>Call Chain = CMD_ImportSessionKey &rArr; FS_ReadFile &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PrivateDecrypt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSessionKey
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[180]"></a>CMD_ExportPublicKey</STRONG> (Thumb, 714 bytes, Stack size 128 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = CMD_ExportPublicKey &rArr; FS_ReadFile &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[181]"></a>CMD_GenerateKeyWithECC</STRONG> (Thumb, 1118 bytes, Stack size 664 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920 + Unknown Stack Size
<LI>Call Chain = CMD_GenerateKeyWithECC &rArr; SM2_KeyExc_Spons &rArr; Ep_Point_Add &rArr; ECC_PointAdd &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetSignIDValue
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSessionKey
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[184]"></a>CMD_GenerateAgreementDataAndKeyWithECC</STRONG> (Thumb, 1322 bytes, Stack size 640 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = CMD_GenerateAgreementDataAndKeyWithECC &rArr; SM2_KeyExc_Response &rArr; Ep_Point_Add &rArr; ECC_PointAdd &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetSignIDValue
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSessionKey
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[187]"></a>CMD_GenerateAgreementDataWithECC</STRONG> (Thumb, 702 bytes, Stack size 408 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = CMD_GenerateAgreementDataWithECC &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[189]"></a>CMD_ExtECCVerify</STRONG> (Thumb, 418 bytes, Stack size 240 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = CMD_ExtECCVerify &rArr; SM2_Verify &rArr; Ep_Point_Add &rArr; ECC_PointAdd &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[18b]"></a>CMD_ExtECCSign</STRONG> (Thumb, 662 bytes, Stack size 176 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = CMD_ExtECCSign &rArr; SM2_Sign &rArr; Ep_Point_Mul_win_s &rArr; ECC_PointMult_s &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[18d]"></a>CMD_ExtECCDecrypt</STRONG> (Thumb, 530 bytes, Stack size 592 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552 + Unknown Stack Size
<LI>Call Chain = CMD_ExtECCDecrypt &rArr; SM2_PriKeyDecrypt &rArr; Ep_Point_Mul_win_s &rArr; ECC_PointMult_s &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[18e]"></a>CMD_ExtECCEncrypt</STRONG> (Thumb, 594 bytes, Stack size 112 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = CMD_ExtECCEncrypt &rArr; SM2_PubKeyEncrypt &rArr; Ep_Point_Mul_win &rArr; ECC_PointMult &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[190]"></a>CMD_ECCExportSessionKeyEx</STRONG> (Thumb, 756 bytes, Stack size 120 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = CMD_ECCExportSessionKeyEx &rArr; SM2_PubKeyEncrypt &rArr; Ep_Point_Mul_win &rArr; ECC_PointMult &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[191]"></a>CMD_ECCExportSessionKey</STRONG> (Thumb, 1006 bytes, Stack size 128 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = CMD_ECCExportSessionKey &rArr; SM2_PubKeyEncrypt &rArr; Ep_Point_Mul_win &rArr; ECC_PointMult &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSessionKey
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_GenRandom
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[192]"></a>CMD_ECCVerify</STRONG> (Thumb, 424 bytes, Stack size 216 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = CMD_ECCVerify &rArr; SM2_Verify &rArr; Ep_Point_Add &rArr; ECC_PointAdd &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[193]"></a>CMD_ECCSignData</STRONG> (Thumb, 980 bytes, Stack size 304 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = CMD_ECCSignData &rArr; FS_ReadFile &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_GetHashValue
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[195]"></a>CMD_ImportECCkeyPair</STRONG> (Thumb, 1742 bytes, Stack size 608 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2872 + Unknown Stack Size
<LI>Call Chain = CMD_ImportECCkeyPair &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[19a]"></a>CMD_GenECCKeyPair</STRONG> (Thumb, 688 bytes, Stack size 128 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2392 + Unknown Stack Size
<LI>Call Chain = CMD_GenECCKeyPair &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_GenKey
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteDirNodeInfo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[19d]"></a>CMD_RSAVerify</STRONG> (Thumb, 1212 bytes, Stack size 752 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132 + Unknown Stack Size
<LI>Call Chain = CMD_RSAVerify &rArr; SHA256_Final &rArr; SHA256_Update &rArr; SHA256_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Update
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Final
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PublicDecrypt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[19f]"></a>CMD_ExtRSAPriKeyOPT</STRONG> (Thumb, 810 bytes, Stack size 1488 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = CMD_ExtRSAPriKeyOPT &rArr; RSA_PriKeyOpt &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1a1]"></a>CMD_ExtRSAPubKeyOPT</STRONG> (Thumb, 262 bytes, Stack size 560 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = CMD_ExtRSAPubKeyOPT &rArr; RSA_PubKeyOpt &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PubKeyOpt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1a3]"></a>CMD_ExtRSAEnDecrypt</STRONG> (Thumb, 1374 bytes, Stack size 1520 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2544 + Unknown Stack Size
<LI>Call Chain = CMD_ExtRSAEnDecrypt &rArr; FS_ReadFile &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PublicEncrypt
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PublicDecrypt
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PrivateEncrypt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PrivateDecrypt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1a6]"></a>CMD_RSAExportSessionKeyEx</STRONG> (Thumb, 652 bytes, Stack size 592 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = CMD_RSAExportSessionKeyEx &rArr; RSA_PublicEncrypt &rArr; RSA_PubKeyOpt &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PublicEncrypt
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1a7]"></a>CMD_RSAExportSessionKey</STRONG> (Thumb, 802 bytes, Stack size 632 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = CMD_RSAExportSessionKey &rArr; RSA_PublicEncrypt &rArr; RSA_PubKeyOpt &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PublicEncrypt
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSessionKey
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_GenRandom
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1a8]"></a>CMD_RSASignData</STRONG> (Thumb, 1428 bytes, Stack size 1384 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2408 + Unknown Stack Size
<LI>Call Chain = CMD_RSASignData &rArr; FS_ReadFile &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Update
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Final
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PrivateEncrypt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1a9]"></a>CMD_ImportRSAPriKey</STRONG> (Thumb, 686 bytes, Stack size 120 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384 + Unknown Stack Size
<LI>Call Chain = CMD_ImportRSAPriKey &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteDirNodeInfo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1aa]"></a>CMD_ImportRSAPubKey</STRONG> (Thumb, 862 bytes, Stack size 128 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2392 + Unknown Stack Size
<LI>Call Chain = CMD_ImportRSAPubKey &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteDirNodeInfo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1ab]"></a>CMD_ImportRSAKey</STRONG> (Thumb, 792 bytes, Stack size 120 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384 + Unknown Stack Size
<LI>Call Chain = CMD_ImportRSAKey &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteDirNodeInfo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1ac]"></a>CMD_ImportRSAKeyPair</STRONG> (Thumb, 1622 bytes, Stack size 1096 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3360 + Unknown Stack Size
<LI>Call Chain = CMD_ImportRSAKeyPair &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PrivateDecrypt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Run
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1ad]"></a>CMD_GenRSAKeyPair</STRONG> (Thumb, 1292 bytes, Stack size 1328 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3592 + Unknown Stack Size
<LI>Call Chain = CMD_GenRSAKeyPair &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteDirNodeInfo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1af]"></a>CMD_GenExtRSAkey</STRONG> (Thumb, 708 bytes, Stack size 1232 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = CMD_GenExtRSAkey &rArr; RSA_GenKeyPair &rArr; RSA_GenKeyPair0 &rArr; GeneratePrime &rArr; Prime_MillerRabinTest &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1b0]"></a>CMD_GenRandom</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CMD_GenRandom &rArr; Trng_GenRandom &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_GenRandom
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1b1]"></a>CMD_ExportCert</STRONG> (Thumb, 448 bytes, Stack size 112 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = CMD_ExportCert &rArr; FS_ReadFile &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFileNodeInfo
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1b3]"></a>CMD_ImportCert</STRONG> (Thumb, 792 bytes, Stack size 112 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376 + Unknown Stack Size
<LI>Call Chain = CMD_ImportCert &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1b4]"></a>CMD_GetCONType</STRONG> (Thumb, 152 bytes, Stack size 96 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = CMD_GetCONType &rArr; dbg_print_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1b5]"></a>CMD_GetContainerInfoEx</STRONG> (Thumb, 1136 bytes, Stack size 152 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = CMD_GetContainerInfoEx &rArr; dbg_print_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFileNodeInfo
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1bd]"></a>CMD_GetContainerInfo</STRONG> (Thumb, 546 bytes, Stack size 128 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = CMD_GetContainerInfo &rArr; dbg_print_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFileNodeInfo
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1be]"></a>CMD_DeleteContainerByName</STRONG> (Thumb, 388 bytes, Stack size 536 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2680 + Unknown Stack Size
<LI>Call Chain = CMD_DeleteContainerByName &rArr; FS_DeleteFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_EnumFile
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainer
</UL>

<P><STRONG><a name="[1c1]"></a>CMD_DeleteContainer</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2704 + Unknown Stack Size
<LI>Call Chain = CMD_DeleteContainer &rArr; CMD_DeleteContainerByName &rArr; FS_DeleteFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainerByName
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1c2]"></a>CMD_EnumContainer</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = CMD_EnumContainer &rArr; FS_EnumDir &rArr; FS_Enum &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_EnumDir
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1c4]"></a>CMD_CloseContainer</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = CMD_CloseContainer &rArr; dbg_print_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearContainerId
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1c6]"></a>CMD_OpenContainer</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = CMD_OpenContainer &rArr; dbg_print_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName2
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveContainerId
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1c9]"></a>CMD_CreateContainer</STRONG> (Thumb, 532 bytes, Stack size 112 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264 + Unknown Stack Size
<LI>Call Chain = CMD_CreateContainer &rArr; FS_CreateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveContainerId
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1ca]"></a>CMD_WriteFile</STRONG> (Thumb, 582 bytes, Stack size 160 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424 + Unknown Stack Size
<LI>Call Chain = CMD_WriteFile &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFileNodeInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1cb]"></a>CMD_ReadFile</STRONG> (Thumb, 846 bytes, Stack size 120 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = CMD_ReadFile &rArr; FS_ReadFile &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFileNodeInfo
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1cc]"></a>CMD_GetFileInfo</STRONG> (Thumb, 322 bytes, Stack size 112 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = CMD_GetFileInfo &rArr; dbg_print_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFileNodeInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1cd]"></a>CMD_EnumFile</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CMD_EnumFile &rArr; FS_EnumFile &rArr; FS_Enum &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_EnumFile
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1ce]"></a>CMD_DeleteFile</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = CMD_DeleteFile &rArr; FS_DeleteFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1cf]"></a>CMD_CreateFile</STRONG> (Thumb, 674 bytes, Stack size 256 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2408 + Unknown Stack Size
<LI>Call Chain = CMD_CreateFile &rArr; FS_CreateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1d0]"></a>CMD_CloseApplication</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = CMD_CloseApplication &rArr; dbg_print_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1d1]"></a>CMD_OpenApplication</STRONG> (Thumb, 582 bytes, Stack size 56 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = CMD_OpenApplication &rArr; FS_ReadFile &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1d2]"></a>CMD_DeleteApplication</STRONG> (Thumb, 462 bytes, Stack size 72 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2752 + Unknown Stack Size
<LI>Call Chain = CMD_DeleteApplication &rArr; CMD_DeleteContainerByName &rArr; FS_DeleteFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_EnumFile
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Enum
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainerByName
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1d4]"></a>CMD_EnumApplication</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = CMD_EnumApplication &rArr; FS_EnumDir &rArr; FS_Enum &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_EnumDir
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1d5]"></a>CMD_CreateApplication</STRONG> (Thumb, 806 bytes, Stack size 288 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552 + Unknown Stack Size
<LI>Call Chain = CMD_CreateApplication &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateDir
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1d7]"></a>CMD_ClearSecureState</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = CMD_ClearSecureState &rArr; dbg_print_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1d8]"></a>CMD_UnLockPin</STRONG> (Thumb, 452 bytes, Stack size 160 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424 + Unknown Stack Size
<LI>Call Chain = CMD_UnLockPin &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4MAC
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1d9]"></a>CMD_VerifyPin</STRONG> (Thumb, 818 bytes, Stack size 176 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440 + Unknown Stack Size
<LI>Call Chain = CMD_VerifyPin &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1da]"></a>CMD_ChangePin</STRONG> (Thumb, 740 bytes, Stack size 168 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2432 + Unknown Stack Size
<LI>Call Chain = CMD_ChangePin &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4MAC
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1db]"></a>CMD_GetPinInfo</STRONG> (Thumb, 352 bytes, Stack size 128 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = CMD_GetPinInfo &rArr; FS_ReadFile &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1dc]"></a>CMD_ChangeDevAuthkey</STRONG> (Thumb, 400 bytes, Stack size 416 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2680 + Unknown Stack Size
<LI>Call Chain = CMD_ChangeDevAuthkey &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4MAC
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1dd]"></a>CMD_DevAuth</STRONG> (Thumb, 652 bytes, Stack size 424 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2688 + Unknown Stack Size
<LI>Call Chain = CMD_DevAuth &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1de]"></a>CMD_GetCosInfo</STRONG> (Thumb, 436 bytes, Stack size 760 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = CMD_GetCosInfo &rArr; FS_ReadFile &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFreeSpace
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1e1]"></a>CMD_SetLable</STRONG> (Thumb, 228 bytes, Stack size 408 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2672 + Unknown Stack Size
<LI>Call Chain = CMD_SetLable &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[1e2]"></a>DoAS5xxCMD</STRONG> (Thumb, 1262 bytes, Stack size 8 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3600 + Unknown Stack Size
<LI>Call Chain = DoAS5xxCMD &rArr; CMD_GenRSAKeyPair &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetLable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCosInfo
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevAuth
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetPinInfo
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearSecureState
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumApplication
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenApplication
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CloseApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteFile
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumFile
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetFileInfo
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadFile
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFile
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateContainer
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenContainer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CloseContainer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumContainer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainer
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCONType
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportCert
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportCert
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRandom
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenExtRSAkey
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKey
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKeyEx
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAPubKeyOPT
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAPriKeyOPT
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCVerify
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKey
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKeyEx
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCEncrypt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCDecrypt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCSign
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCVerify
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataWithECC
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportPublicKey
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSymmKey
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateSymmKey
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Encrypt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptUpdate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptFinal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DecryptInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Decrypt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DecryptUpdate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DecryptFinal
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Digest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestUpdate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestFinal
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_MACInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Mac
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_MACUpdate
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_MACFinal
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DestroySessionKey
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearProg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdProc
</UL>

<P><STRONG><a name="[1e3]"></a>CMD_ExportRSAKeyPair</STRONG> (Thumb, 914 bytes, Stack size 64 bytes, command.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Run
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHasControl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1e4]"></a>CMD_GenSessionKey</STRONG> (Thumb, 636 bytes, Stack size 72 bytes, command.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSessionKey
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsContainerIdValid
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAppStateInfoById
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_GenRandom
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1e5]"></a>CMD_GetAppStatus</STRONG> (Thumb, 26 bytes, Stack size 88 bytes, command.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1e6]"></a>SD_MemReadFromFlash</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sdmemacc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[30a]"></a>SD_MemWriteToFlash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdmemacc.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>SD_CmdProc</STRONG> (Thumb, 634 bytes, Stack size 24 bytes, sdmemacc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3624 + Unknown Stack Size
<LI>Call Chain = SD_CmdProc &rArr; DoAS5xxCMD &rArr; CMD_GenRSAKeyPair &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MsgProcess
</UL>

<P><STRONG><a name="[1e9]"></a>SD_FlowProc</STRONG> (Thumb, 894 bytes, Stack size 48 bytes, sdmemacc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = SD_FlowProc &rArr; SMS4_Run &rArr; SMS4_Run_CFB &rArr; SMS4_Run_ECB &rArr; SMS4BlockDec &rArr; SM4_F &rArr; SM4_T
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SM_Run
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Aes_Run
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write
</UL>

<P><STRONG><a name="[143]"></a>dbg_print_log</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dbg_print_log &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FlowProc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdProc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenSessionKey
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetLable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCosInfo
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevAuth
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetPinInfo
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearSecureState
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumApplication
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenApplication
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CloseApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteFile
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumFile
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetFileInfo
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadFile
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFile
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateContainer
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenContainer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CloseContainer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumContainer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainerByName
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCONType
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportCert
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportCert
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenExtRSAkey
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKey
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKeyEx
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAPubKeyOPT
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAPriKeyOPT
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCVerify
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKey
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKeyEx
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCEncrypt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCDecrypt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCSign
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCVerify
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataWithECC
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportPublicKey
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSymmKey
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateSymmKey
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Digest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestUpdate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestFinal
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4MAC
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFreeSectors
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_CreateDir
</UL>

<P><STRONG><a name="[1eb]"></a>dbg_print_buf</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, log.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1ec]"></a>TF_CreateDir</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, sd_systemapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = TF_CreateDir &rArr; f_mkdir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
</UL>

<P><STRONG><a name="[1ef]"></a>TF_GetSysFileAddr</STRONG> (Thumb, 508 bytes, Stack size 1448 bytes, sd_systemapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952 + Unknown Stack Size
<LI>Call Chain = TF_GetSysFileAddr &rArr; TF_CreateDir &rArr; f_mkdir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_CreateDir
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FileInit
</UL>

<P><STRONG><a name="[3b]"></a>SD_FileInit</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, sd_systemapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = SD_FileInit &rArr; TF_GetSysFileAddr &rArr; TF_CreateDir &rArr; f_mkdir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_systemapp.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>SD_Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, sd_systemapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_systemapp.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>SD_MsgProcess</STRONG> (Thumb, 538 bytes, Stack size 16 bytes, sd_systemapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3640 + Unknown Stack Size
<LI>Call Chain = SD_MsgProcess &rArr; SD_CmdProc &rArr; DoAS5xxCMD &rArr; CMD_GenRSAKeyPair &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdProc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_StopTransmission
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_systemapp.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>SD_Read</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sd_systemapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3640 + Unknown Stack Size
<LI>Call Chain = SD_Read &rArr; SD_CmdProc &rArr; DoAS5xxCMD &rArr; CMD_GenRSAKeyPair &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdProc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlockNoCmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlockWithCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_systemapp.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>SD_Write</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sd_systemapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = SD_Write &rArr; SD_FlowProc &rArr; SMS4_Run &rArr; SMS4_Run_CFB &rArr; SMS4_Run_ECB &rArr; SMS4BlockDec &rArr; SM4_F &rArr; SM4_T
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FlowProc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlockNoCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlockWithCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_systemapp.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>SD_Erase</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sd_systemapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_Erase &rArr; SDI_EraseBlock &rArr; SDI_GetRespR1
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_EraseBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_systemapp.o(.data)
</UL>
<P><STRONG><a name="[13b]"></a>SD_AppInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sd_systemapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_AppInit &rArr; SDSI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f7]"></a>TF_GetFreeSectors</STRONG> (Thumb, 154 bytes, Stack size 608 bytes, sd_systemapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1f9]"></a>TF_GetFilesAddr</STRONG> (Thumb, 866 bytes, Stack size 2544 bytes, sd_systemapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_CreateDir
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1fd]"></a>CMD_GenPrime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_GenPrime
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
</UL>

<P><STRONG><a name="[1fe]"></a>CMD_RandXN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_RandXN
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
</UL>

<P><STRONG><a name="[1ff]"></a>CMD_FormatCD</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = CMD_FormatCD &rArr; XF_WriteData &rArr; XF_WriteSector &rArr; XF_EraseSector &rArr; SQI_SectErase &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
</UL>

<P><STRONG><a name="[200]"></a>CMD_DevInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_DevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
</UL>

<P><STRONG><a name="[201]"></a>CMD_SetUpdateParam</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_SetUpdateParam
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
</UL>

<P><STRONG><a name="[202]"></a>CMD_WriteFlash</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_WriteFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
</UL>

<P><STRONG><a name="[203]"></a>CMD_CleanFlash</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_CleanFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
</UL>

<P><STRONG><a name="[204]"></a>CMD_GetDevStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_GetDevStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
</UL>

<P><STRONG><a name="[205]"></a>CMD_SetBurnMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_SetBurnMode
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
</UL>

<P><STRONG><a name="[206]"></a>CMD_SetDevSleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_SetDevSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
</UL>

<P><STRONG><a name="[207]"></a>CMD_SetDevParam</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_SetDevParam
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
</UL>

<P><STRONG><a name="[208]"></a>CMD_GetDevInfo</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_GetDevInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMDEx
</UL>

<P><STRONG><a name="[1e8]"></a>DoAS5xxCMDEx</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, commandex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = DoAS5xxCMDEx &rArr; CMD_FormatCD &rArr; XF_WriteData &rArr; XF_WriteSector &rArr; XF_EraseSector &rArr; SQI_SectErase &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCmdResult
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetDevInfo
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetDevParam
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetDevSleep
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetBurnMode
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetDevStatus
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CleanFlash
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFlash
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetUpdateParam
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevInit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_FormatCD
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RandXN
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenPrime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdProc
</UL>

<P><STRONG><a name="[216]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[210]"></a>get_fat</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_continuous_chain
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[211]"></a>put_fat</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_continuous_chain
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[1f0]"></a>f_mount</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFreeSectors
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
</UL>

<P><STRONG><a name="[1f2]"></a>f_open</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
</UL>

<P><STRONG><a name="[1f5]"></a>f_read</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
</UL>

<P><STRONG><a name="[22b]"></a>f_write</STRONG> (Thumb, 514 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[22c]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1f6]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
</UL>

<P><STRONG><a name="[1f4]"></a>f_lseek</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = f_lseek &rArr; find_continuous_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_continuous_chain
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
</UL>

<P><STRONG><a name="[1ed]"></a>f_opendir</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_CreateDir
</UL>

<P><STRONG><a name="[22d]"></a>f_closedir</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[22e]"></a>f_readdir</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[230]"></a>f_stat</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[1f8]"></a>f_getfree</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFreeSectors
</UL>

<P><STRONG><a name="[231]"></a>f_truncate</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[1fa]"></a>f_unlink</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
</UL>

<P><STRONG><a name="[1ee]"></a>f_mkdir</STRONG> (Thumb, 366 bytes, Stack size 80 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = f_mkdir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_CreateDir
</UL>

<P><STRONG><a name="[232]"></a>f_chmod</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[233]"></a>f_rename</STRONG> (Thumb, 280 bytes, Stack size 120 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[234]"></a>f_utime</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[235]"></a>SD_ReadSector</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_ReadSector &rArr; SQI_ReadData &rArr; SQI_Init &rArr; SQI_SetQIOWFastRead &rArr; SQI_WRSR &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_ReadData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[236]"></a>SD_WriteSector</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_WriteSector &rArr; SQI_WriteData &rArr; SQI_Init &rArr; SQI_SetQIOWFastRead &rArr; SQI_WRSR &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WriteData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[227]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[228]"></a>disk_initialize</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = disk_initialize &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[20c]"></a>disk_read</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = disk_read &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSector
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[20a]"></a>disk_write</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteSector
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[20f]"></a>disk_ioctl</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[30b]"></a>get_fattime</STRONG> (Thumb, 66 bytes, Stack size 44 bytes, diskio.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>RomFuncInit</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, romfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RomFuncInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[169]"></a>SHA1_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sha-1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestInit
</UL>

<P><STRONG><a name="[237]"></a>transform</STRONG> (Thumb, 4804 bytes, Stack size 96 bytes, sha-1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = transform
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
</UL>

<P><STRONG><a name="[162]"></a>SHA1_Update</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sha-1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = SHA1_Update &rArr;  SHA1_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Digest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestUpdate
</UL>

<P><STRONG><a name="[15d]"></a>SHA1_Final</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, sha-1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SHA1_Final &rArr; SHA1_Update &rArr;  SHA1_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Update
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Digest
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestFinal
</UL>

<P><STRONG><a name="[238]"></a>SM3</STRONG> (Thumb, 256 bytes, Stack size 96 bytes, sm3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[168]"></a>SM3_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, sm3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetMsgValue
</UL>

<P><STRONG><a name="[239]"></a>CF2</STRONG> (Thumb, 52 bytes, Stack size 80 bytes, sm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CF2 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Update
</UL>

<P><STRONG><a name="[161]"></a>SM3_Update</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = SM3_Update &rArr;  SM3_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Update
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF2
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Update
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Digest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestUpdate
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetMsgValue
</UL>

<P><STRONG><a name="[15c]"></a>SM3_Final</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, sm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SM3_Final &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Digest
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestFinal
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetMsgValue
</UL>

<P><STRONG><a name="[16b]"></a>MD5_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestInit
</UL>

<P><STRONG><a name="[164]"></a>MD5_Update</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MD5_Update &rArr; MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Final
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Digest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestUpdate
</UL>

<P><STRONG><a name="[15f]"></a>MD5_Final</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MD5_Final &rArr; MD5_Update &rArr; MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Update
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Digest
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestFinal
</UL>

<P><STRONG><a name="[16a]"></a>SHA256_Init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sha-256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestInit
</UL>

<P><STRONG><a name="[163]"></a>SHA256_Update</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, sha-256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SHA256_Update &rArr; SHA256_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Process
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Digest
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestUpdate
</UL>

<P><STRONG><a name="[15e]"></a>SHA256_Final</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, sha-256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SHA256_Final &rArr; SHA256_Update &rArr; SHA256_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Digest
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestFinal
</UL>

<P><STRONG><a name="[23e]"></a>AES_set_encrypt_key</STRONG> (Thumb, 684 bytes, Stack size 20 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AES_set_encrypt_key
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Init
</UL>

<P><STRONG><a name="[153]"></a>_Aes_Run</STRONG> (Thumb, 282 bytes, Stack size 12 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Aes_Run &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FlowProc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Run
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
</UL>

<P><STRONG><a name="[159]"></a>AES_Init</STRONG> (Thumb, 136 bytes, Stack size 28 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AES_Init &rArr; AES_set_encrypt_key
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_encrypt_key
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptInit
</UL>

<P><STRONG><a name="[154]"></a>AES_Run</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AES_Run &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Aes_Run
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
</UL>

<P><STRONG><a name="[14d]"></a>SM1_Init</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, sm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SM1_Init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNoise
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndNoise
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
</UL>

<P><STRONG><a name="[150]"></a>_SM_Run</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SM_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FlowProc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_ECB
</UL>

<P><STRONG><a name="[243]"></a>SM1_Run_ECB</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SM1_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SM_Run
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNoise
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndNoise
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_OFB
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_CFB
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_CBC
</UL>

<P><STRONG><a name="[244]"></a>SM1_Run_CBC</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, sm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SM1_Run_CBC &rArr; SM1_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_ECB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run
</UL>

<P><STRONG><a name="[245]"></a>SM1_Run_CFB</STRONG> (Thumb, 322 bytes, Stack size 72 bytes, sm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SM1_Run_CFB &rArr; SM1_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_ECB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run
</UL>

<P><STRONG><a name="[246]"></a>SM1_Run_OFB</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, sm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SM1_Run_OFB &rArr; SM1_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_ECB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run
</UL>

<P><STRONG><a name="[151]"></a>SM1_Run</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, sm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SM1_Run &rArr; SM1_Run_CFB &rArr; SM1_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_OFB
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_CFB
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_CBC
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_ECB
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FlowProc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
</UL>

<P><STRONG><a name="[242]"></a>RefreshCache</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, algbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SM_Run
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Des_Run
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_AfterProcess
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult_s
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointAdd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpSign
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpBase2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AddEx
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
</UL>

<P><STRONG><a name="[254]"></a>ChangeFmt</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, algbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ChangeFmt
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_ECB
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_CBC
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_ECB
</UL>

<P><STRONG><a name="[247]"></a>AlgLib_GetVersion</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, algbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[240]"></a>RandWait</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, algbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockDec
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockEnc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_ECB
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_ECB
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_ECB
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt_NoCRT
</UL>

<P><STRONG><a name="[23f]"></a>StartNoise</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, algbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockDec
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockEnc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_ECB
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_ECB
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_ECB
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt_NoCRT
</UL>

<P><STRONG><a name="[241]"></a>EndNoise</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, algbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockDec
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockEnc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_ECB
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_ECB
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_ECB
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt_NoCRT
</UL>

<P><STRONG><a name="[248]"></a>_Des_Run</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Des_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_ECB
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_ECB
</UL>

<P><STRONG><a name="[158]"></a>DES_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DES_Init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNoise
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndNoise
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptInit
</UL>

<P><STRONG><a name="[249]"></a>DES_Run_ECB</STRONG> (Thumb, 238 bytes, Stack size 1048 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = DES_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Des_Run
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNoise
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndNoise
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_CBC
</UL>

<P><STRONG><a name="[24a]"></a>DES_Run_CBC</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = DES_Run_CBC &rArr; DES_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_ECB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run
</UL>

<P><STRONG><a name="[24b]"></a>DES3_Run_ECB</STRONG> (Thumb, 716 bytes, Stack size 1048 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = DES3_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Des_Run
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNoise
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndNoise
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_CBC
</UL>

<P><STRONG><a name="[24c]"></a>DES3_Run_CBC</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = DES3_Run_CBC &rArr; DES3_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_ECB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run
</UL>

<P><STRONG><a name="[14f]"></a>DES_Run</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, des.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = DES_Run &rArr; DES3_Run_CBC &rArr; DES3_Run_ECB &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_CBC
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_ECB
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_CBC
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_ECB
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
</UL>

<P><STRONG><a name="[250]"></a>SM4_T2</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sms4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SM4_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4ExternKey
</UL>

<P><STRONG><a name="[24e]"></a>SM4_T</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sms4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SM4_T
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM4_F
</UL>

<P><STRONG><a name="[24d]"></a>SM4_F</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sms4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SM4_F &rArr; SM4_T
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM4_T
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockDec
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockEnc
</UL>

<P><STRONG><a name="[24f]"></a>SMS4ExternKey</STRONG> (Thumb, 160 bytes, Stack size 336 bytes, sms4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SMS4ExternKey &rArr; SM4_T2
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM4_T2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
</UL>

<P><STRONG><a name="[251]"></a>SMS4BlockEnc</STRONG> (Thumb, 114 bytes, Stack size 168 bytes, sms4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SMS4BlockEnc &rArr; SM4_F &rArr; SM4_T
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM4_F
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNoise
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndNoise
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_CBC
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_ECB
</UL>

<P><STRONG><a name="[252]"></a>SMS4BlockDec</STRONG> (Thumb, 118 bytes, Stack size 168 bytes, sms4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SMS4BlockDec &rArr; SM4_F &rArr; SM4_T
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM4_F
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNoise
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndNoise
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_CBC
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_ECB
</UL>

<P><STRONG><a name="[253]"></a>SMS4_Run_ECB</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, sms4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SMS4_Run_ECB &rArr; SMS4BlockDec &rArr; SM4_F &rArr; SM4_T
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockDec
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockEnc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFmt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_OFB
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_CFB
</UL>

<P><STRONG><a name="[255]"></a>SMS4_Run_CBC</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, sms4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SMS4_Run_CBC &rArr; SMS4BlockDec &rArr; SM4_F &rArr; SM4_T
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockDec
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockEnc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFmt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
</UL>

<P><STRONG><a name="[256]"></a>SMS4_Run_CFB</STRONG> (Thumb, 322 bytes, Stack size 72 bytes, sms4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SMS4_Run_CFB &rArr; SMS4_Run_ECB &rArr; SMS4BlockDec &rArr; SM4_F &rArr; SM4_T
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_ECB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
</UL>

<P><STRONG><a name="[257]"></a>SMS4_Run_OFB</STRONG> (Thumb, 310 bytes, Stack size 64 bytes, sms4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SMS4_Run_OFB &rArr; SMS4_Run_ECB &rArr; SMS4BlockDec &rArr; SM4_F &rArr; SM4_T
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_ECB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run
</UL>

<P><STRONG><a name="[140]"></a>SMS4_Init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sms4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SMS4_Init &rArr; SMS4ExternKey &rArr; SM4_T2
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4ExternKey
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFmt
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNoise
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndNoise
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevAuth
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4MAC
</UL>

<P><STRONG><a name="[141]"></a>SMS4_Run</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, sms4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SMS4_Run &rArr; SMS4_Run_CFB &rArr; SMS4_Run_ECB &rArr; SMS4BlockDec &rArr; SM4_F &rArr; SM4_T
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_OFB
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_CFB
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_CBC
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_ECB
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FlowProc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevAuth
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4MAC
</UL>

<P><STRONG><a name="[258]"></a>SSF33_Run_ECB</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, ssf33alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SSF33_Run_ECB &rArr; SSF33_Encrypt_ECB &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Encrypt_ECB
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Decrypt_ECB
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFmt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_OFB
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_CFB
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_CBC
</UL>

<P><STRONG><a name="[25b]"></a>SSF33_Run_CBC</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, ssf33alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SSF33_Run_CBC &rArr; SSF33_Run_ECB &rArr; SSF33_Encrypt_ECB &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_ECB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run
</UL>

<P><STRONG><a name="[25c]"></a>SSF33_Run_CFB</STRONG> (Thumb, 322 bytes, Stack size 72 bytes, ssf33alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SSF33_Run_CFB &rArr; SSF33_Run_ECB &rArr; SSF33_Encrypt_ECB &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_ECB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run
</UL>

<P><STRONG><a name="[25d]"></a>SSF33_Run_OFB</STRONG> (Thumb, 310 bytes, Stack size 64 bytes, ssf33alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SSF33_Run_OFB &rArr; SSF33_Run_ECB &rArr; SSF33_Encrypt_ECB &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_ECB
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run
</UL>

<P><STRONG><a name="[14e]"></a>SSF33_Init</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ssf33alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SSF33_Init &rArr; SSF33_ExternKey &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_ExternKey
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFmt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
</UL>

<P><STRONG><a name="[152]"></a>SSF33_Run</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, ssf33alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SSF33_Run &rArr; SSF33_Run_CFB &rArr; SSF33_Run_ECB &rArr; SSF33_Encrypt_ECB &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_OFB
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_CFB
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_CBC
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_ECB
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
</UL>

<P><STRONG><a name="[262]"></a>NN_memcpy</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult_s
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointAdd
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpBase2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AddEx
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
</UL>

<P><STRONG><a name="[26c]"></a>NN_memcpy2</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NN_memcpy2
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Gcd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
</UL>

<P><STRONG><a name="[267]"></a>NN_memset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NN_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult_s
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointAdd
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Gcd
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AddEx
</UL>

<P><STRONG><a name="[264]"></a>NN_GetResult</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NN_GetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_AfterProcess
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Gcd
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpBase2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AddEx
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
</UL>

<P><STRONG><a name="[260]"></a>NN_AssignZero</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Double
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prime_MillerRabinTest
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModSub
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Zero
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign2Exp
</UL>

<P><STRONG><a name="[279]"></a>NN_Assign</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PreProcess
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Double
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Copy
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prime_CntLsb
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModAdd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Inv
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrime
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
</UL>

<P><STRONG><a name="[182]"></a>NN_Decode</STRONG> (Thumb, 70 bytes, Stack size 36 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NN_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_GenKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PubKeyOpt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt_Old
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt_NoCRT
</UL>

<P><STRONG><a name="[186]"></a>NN_Encode</STRONG> (Thumb, 66 bytes, Stack size 36 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NN_Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_GenKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PubKeyOpt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataWithECC
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt_NoCRT
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
</UL>

<P><STRONG><a name="[29b]"></a>NN_EQ1</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prime_MillerRabinTest
</UL>

<P><STRONG><a name="[25f]"></a>NN_Assign2Exp</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NN_Assign2Exp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
</UL>

<P><STRONG><a name="[299]"></a>NN_RShift</STRONG> (Thumb, 60 bytes, Stack size 36 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NN_RShift
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prime_MillerRabinTest
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prime_CntLsb
</UL>

<P><STRONG><a name="[27a]"></a>NN_Cmp</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NN_Cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PubKeyOpt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Is_Inverse
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Is_Equal
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prime_MillerRabinTest
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModSub
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt_NoCRT
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrime
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
</UL>

<P><STRONG><a name="[285]"></a>NN_Zero</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Is_Zero
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt_Old
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
</UL>

<P><STRONG><a name="[30c]"></a>NN_Digits</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nn.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>NN_Add1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NN_Add1
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrime
</UL>

<P><STRONG><a name="[276]"></a>NN_Sub1</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NN_Sub1
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prime_MillerRabinTest
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAFilter
</UL>

<P><STRONG><a name="[261]"></a>NN_Add</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NN_Add &rArr; NN_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult_s
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModAdd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrime
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
</UL>

<P><STRONG><a name="[266]"></a>NN_AddEx</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NN_AddEx &rArr; NN_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memset
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpSign
</UL>

<P><STRONG><a name="[268]"></a>NN_Sub</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NN_Sub &rArr; NN_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Is_Inverse
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModSub
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Inv
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrime
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpBase2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
</UL>

<P><STRONG><a name="[269]"></a>NN_Mult</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NN_Mult &rArr; NN_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult_s
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
</UL>

<P><STRONG><a name="[26a]"></a>NN_Mult2</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, nn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpSign
</UL>

<P><STRONG><a name="[26b]"></a>NN_Div</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, nn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy2
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>

<P><STRONG><a name="[26d]"></a>NN_Mod</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NN_Mod &rArr; NN_memcpy2
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memset
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy2
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PreProcess
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModSub
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModAdd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrime
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpSign
</UL>

<P><STRONG><a name="[26e]"></a>NN_ModMult</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NN_ModMult &rArr; NN_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PreProcess
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Double
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prime_MillerRabinTest
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
</UL>

<P><STRONG><a name="[26f]"></a>NN_ModInv</STRONG> (Thumb, 814 bytes, Stack size 64 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Double
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpBase2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
</UL>

<P><STRONG><a name="[270]"></a>NN_ModExp</STRONG> (Thumb, 324 bytes, Stack size 136 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memset
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PubKeyOpt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prime_MillerRabinTest
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt_NoCRT
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpSign
</UL>

<P><STRONG><a name="[271]"></a>NN_ModExpBase2</STRONG> (Thumb, 800 bytes, Stack size 176 bytes, nn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpSign
</UL>

<P><STRONG><a name="[272]"></a>NN_ModExpSign</STRONG> (Thumb, 314 bytes, Stack size 1136 bytes, nn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prng_GenRandom
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpBase2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult2
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AddEx
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOptEx
</UL>

<P><STRONG><a name="[274]"></a>NN_Gcd</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, nn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = NN_Gcd &rArr; NN_memcpy2
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memset
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy2
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAFilter
</UL>

<P><STRONG><a name="[277]"></a>RSA_GenKeyPair0</STRONG> (Thumb, 1002 bytes, Stack size 112 bytes, r_keygen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = RSA_GenKeyPair0 &rArr; GeneratePrime &rArr; Prime_MillerRabinTest &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrime
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSAFilter
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub1
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign2Exp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair
</UL>

<P><STRONG><a name="[1ae]"></a>RSA_GenKeyPair</STRONG> (Thumb, 186 bytes, Stack size 304 bytes, r_keygen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = RSA_GenKeyPair &rArr; RSA_GenKeyPair0 &rArr; GeneratePrime &rArr; Prime_MillerRabinTest &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PubKeyOpt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenExtRSAkey
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
</UL>

<P><STRONG><a name="[1a2]"></a>RSA_PubKeyOpt</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, syrsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RSA_PubKeyOpt &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PublicEncrypt
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PublicDecrypt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAPubKeyOPT
</UL>

<P><STRONG><a name="[27b]"></a>RSA_PriKeyOpt_NoCRT</STRONG> (Thumb, 512 bytes, Stack size 72 bytes, syrsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNoise
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndNoise
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
</UL>

<P><STRONG><a name="[27c]"></a>RSA_PriKeyOptEx</STRONG> (Thumb, 916 bytes, Stack size 104 bytes, syrsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNoise
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandWait
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndNoise
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpSign
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub1
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
</UL>

<P><STRONG><a name="[1a0]"></a>RSA_PriKeyOpt</STRONG> (Thumb, 1046 bytes, Stack size 96 bytes, syrsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = RSA_PriKeyOpt &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AddEx
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PrivateEncrypt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PrivateDecrypt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAPriKeyOPT
</UL>

<P><STRONG><a name="[1a4]"></a>RSA_PublicEncrypt</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, syrsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = RSA_PublicEncrypt &rArr; RSA_PubKeyOpt &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PubKeyOpt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKey
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKeyEx
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
</UL>

<P><STRONG><a name="[19e]"></a>RSA_PublicDecrypt</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, syrsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = RSA_PublicDecrypt &rArr; RSA_PubKeyOpt &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PubKeyOpt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
</UL>

<P><STRONG><a name="[1a5]"></a>RSA_PrivateEncrypt</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, syrsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = RSA_PrivateEncrypt &rArr; RSA_PriKeyOpt &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
</UL>

<P><STRONG><a name="[17e]"></a>RSA_PrivateDecrypt</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, syrsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = RSA_PrivateDecrypt &rArr; RSA_PriKeyOpt &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PriKeyOpt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
</UL>

<P><STRONG><a name="[27f]"></a>RegularMNum</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegularMNum
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetSignIDValue
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt_Old
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
</UL>

<P><STRONG><a name="[27d]"></a>SM3_GetMsgValue</STRONG> (Thumb, 40 bytes, Stack size 88 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SM3_GetMsgValue &rArr; SM3_Update &rArr;  SM3_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Update
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetSignIDValue
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_GetHashValue
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt_Old
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKDFValue
</UL>

<P><STRONG><a name="[167]"></a>SM3_GetSignIDValue</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SM3_GetSignIDValue &rArr; SM3_GetMsgValue &rArr; SM3_Update &rArr;  SM3_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetMsgValue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularMNum
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_GetHashValue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestInit
</UL>

<P><STRONG><a name="[280]"></a>GetKDFValue</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GetKDFValue &rArr; SM3_GetMsgValue &rArr; SM3_Update &rArr;  SM3_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetMsgValue
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt_Old
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
</UL>

<P><STRONG><a name="[19b]"></a>SM2_GenKey</STRONG> (Thumb, 148 bytes, Stack size 128 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = SM2_GenKey &rArr; Ep_Point_Mul_win &rArr; ECC_PointMult &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Random
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurve
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
</UL>

<P><STRONG><a name="[194]"></a>SM2_GetHashValue</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SM2_GetHashValue &rArr; SM3_GetSignIDValue &rArr; SM3_GetMsgValue &rArr; SM3_Update &rArr;  SM3_Update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetSignIDValue
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetMsgValue
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
</UL>

<P><STRONG><a name="[18c]"></a>SM2_Sign</STRONG> (Thumb, 718 bytes, Stack size 136 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = SM2_Sign &rArr; Ep_Point_Mul_win_s &rArr; ECC_PointMult_s &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModSub
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win_s
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Random
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModAdd
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurve
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Zero
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCSign
</UL>

<P><STRONG><a name="[18a]"></a>SM2_Verify</STRONG> (Thumb, 1376 bytes, Stack size 320 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = SM2_Verify &rArr; Ep_Point_Add &rArr; ECC_PointAdd &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModAdd
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurve
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Add
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Zero
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCVerify
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCVerify
</UL>

<P><STRONG><a name="[188]"></a>SM2_KeyExc_Init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = SM2_KeyExc_Init &rArr; Ep_Point_Mul_win &rArr; ECC_PointMult &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Random
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurve
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataWithECC
</UL>

<P><STRONG><a name="[185]"></a>SM2_KeyExc_Response</STRONG> (Thumb, 828 bytes, Stack size 576 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = SM2_KeyExc_Response &rArr; Ep_Point_Add &rArr; ECC_PointAdd &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_And
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Zero
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKDFValue
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetMsgValue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularMNum
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Random
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModAdd
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurve
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Add
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
</UL>

<P><STRONG><a name="[183]"></a>SM2_KeyExc_Spons</STRONG> (Thumb, 840 bytes, Stack size 568 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = SM2_KeyExc_Spons &rArr; Ep_Point_Add &rArr; ECC_PointAdd &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_And
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Zero
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKDFValue
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetMsgValue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularMNum
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModAdd
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurve
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Add
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
</UL>

<P><STRONG><a name="[18f]"></a>SM2_PubKeyEncrypt</STRONG> (Thumb, 686 bytes, Stack size 232 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = SM2_PubKeyEncrypt &rArr; Ep_Point_Mul_win &rArr; ECC_PointMult &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKDFValue
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetMsgValue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularMNum
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Random
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurve
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Zero
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKey
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKeyEx
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCEncrypt
</UL>

<P><STRONG><a name="[17f]"></a>SM2_PriKeyDecrypt</STRONG> (Thumb, 564 bytes, Stack size 224 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = SM2_PriKeyDecrypt &rArr; Ep_Point_Mul_win_s &rArr; ECC_PointMult_s &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win_s
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKDFValue
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetMsgValue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularMNum
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurve
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Zero
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCDecrypt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
</UL>

<P><STRONG><a name="[28d]"></a>SM2_Key_Exchange</STRONG> (Thumb, 1402 bytes, Stack size 456 bytes, sm2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Encode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_And
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Zero
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKDFValue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularMNum
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModAdd
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurve
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Add
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
</UL>

<P><STRONG><a name="[28e]"></a>SM2_PubKeyEncrypt_Old</STRONG> (Thumb, 660 bytes, Stack size 208 bytes, sm2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKDFValue
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetMsgValue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularMNum
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Random
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurve
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Zero
</UL>

<P><STRONG><a name="[28f]"></a>SM2_PriKeyDecrypt_Old</STRONG> (Thumb, 582 bytes, Stack size 192 bytes, sm2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Decode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win_s
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKDFValue
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetMsgValue
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegularMNum
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurve
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Zero
</UL>

<P><STRONG><a name="[293]"></a>GetClusterAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, filesystem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteDirNodeInfo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName2
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFileNodeInfo
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadDirNodeInfo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Format
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Enum
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_DeleteFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteFileNodeInfo
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadNodeInfo
</UL>

<P><STRONG><a name="[291]"></a>GetBlankCluster</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBlankCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindStartCluster
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextCluster
</UL>

<P><STRONG><a name="[290]"></a>FindNextCluster</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FindNextCluster &rArr; GetBlankCluster
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlankCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
</UL>

<P><STRONG><a name="[292]"></a>FindStartCluster</STRONG> (Thumb, 90 bytes, Stack size 36 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FindStartCluster &rArr; GetBlankCluster
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlankCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
</UL>

<P><STRONG><a name="[199]"></a>FS_UpdateFile</STRONG> (Thumb, 620 bytes, Stack size 1048 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteData
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindStartCluster
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextCluster
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Format
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetLable
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevAuth
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFile
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportCert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
</UL>

<P><STRONG><a name="[1df]"></a>FS_GetFreeSpace</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FS_GetFreeSpace &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCosInfo
</UL>

<P><STRONG><a name="[198]"></a>FS_CreateFile</STRONG> (Thumb, 520 bytes, Stack size 936 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = FS_CreateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFreeSpace
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteData
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlankCluster
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Format
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateDir
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateContainer
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportCert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
</UL>

<P><STRONG><a name="[178]"></a>FS_SelectFileByCluster</STRONG> (Thumb, 146 bytes, Stack size 104 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FS_SelectFileByCluster &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Format
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetLable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCosInfo
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevAuth
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetPinInfo
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumApplication
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteFile
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumFile
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetFileInfo
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadFile
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFile
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateContainer
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenContainer
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CloseContainer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumContainer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainer
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCONType
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportCert
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportCert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKey
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKeyEx
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataWithECC
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportPublicKey
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
</UL>

<P><STRONG><a name="[147]"></a>FS_Format</STRONG> (Thumb, 402 bytes, Stack size 464 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2728<LI>Call Chain = FS_Format &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_UpdateFile
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteData
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearProg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
</UL>

<P><STRONG><a name="[17d]"></a>FS_ReadFile</STRONG> (Thumb, 406 bytes, Stack size 960 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = FS_ReadFile &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindStartCluster
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextCluster
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetLable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCosInfo
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevAuth
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetPinInfo
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadFile
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportCert
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportPublicKey
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
</UL>

<P><STRONG><a name="[17c]"></a>FS_SelectFileByID</STRONG> (Thumb, 128 bytes, Stack size 104 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FS_SelectFileByID &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetLable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCosInfo
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevAuth
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetPinInfo
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainerByName
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportCert
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportCert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportPublicKey
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
</UL>

<P><STRONG><a name="[13d]"></a>FS_Init</STRONG> (Thumb, 102 bytes, Stack size 408 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3136<LI>Call Chain = FS_Init &rArr; FS_Format &rArr; FS_UpdateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByID
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectFileByCluster
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadFile
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Format
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d3]"></a>FS_Enum</STRONG> (Thumb, 256 bytes, Stack size 112 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FS_Enum &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_EnumFile
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_EnumDir
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
</UL>

<P><STRONG><a name="[1c7]"></a>FS_SelectDirOrFileByName2</STRONG> (Thumb, 178 bytes, Stack size 104 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FS_SelectDirOrFileByName2 &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenContainer
</UL>

<P><STRONG><a name="[1b6]"></a>FS_SelectDirOrFileByName</STRONG> (Thumb, 228 bytes, Stack size 104 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FS_SelectDirOrFileByName &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteFile
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetFileInfo
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadFile
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFile
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainerByName
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
</UL>

<P><STRONG><a name="[197]"></a>FS_DeleteFile</STRONG> (Thumb, 422 bytes, Stack size 928 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = FS_DeleteFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteFile
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainerByName
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportCert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
</UL>

<P><STRONG><a name="[294]"></a>FS_ReadNodeInfo</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, filesystem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>

<P><STRONG><a name="[17b]"></a>FS_ReadDirNodeInfo</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FS_ReadDirNodeInfo &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetAppStatus
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCONType
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportPublicKey
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
</UL>

<P><STRONG><a name="[1b2]"></a>FS_ReadFileNodeInfo</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FS_ReadFileNodeInfo &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetFileInfo
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadFile
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFile
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportCert
</UL>

<P><STRONG><a name="[19c]"></a>FS_WriteDirNodeInfo</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = FS_WriteDirNodeInfo &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteData
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
</UL>

<P><STRONG><a name="[295]"></a>FS_WriteFileNodeInfo</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, filesystem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteData
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClusterAddr
</UL>

<P><STRONG><a name="[1d6]"></a>FS_CreateDir</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = FS_CreateDir &rArr; FS_CreateFile &rArr; SF_WriteData &rArr; SF_WriteBlocks &rArr; SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
</UL>

<P><STRONG><a name="[1c3]"></a>FS_EnumDir</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FS_EnumDir &rArr; FS_Enum &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Enum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumApplication
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumContainer
</UL>

<P><STRONG><a name="[1bf]"></a>FS_EnumFile</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, filesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FS_EnumFile &rArr; FS_Enum &rArr; SF_ReadData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Enum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumFile
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainerByName
</UL>

<P><STRONG><a name="[259]"></a>SSF33_Encrypt_ECB</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, ssf33.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SSF33_Encrypt_ECB &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_ECB
</UL>

<P><STRONG><a name="[25a]"></a>SSF33_Decrypt_ECB</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, ssf33.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SSF33_Decrypt_ECB &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_ECB
</UL>

<P><STRONG><a name="[297]"></a>GetData</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ssf33.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_ExternKey
</UL>

<P><STRONG><a name="[25e]"></a>SSF33_ExternKey</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, ssf33.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SSF33_ExternKey &rArr; F
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetData
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Init
</UL>

<P><STRONG><a name="[298]"></a>Prime_CntLsb</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, prime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Prime_CntLsb &rArr; NN_RShift
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_RShift
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prime_MillerRabinTest
</UL>

<P><STRONG><a name="[29a]"></a>Prime_MillerRabinTest</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, prime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Prime_MillerRabinTest &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prime_CntLsb
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub1
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_RShift
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_EQ1
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrime
</UL>

<P><STRONG><a name="[278]"></a>GeneratePrime</STRONG> (Thumb, 458 bytes, Stack size 128 bytes, prime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = GeneratePrime &rArr; Prime_MillerRabinTest &rArr; NN_ModExp &rArr; NN_ModInv &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GenerateBytes
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prime_MillerRabinTest
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add1
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
</UL>

<P><STRONG><a name="[281]"></a>NN_Random</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bigdigits.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NN_Random &rArr; Trng_GenRandom &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_GenRandom
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_GenKey
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
</UL>

<P><STRONG><a name="[287]"></a>NN_ModAdd</STRONG> (Thumb, 78 bytes, Stack size 216 bytes, bigdigits.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = NN_ModAdd &rArr; NN_Mod &rArr; NN_memcpy2
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Double
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Is_On_Curve
</UL>

<P><STRONG><a name="[288]"></a>NN_ModSub</STRONG> (Thumb, 116 bytes, Stack size 112 bytes, bigdigits.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = NN_ModSub &rArr; NN_Mod &rArr; NN_memcpy2
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Double
</UL>

<P><STRONG><a name="[28b]"></a>NN_And</STRONG> (Thumb, 112 bytes, Stack size 88 bytes, bigdigits.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NN_And
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
</UL>

<P><STRONG><a name="[27e]"></a>InitCurve</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, elliptic-ffp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetSignIDValue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_GenKey
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt_Old
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
</UL>

<P><STRONG><a name="[29e]"></a>Ep_Point_Copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, elliptic-ffp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
</UL>

<P><STRONG><a name="[28c]"></a>Ep_Point_Zero</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, elliptic-ffp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ep_Point_Zero
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Double
</UL>

<P><STRONG><a name="[29f]"></a>Ep_Point_Is_Zero</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, elliptic-ffp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Zero
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Double
</UL>

<P><STRONG><a name="[2a0]"></a>Ep_Point_Is_Equal</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, elliptic-ffp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
</UL>

<P><STRONG><a name="[2a1]"></a>Ep_Point_Is_Inverse</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, elliptic-ffp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
</UL>

<P><STRONG><a name="[2a2]"></a>Ep_Point_Inv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, elliptic-ffp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
</UL>

<P><STRONG><a name="[2a3]"></a>Ep_Point_Double</STRONG> (Thumb, 314 bytes, Stack size 152 bytes, elliptic-ffp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Is_Zero
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModSub
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Zero
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModAdd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AssignZero
</UL>

<P><STRONG><a name="[289]"></a>Ep_Point_Add</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, elliptic-ffp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = Ep_Point_Add &rArr; ECC_PointAdd &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
</UL>

<P><STRONG><a name="[286]"></a>Ep_Point_Mul_win_s</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, elliptic-ffp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = Ep_Point_Mul_win_s &rArr; ECC_PointMult_s &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult_s
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt_Old
</UL>

<P><STRONG><a name="[283]"></a>Ep_Point_Mul_win</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, elliptic-ffp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Ep_Point_Mul_win &rArr; ECC_PointMult &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_GenKey
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
</UL>

<P><STRONG><a name="[28a]"></a>Ep_Is_On_Curve</STRONG> (Thumb, 206 bytes, Stack size 152 bytes, elliptic-ffp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = Ep_Is_On_Curve &rArr; NN_ModAdd &rArr; NN_Mod &rArr; NN_memcpy2
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModAdd
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Zero
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Cmp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt_Old
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
</UL>

<P><STRONG><a name="[29c]"></a>R_GenerateBytes</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, r_random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = R_GenerateBytes &rArr; Trng_GenRandom &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_GenRandom
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrime
</UL>

<P><STRONG><a name="[2a7]"></a>ECC_ins_gen</STRONG> (Thumb, 74 bytes, Stack size 400 bytes, hardecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult_s
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointAdd
</UL>

<P><STRONG><a name="[2a8]"></a>ECC_AfterProcess</STRONG> (Thumb, 1594 bytes, Stack size 56 bytes, hardecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ECC_AfterProcess &rArr; NN_GetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_GetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult_s
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointAdd
</UL>

<P><STRONG><a name="[2a9]"></a>ECC_PreProcess</STRONG> (Thumb, 208 bytes, Stack size 240 bytes, hardecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ECC_PreProcess &rArr; NN_ModMult &rArr; NN_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prng_GenRandom
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Assign
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult_s
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointAdd
</UL>

<P><STRONG><a name="[2a4]"></a>ECC_PointAdd</STRONG> (Thumb, 312 bytes, Stack size 264 bytes, hardecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ECC_PointAdd &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PreProcess
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_AfterProcess
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_ins_gen
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memset
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Add
</UL>

<P><STRONG><a name="[2a6]"></a>ECC_PointMult</STRONG> (Thumb, 362 bytes, Stack size 192 bytes, hardecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ECC_PointMult &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PreProcess
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_AfterProcess
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_ins_gen
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memset
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win
</UL>

<P><STRONG><a name="[2a5]"></a>ECC_PointMult_s</STRONG> (Thumb, 460 bytes, Stack size 296 bytes, hardecc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ECC_PointMult_s &rArr; ECC_ins_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prng_GenRandom
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshCache
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PreProcess
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_AfterProcess
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_ins_gen
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memset
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ep_Point_Mul_win_s
</UL>

<P><STRONG><a name="[30d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
</UL>

<P><STRONG><a name="[30f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
</UL>

<P><STRONG><a name="[310]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
</UL>

<P><STRONG><a name="[13c]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_log
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FileInit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_print_buf
</UL>

<P><STRONG><a name="[2ae]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2af]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2ad]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[50]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[2b4]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[56]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[5e]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[47]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[2b5]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[142]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevAuth
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4MAC
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_ECB
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_ECB
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt_Old
</UL>

<P><STRONG><a name="[196]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Format
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateContainer
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportCert
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlgLib_GetVersion
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
</UL>

<P><STRONG><a name="[1c0]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Enum
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetLable
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainerByName
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_CreateDir
</UL>

<P><STRONG><a name="[1f1]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWPS_GetFrame
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_ReadData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ReadChipSN
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ReadInfo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteBlock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FlowProc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdProc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MemReadFromFlash
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_GetSignIDValue
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Final
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_GetHashValue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PublicEncrypt
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PublicDecrypt
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PrivateEncrypt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PrivateDecrypt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Update
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Format
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Enum
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Run
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportRSAKeyPair
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetLable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCosInfo
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetFileInfo
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFile
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRandom
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenExtRSAkey
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKey
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKeyEx
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAPubKeyOPT
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAPriKeyOPT
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCVerify
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKey
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKeyEx
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCEncrypt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCDecrypt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCSign
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCVerify
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataWithECC
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportPublicKey
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Mac
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_MACUpdate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptUpdate
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_MACFinal
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearProg
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSessionKey
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4MAC
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlockNxt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlock1st
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteBlock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlockNxt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlock1st
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadBlock
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_Program
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_WriteSector
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_Read
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteBlocks
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trng_GenRandom
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_OFB
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_CFB
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_CBC
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Run_ECB
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_OFB
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_CFB
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_CBC
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4_Run_ECB
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockDec
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4BlockEnc
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_CBC
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_ECB
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_CBC
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_ECB
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_OFB
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_CFB
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_CBC
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM1_Run_ECB
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CF2
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt_Old
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKDFValue
</UL>

<P><STRONG><a name="[311]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Format
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearProg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_Program
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_WriteSector
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_RecoverPage
</UL>

<P><STRONG><a name="[2b9]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[2b8]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_MemReadFromFlash
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PublicEncrypt
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PublicDecrypt
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PrivateEncrypt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_PrivateDecrypt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFreeSpace
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetLable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCosInfo
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EnumApplication
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenApplication
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CloseApplication
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearProg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseSessionKey
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSessionKey
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMS4MAC
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES3_Run_ECB
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DES_Run_ECB
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePrime
</UL>

<P><STRONG><a name="[312]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3_Final
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1_Final
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Final
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Format
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetAppStatus
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenSessionKey
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SetLable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCosInfo
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DevAuth
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangeDevAuthkey
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetPinInfo
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ChangePin
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_VerifyPin
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_UnLockPin
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateApplication
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteApplication
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_OpenApplication
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateFile
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetFileInfo
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ReadFile
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_WriteFile
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_CreateContainer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DeleteContainerByName
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCONType
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportCert
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportCert
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenExtRSAkey
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenRSAKeyPair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKeyPair
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPubKey
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportRSAPriKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSASignData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKey
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAExportSessionKeyEx
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAEnDecrypt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAPubKeyOPT
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtRSAPriKeyOPT
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RSAVerify
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenECCKeyPair
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportECCkeyPair
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCSignData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCVerify
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKey
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ECCExportSessionKeyEx
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCEncrypt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCDecrypt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCSign
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExtECCVerify
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataWithECC
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateAgreementDataAndKeyWithECC
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateKeyWithECC
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ExportPublicKey
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ImportSessionKey
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GenerateSymmKey
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DigestInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EncryptDecryptInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSI_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFreeSectors
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PreProcess
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_PointMult_s
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpBase2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
</UL>

<P><STRONG><a name="[313]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1f3]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName2
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SelectDirOrFileByName
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_CreateFile
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetFilesAddr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TF_GetSysFileAddr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1e0]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCosInfo
</UL>

<P><STRONG><a name="[314]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>__aeabi_uwrite4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Format
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetCosInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
</UL>

<P><STRONG><a name="[315]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWPS_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteBlocks
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPWM_VoiceInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[317]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[318]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
</UL>

<P><STRONG><a name="[2bc]"></a>_ddiv</STRONG> (Thumb, 1050 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[2bb]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
</UL>

<P><STRONG><a name="[31b]"></a>_dfixu</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
</UL>

<P><STRONG><a name="[31c]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[31d]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfo
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_GetContainerInfoEx
</UL>

<P><STRONG><a name="[31e]"></a>_dmul</STRONG> (Thumb, 634 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2b1]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[2b3]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[45]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[2aa]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[2ab]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[27]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[2bf]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[61]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[63]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[2ac]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2c2]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[58]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[2c5]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[54]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[5c]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[2b2]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2c4]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[31f]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>_printf_fp_dec_real</STRONG> (Thumb, 618 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[2cd]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[65]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[67]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[2c3]"></a>_wcrtomb</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[6e]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2cf]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[69]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2cc]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2c7]"></a>_btod_etento</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2c8]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2ca]"></a>_btod_emul</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2d3]"></a>_btod_emuld</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[2c9]"></a>_btod_ediv</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2d5]"></a>_btod_edivd</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[73]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[320]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[321]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>EFC_WrProtect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, efc.o(i.EFC_WrProtect))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_LockTest
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_SetEoSt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_LockJtag
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_OtpWrite
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ChipErase
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ClrProgFlag
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ClearProg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_CheckBKStatus
</UL>

<P><STRONG><a name="[d0]"></a>SCM_DisableModClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi.o(i.SCM_DisableModClk), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPWM_PwmInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPWM_VoiceInit
</UL>

<P><STRONG><a name="[d2]"></a>SCM_EnableModClk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi.o(i.SCM_EnableModClk), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPWM_PwmInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPWM_VoiceInit
</UL>

<P><STRONG><a name="[d1]"></a>SCM_KeepModRst</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi.o(i.SCM_KeepModRst), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPWM_PwmInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPWM_VoiceInit
</UL>

<P><STRONG><a name="[d3]"></a>SCM_ReleaseModRst</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi.o(i.SCM_ReleaseModRst), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPWM_PwmInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VPWM_VoiceInit
</UL>

<P><STRONG><a name="[aa]"></a>SQI_WrProtect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sqi.o(i.SQI_WrProtect))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_ChipErase
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_MpuWrEnable
</UL>

<P><STRONG><a name="[2d2]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sci.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[b3]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sqi.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Aes_Run
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAS5xxCMD
</UL>

<P><STRONG><a name="[2cb]"></a>__ARM_fpclassify</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2b6]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6c]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[2a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[322]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[80]"></a>FlashWriteBlock</STRONG> (Thumb, 132 bytes, Stack size 1072 bytes, efc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = FlashWriteBlock &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_PageProg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_Erase
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_IsEraseOK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_WriteInfo
</UL>

<P><STRONG><a name="[93]"></a>SCM_RegWrEn</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, scm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_SetLdoPowerMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_DisableTpr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_EnableTpr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_SetBodLv
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HFRoscPd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_SetSysClk
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_AnModPowerDisable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_AnModPowerEnable
</UL>

<P><STRONG><a name="[9d]"></a>NVIC_SetPriority</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, scm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYST_Config
</UL>

<P><STRONG><a name="[a9]"></a>SQI_MpuWrEnable</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sqi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SQI_MpuWrEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_WrProtect
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_QIPageProg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_SectErase
</UL>

<P><STRONG><a name="[bf]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_StartReceive
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_StopReceive
</UL>

<P><STRONG><a name="[be]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_StartReceive
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI_StopReceive
</UL>

<P><STRONG><a name="[c3]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, swps.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWPS_GetFrame
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWPS_Init
</UL>

<P><STRONG><a name="[ca]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceBuf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceByte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>

<P><STRONG><a name="[c9]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceBuf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceByte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>

<P><STRONG><a name="[d9]"></a>SF_BackupPage</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, sflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SF_BackupPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ReadInfo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_PageProg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_Erase
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_IsEraseOK
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_WriteBlocks
</UL>

<P><STRONG><a name="[da]"></a>SF_RecoverPage</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, sflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SF_RecoverPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ReadInfo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_PageProg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_Erase
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_IsEraseOK
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_CheckBKStatus
</UL>

<P><STRONG><a name="[dc]"></a>SF_CheckBKStatus</STRONG> (Thumb, 152 bytes, Stack size 1040 bytes, sflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = SF_CheckBKStatus &rArr; SF_RecoverPage &rArr; EFC_Erase &rArr; EFC_IsEraseOK
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_WrProtect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_ReadInfo
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_Erase
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFC_IsEraseOK
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_RecoverPage
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Init
</UL>

<P><STRONG><a name="[e2]"></a>XF_PageProgram</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, xflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XF_PageProgram &rArr; SQI_PageProg
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQI_PageProg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_WriteSector
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_CheckBKStatus
</UL>

<P><STRONG><a name="[e5]"></a>XF_Read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, xflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XF_Read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_ReadData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_WriteSector
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_CheckBKStatus
</UL>

<P><STRONG><a name="[e6]"></a>XF_CheckBKStatus</STRONG> (Thumb, 196 bytes, Stack size 1056 bytes, xflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_EraseSector
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_Read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_PageProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_Init
</UL>

<P><STRONG><a name="[e8]"></a>XF_WriteSector</STRONG> (Thumb, 480 bytes, Stack size 1080 bytes, xflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = XF_WriteSector &rArr; XF_EraseSector &rArr; SQI_SectErase &rArr; SQI_WaitBusy &rArr; SQI_RDSR
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_EraseSector
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_Read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_PageProgram
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XF_WriteData
</UL>

<P><STRONG><a name="[12f]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkSend
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_BulkReceive
</UL>

<P><STRONG><a name="[1fb]"></a>SD_ReadDataFromMemory</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sd_systemapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_ReadMultiBlockWithCmd
</UL>

<P><STRONG><a name="[1fc]"></a>SD_WriteDataToMemory</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sd_systemapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_WriteMultiBlockWithCmd
</UL>

<P><STRONG><a name="[21d]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[20e]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[21a]"></a>mem_cmp</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[220]"></a>chk_chr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[209]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[20b]"></a>move_window</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs1
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[20d]"></a>sync_fs</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[212]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[213]"></a>create_chain</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[214]"></a>find_continuous_chain</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = find_continuous_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[215]"></a>dir_sdi</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[217]"></a>dir_next</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[218]"></a>dir_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[222]"></a>ld_clust</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[22a]"></a>st_clust</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[219]"></a>dir_find</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[21b]"></a>dir_read</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[21c]"></a>dir_register</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[21e]"></a>dir_remove</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[22f]"></a>get_fileinfo</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[21f]"></a>create_name</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[221]"></a>follow_path</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[226]"></a>get_ldnumber</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[223]"></a>check_fs1</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = check_fs1 &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[224]"></a>check_fs</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[225]"></a>find_volume</STRONG> (Thumb, 1244 bytes, Stack size 104 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs1
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[229]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[23b]"></a>Decode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
</UL>

<P><STRONG><a name="[23a]"></a>MD5Transform</STRONG> (Thumb, 2036 bytes, Stack size 96 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MD5Transform &rArr; Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Update
</UL>

<P><STRONG><a name="[23c]"></a>Encode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Final
</UL>

<P><STRONG><a name="[23d]"></a>SHA256_Process</STRONG> (Thumb, 11508 bytes, Stack size 308 bytes, sha-256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = SHA256_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
</UL>

<P><STRONG><a name="[263]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Gcd
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpBase2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AddEx
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
</UL>

<P><STRONG><a name="[265]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Gcd
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExpBase2
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModExp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModInv
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_ModMult
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mod
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Div
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Mult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_AddEx
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Add
</UL>

<P><STRONG><a name="[275]"></a>RSAFilter</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, r_keygen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = RSAFilter &rArr; NN_Gcd &rArr; NN_memcpy2
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Gcd
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NN_Sub1
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSA_GenKeyPair0
</UL>

<P><STRONG><a name="[282]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sm2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_GenKey
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt_Old
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
</UL>

<P><STRONG><a name="[284]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sm2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Verify
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Sign
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Spons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Response
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_KeyExc_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_GenKey
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_Key_Exchange
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PriKeyDecrypt_Old
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM2_PubKeyEncrypt_Old
</UL>

<P><STRONG><a name="[296]"></a>F</STRONG> (Thumb, 398 bytes, Stack size 88 bytes, ssf33.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = F
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_ExternKey
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Encrypt_ECB
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSF33_Decrypt_ECB
</UL>

<P><STRONG><a name="[28]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[2c6]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2d1]"></a>btod_internal_mul</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[2d4]"></a>btod_internal_div</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2d6]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4d]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[2c0]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2ce]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
