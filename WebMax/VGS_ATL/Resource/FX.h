#ifndef _FX_H
#define _FX_H

const char g_FXGlowBuffer[] = 
"//write by NickLi\r\n"
"//for test hlsl\r\n"
"//2008-11-15\r\n"
"\r\n"
"//顶点的变换矩阵\r\n"
"float4x4 matWorldViewProj;\r\n"
"//用于贴图坐标的变换矩阵\r\n"
"float4x4 tTex <string uiname = \"Texture Transform\";>;\r\n"
"\r\n"
"//源贴图\r\n"
"texture g_txSrcColor;\r\n"
"//对贴图进行采样\r\n"
"sampler2D g_samSrcColor = sampler_state\r\n"
"{\r\n"
"    Texture = <g_txSrcColor>;\r\n"
"    AddressU = Clamp;\r\n"
"    AddressV = Clamp;\r\n"
"    MinFilter = Point;\r\n"
"    MagFilter = Linear;\r\n"
"    MipFilter = Linear;\r\n"
"};\r\n"
"\r\n"
"\r\n"
"\r\n"
"//-------------------------------------------------------------------------\r\n"
"//Bloom特效\r\n"
"//-------------------------------------------------------------------------\r\n"
"//模糊程度\r\n"
"float	BlurValue = 30.0f;\r\n"
"//高亮程度\r\n"
"float BloomValue = 0.2f;\r\n"
"\r\n"
"\r\n"
"//像素Shader的函数, X方向Bloom\r\n"
"float4 PS_BloomX(float2 Tex : TEXCOORD0) : COLOR0\r\n"
"{\r\n"
"	static const int g_cKernelSize = 7;\r\n"
"	float define = BlurValue * 100 ;\r\n"
"	 \r\n"
"	float2 TexelKernel[g_cKernelSize] =\r\n"
"	{\r\n"
"	    { -6, 0 },\r\n"
"	    //{ -5, 0 },\r\n"
"	    { -4, 0 },\r\n"
"	    //{ -3, 0 },\r\n"
"	    { -2, 0 },\r\n"
"	    //{ -1, 0 },\r\n"
"	    {  0, 0 },\r\n"
"	    //{  1, 0 },\r\n"
"	    {  2, 0 },\r\n"
"	    //{  3, 0 },\r\n"
"	    {  4, 0 },\r\n"
"	    //{  5, 0 },\r\n"
"	    {  6, 0 }\r\n"
"	};\r\n"
"\r\n"
"	const float BlurWeights[g_cKernelSize] =\r\n"
"	{\r\n"
"	    0.005216,\r\n"
"	    //0.008764,\r\n"
"	    0.026995,\r\n"
"	    //0.064759,\r\n"
"	    0.120985,\r\n"
"	    //0.176033,\r\n"
"	    0.199471,\r\n"
"	    //0.176033,\r\n"
"	    0.120985,\r\n"
"	    //0.064759,\r\n"
"	    0.026995,\r\n"
"	    //0.008764,\r\n"
"	    0.005216\r\n"
"	};\r\n"
"\r\n"
"  float4 Color = 0;\r\n"
"  for (int i = 0; i < g_cKernelSize; i++)\r\n"
"  {\r\n"
"      Color += tex2D( g_samSrcColor, Tex + TexelKernel[i].xy/define ) * BlurWeights[i] * 2;\r\n"
"  }\r\n"
"  return Color * BloomValue;\r\n"
"}\r\n"
"\r\n"
"\r\n"
"//像素Shader的函数, Y方向Bloom\r\n"
"float4 PS_BloomY(float2 Tex : TEXCOORD0) : COLOR0\r\n"
"{\r\n"
"	static const int g_cKernelSize = 7;\r\n"
"	float define = BlurValue * 100 ;\r\n"
"	 \r\n"
"	float2 TexelKernel[g_cKernelSize] =\r\n"
"	{\r\n"
"	    { -6, 0 },\r\n"
"	    //{ -5, 0 },\r\n"
"	    { -4, 0 },\r\n"
"	    //{ -3, 0 },\r\n"
"	    { -2, 0 },\r\n"
"	    //{ -1, 0 },\r\n"
"	    {  0, 0 },\r\n"
"	    //{  1, 0 },\r\n"
"	    {  2, 0 },\r\n"
"	    //{  3, 0 },\r\n"
"	    {  4, 0 },\r\n"
"	    //{  5, 0 },\r\n"
"	    {  6, 0 }\r\n"
"	};\r\n"
"\r\n"
"	const float BlurWeights[g_cKernelSize] =\r\n"
"	{\r\n"
"	    0.005216,\r\n"
"	    //0.008764,\r\n"
"	    0.026995,\r\n"
"	    //0.064759,\r\n"
"	    0.120985,\r\n"
"	    //0.176033,\r\n"
"	    0.199471,\r\n"
"	    //0.176033,\r\n"
"	    0.120985,\r\n"
"	    //0.064759,\r\n"
"	    0.026995,\r\n"
"	    //0.008764,\r\n"
"	    0.005216\r\n"
"	};\r\n"
"\r\n"
"  float4 Color = 0;\r\n"
"  for (int i = 0; i < g_cKernelSize; i++)\r\n"
"  {\r\n"
"      Color += tex2D( g_samSrcColor, Tex + TexelKernel[i].yx/define ) * BlurWeights[i] * 2;\r\n"
"  }\r\n"
"  return Color * BloomValue;\r\n"
"}\r\n"
"\r\n"
"//像素Shader的函数, XY方向Bloom\r\n"
"float4 PS_BloomXY(float2 Tex : TEXCOORD0) : COLOR0\r\n"
"{\r\n"
"	//方法1:上下左右各偏移三个单位，并设置不同的权重后叠加\r\n"
"	//需要叠加图像共12次，运算效率较低\r\n"
"	static const int kernelCnt = 13;\r\n"
"	float define = 10000.0f / BlurValue;\r\n"
"	 \r\n"
"	float2 TexelKernel[kernelCnt] =\r\n"
"	{\r\n"
"	    { -8, 0 },\r\n"
"	    { -7, 0 },\r\n"
"	    { -6, 0 },\r\n"
"	    { -5, 0 },\r\n"
"	    { -3, 0 },\r\n"
"	    { -1, 0 },\r\n"
"	    {  0, 0 },\r\n"
"	    {  1, 0 },\r\n"
"	    {  3, 0 },\r\n"
"	    {  5, 0 },\r\n"
"	    {  6, 0 },\r\n"
"	    {  7, 0 },\r\n"
"	    {  8, 0 }\r\n"
"	};\r\n"
"	\r\n"
"	const float BlurWeights[kernelCnt] =\r\n"
"	{\r\n"
"	    0.02,\r\n"
"	    0.05	,\r\n"
"	    0.08,\r\n"
"	    0.15,\r\n"
"	    0.25,\r\n"
"	    0.5,\r\n"
"	    0.8,\r\n"
"	    0.5,\r\n"
"	    0.25,\r\n"
"	    0.15,\r\n"
"	    0.08,\r\n"
"	    0.05,\r\n"
"	    0.02\r\n"
"	};\r\n"
"\r\n"
"	float4 Color = 0;\r\n"
"	for (int i = 0; i < kernelCnt; i++)\r\n"
"	{\r\n"
"	    Color += tex2D( g_samSrcColor, Tex + TexelKernel[i].xy/define ) * BlurWeights[i];\r\n"
"	    Color += tex2D( g_samSrcColor, Tex + TexelKernel[i].yx/define ) * BlurWeights[i];\r\n"
"	}\r\n"
"	return Color * BloomValue;	\r\n"
"}\r\n"
"\r\n"
"//渲染时调用的技术\r\n"
"technique Bloom_X\r\n"
"{\r\n"
"	pass p0\r\n"
"	{\r\n"
"		PixelShader= compile ps_2_0 PS_BloomX();\r\n"
"	}\r\n"
"}\r\n"
"\r\n"
"\r\n"
"//渲染时调用的技术\r\n"
"technique Bloom_Y\r\n"
"{\r\n"
"	pass p0\r\n"
"	{\r\n"
"		PixelShader= compile ps_2_0 PS_BloomY();\r\n"
"	}\r\n"
"}\r\n"
"\r\n"
"\r\n"
"//渲染时调用的技术\r\n"
"technique Bloom_XY\r\n"
"{\r\n"
"	pass p0\r\n"
"	{\r\n"
"		PixelShader= compile ps_2_0 PS_BloomXY();\r\n"
"	}\r\n"
"}\r\n"
"\r\n"
"\r\n"
"//-------------------------------------------------------------------------\r\n"
"//调节亮度和对比度\r\n"
"//-------------------------------------------------------------------------\r\n"
"float fade = 0.9f;\r\n"
"float Contrast = 1.3f;\r\n"
"float lumaswitch = 0.0f;\r\n"
"float3 colour = {0,0,0};\r\n"
"Float luma = 1.0f;\r\n"
"//像素Shader的函数\r\n"
"float4 PS_ProcessImageColor(float2 TexC: TEXCOORD0): COLOR0\r\n"
"{\r\n"
"    float4 col = tex2D(g_samSrcColor, TexC) ;\r\n"
"    col.a=1;\r\n"
"     \r\n"
"     // Luma\r\n"
" 		if (col.r + col.g + col.b < luma * 3) \r\n"
" 				col.a = lumaswitch; \r\n"
" 		else \r\n"
" 				col.a = 1-lumaswitch; //col.a-lumaswitch ;    \r\n"
" 		\r\n"
" 		// RGB +/-		\r\n"
"    col.rgb = colour.rgb + col.rgb ;       \r\n"
"		\r\n"
"		// contrast\r\n"
"  	col.rgb =  ((col.rgb -0.5)*Contrast)+0.5  ;  \r\n"
"  	\r\n"
"  	//level\r\n"
"  	col = col * fade  ;   \r\n"
"  	\r\n"
"    return col;\r\n"
"}\r\n"
"\r\n"
"//渲染时调用的技术\r\n"
"technique GeneralImageProcess\r\n"
"{\r\n"
"	pass p0\r\n"
"	{\r\n"
"		PixelShader= compile ps_2_0 PS_ProcessImageColor();\r\n"
"	}\r\n"
"}\r\n"
"\r\n"
"\r\n"
"";

const char g_FXTerUnderWaterBuffer[] = 
"// oi oi\r\n"
"\r\n"
"float4x4 mWorld;\r\n"
"float4x4	mViewProj;\r\n"
"float4x4	mView;\r\n"
"float4		view_position;\r\n"
"float		sun_shininess, sun_strength;\r\n"
"\r\n"
"\r\n"
"float3		watercolour;\r\n"
"float3		sun_vec;\r\n"
"float4x4 	mWorldViewProj;\r\n"
"\r\n"
"texture texDiffuse;\r\n"
"\r\n"
"struct VS_INPUT\r\n"
"{\r\n"
"    float3 Pos      : POSITION;\r\n"
"	float3 Normal   : NORMAL;\r\n"
"	float2 tc		: TEXCOORD0;\r\n"
"};\r\n"
"\r\n"
"struct VS_OUTPUT\r\n"
"{\r\n"
"    float4  Pos			: POSITION;    \r\n"
"	float2	tc			: TEXCOORD0;\r\n"
"	float	fade		: TEXCOORD1;\r\n"
"	float4	colour		: COLOR0;\r\n"
"};\r\n"
"\r\n"
"sampler sDiffuse = sampler_state\r\n"
"{  \r\n"
"    Texture = <texDiffuse>; \r\n"
"    MipFilter = NONE; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"	AddressV  = CLAMP;		\r\n"
"};\r\n"
"\r\n"
"VS_OUTPUT VShader(VS_INPUT i)\r\n"
"{\r\n"
"  VS_OUTPUT o;	\r\n"
"  \r\n"
"	o.Pos = mul(float4(i.Pos.x, 0.75*i.Pos.y,i.Pos.z, 1), mWorldViewProj);\r\n"
"	o.tc = i.tc;\r\n"
"	o.colour = dot(sun_vec, i.Normal);\r\n"
"	o.fade = 0.6 + 0.4 * saturate(-i.Pos.y * 0.04);\r\n"
"	\r\n"
"	return o;\r\n"
"}\r\n"
"\r\n"
"float4 PShader(VS_OUTPUT i) : COLOR\r\n"
"{	\r\n"
"    return lerp(i.colour*tex2D(sDiffuse, i.tc), float4(watercolour,1), i.fade );\r\n"
"}\r\n"
"\r\n"
"technique T0\r\n"
"{\r\n"
"  pass P0\r\n"
"  {        \r\n"
"		pixelshader = compile ps_2_0 PShader();\r\n"
"		vertexshader = compile vs_1_1 VShader();\r\n"
"	}\r\n"
"}\r\n"
"";

const char g_FXHeightMapGenBuffer[] =
"	// oi oi\r\n"

"\r\n"

"//float		amplitude;\r\n"

"float		scale;\r\n"

"//float		mapsize_x,mapsize_y;\r\n"

"\r\n"

"struct VS_INPUT\r\n"

"{\r\n"

"    float3  Pos     : POSITION;\r\n"

"    float2  tc     : TEXCOORD0;\r\n"

"};\r\n"

"\r\n"

"struct VS_OUTPUT\r\n"

"{\r\n"

"	float4  Pos			: POSITION;\r\n"

"	float2  tc0			: TEXCOORD0;	\r\n"

"	float2  tc1			: TEXCOORD1;\r\n"

"};\r\n"

"\r\n"

"texture noise0;\r\n"

"texture noise1;\r\n"

"\r\n"

"// samplers\r\n"

"sampler N0 = sampler_state \r\n"

"{\r\n"

"	texture = <noise0>;\r\n"

"	AddressU  = WRAP;		\r\n"

"	AddressV  = WRAP;\r\n"

"	MIPFILTER = LINEAR; //LINEAR;\r\n"

"	MINFILTER = LINEAR;\r\n"

"	MAGFILTER = LINEAR;\r\n"

"	MipMapLodBias = 0;\r\n"

"};\r\n"

"sampler N1 = sampler_state \r\n"

"{\r\n"

"	texture = <noise1>;\r\n"

"	AddressU  = WRAP;		\r\n"

"	AddressV  = WRAP;\r\n"

"	MIPFILTER = LINEAR; //LINEAR;\r\n"

"	MINFILTER = LINEAR;\r\n"

"	MAGFILTER = LINEAR;\r\n"

"	MipMapLodBias = 0;\r\n"

"};\r\n"

"\r\n"

"/*float4 calc_worldpos(float2 uv)\r\n"

"{	\r\n"

"	float4	origin = float4(uv.xy,-1,1);\r\n"

"    float4	direction = float4(uv.xy,1,1);\r\n"

"    \r\n"

"    origin	  = mul(origin, mProjector);\r\n"

"    direction = mul(direction, mProjector) - origin; \r\n"

"    \r\n"

"    float	l = -origin.y / direction.y;\r\n"

"    \r\n"

"    float4 worldPos = origin + direction*l;\r\n"

"    worldPos /= worldPos.w;\r\n"

"	return worldPos;\r\n"

"}*/\r\n"

"\r\n"

"\r\n"

"VS_OUTPUT VShader(VS_INPUT i)\r\n"

"{\r\n"

"	VS_OUTPUT o;\r\n"

"	o.Pos = float4( i.tc.x*2-1,1-i.tc.y*2, 0, 1 );\r\n"

"	o.tc0 = scale*i.Pos.xz*0.007813;\r\n"

"	o.tc1 = scale*i.Pos.xz*0.125;\r\n"

"//	o.tc0 = i.tc;\r\n"

"//	o.tc1 = 16*i.tc;\r\n"

"	return o;\r\n"

"}\r\n"

"\r\n"

"\r\n"

"float4 PShader(VS_OUTPUT i) : COLOR\r\n"

"{	\r\n"

"	//return float4(1,0,0,1);\r\n"

"	//return tex2D(N0, i.tc0);\r\n"

"	//return tex2D(N1, i.tc1);\r\n"

"	return tex2D(N0, i.tc0) + tex2D(N1, i.tc1) - 0.5;\r\n"

"}\r\n"

"\r\n"

"technique T0\r\n"

"{\r\n"

"	pass P0\r\n"

"	{\r\n"

"		vertexshader = compile vs_2_0 VShader();\r\n"

"		pixelshader = compile ps_2_0 PShader();  \r\n"

"	}\r\n"

"}\r\n"

"\r\n"

"";


const char g_FXNormalMapGenBuffer[] =
"	// oi oi\r\n"
"\r\n"
"float	inv_mapsize_x,inv_mapsize_y;\r\n"
"float4	corner00, corner01, corner10, corner11;\r\n"
"float	amplitude;\r\n"
"\r\n"
"struct VS_INPUT\r\n"
"{\r\n"
"    float3  Pos     : POSITION;\r\n"
"    float2  tc     : TEXCOORD0;\r\n"
"};\r\n"
"\r\n"
"struct VS_OUTPUT\r\n"
"{\r\n"
"	float4  Pos			: POSITION;\r\n"
"	float2	tc			: TEXCOORD0;\r\n"
"	float3  tc_p_dx		: TEXCOORD1;\r\n"
"	float3  tc_p_dy		: TEXCOORD2;\r\n"
"	float3  tc_m_dx		: TEXCOORD3;\r\n"
"	float3  tc_m_dy		: TEXCOORD4;\r\n"
"};\r\n"
"\r\n"
"texture hmap;\r\n"
"\r\n"
"// samplers\r\n"
"sampler hsampler = sampler_state \r\n"
"{\r\n"
"	texture = <hmap>;\r\n"
"	AddressU  = WRAP;		\r\n"
"	AddressV  = WRAP;\r\n"
"	MIPFILTER = NONE;\r\n"
"	MINFILTER = LINEAR;\r\n"
"	MAGFILTER = LINEAR;\r\n"
"};\r\n"
"\r\n"
"/*float4 calc_worldpos(float2 uv)\r\n"
"{	\r\n"
"	float4	origin = float4(uv.xy,-1,1);\r\n"
"    float4	direction = float4(uv.xy,1,1);\r\n"
"    \r\n"
"    origin	  = mul(origin, mProjector);\r\n"
"    direction = mul(direction, mProjector) - origin; \r\n"
"    \r\n"
"    float	l = -origin.y / direction.y;\r\n"
"    \r\n"
"    float4 worldPos = origin + direction*l;\r\n"
"    worldPos /= worldPos.w;\r\n"
"	return worldPos;\r\n"
"}*/\r\n"
"\r\n"
"\r\n"
"VS_OUTPUT VShader(VS_INPUT i)\r\n"
"{\r\n"
"	VS_OUTPUT o;\r\n"
"	o.Pos = float4( i.tc.x*2-1,1-i.tc.y*2, 0, 1 );\r\n"
"	float scale = 1;\r\n"
"	float2 tc = i.tc + float2(-inv_mapsize_x*scale,0);\r\n"
"	float4 meh = lerp(lerp(corner00,corner01,tc.x),lerp(corner10,corner11,tc.x),tc.y);\r\n"
"	o.tc_m_dx = meh.xyz/meh.w;\r\n"
"	\r\n"
"	tc = i.tc + float2(+inv_mapsize_x*scale,0);\r\n"
"	meh = lerp(lerp(corner00,corner01,tc.x),lerp(corner10,corner11,tc.x),tc.y);\r\n"
"	o.tc_p_dx = meh.xyz/meh.w;\r\n"
"	\r\n"
"	tc = i.tc + float2(0,-inv_mapsize_y*scale);\r\n"
"	meh = lerp(lerp(corner00,corner01,tc.x),lerp(corner10,corner11,tc.x),tc.y);\r\n"
"	o.tc_m_dy = meh.xyz/meh.w;\r\n"
"	\r\n"
"	tc = i.tc + float2(0,inv_mapsize_y*scale);\r\n"
"	//meh = (1-tc.y)*(corner00*(1-tc.x) + corner01*tc.x) + tc.y*(corner10*(1-tc.x) + corner11*tc.x);\r\n"
"	meh = lerp(lerp(corner00,corner01,tc.x),lerp(corner10,corner11,tc.x),tc.y);\r\n"
"	o.tc_p_dy = meh.xyz/meh.w;\r\n"
"\r\n"
"	o.tc = i.tc;\r\n"
"	\r\n"
"	return o;\r\n"
"}\r\n"
"\r\n"
"\r\n"
"float4 PShader(VS_OUTPUT i) : COLOR\r\n"
"{	\r\n"
"	float2	dx = {inv_mapsize_x,0},\r\n"
"			dy = {0,inv_mapsize_y};\r\n"
"	i.tc_p_dx.y = amplitude*tex2D(hsampler, i.tc+dx);\r\n"
"	i.tc_m_dx.y = amplitude*tex2D(hsampler, i.tc-dx);\r\n"
"	i.tc_p_dy.y = amplitude*tex2D(hsampler, i.tc+dy);\r\n"
"	i.tc_m_dy.y = amplitude*tex2D(hsampler, i.tc-dy);\r\n"
"	//return float4(0.5+0.5*i.tc_p_dx,1);\r\n"
"	float3 normal = normalize(-cross(i.tc_p_dx-i.tc_m_dx, i.tc_p_dy-i.tc_m_dy));\r\n"
"	return float4(0.5+0.5*normal,1);\r\n"
"}\r\n"
"\r\n"
"technique T0\r\n"
"{\r\n"
"	pass P0\r\n"
"	{\r\n"
"		vertexshader = compile vs_2_0 VShader();\r\n"
"		pixelshader = compile ps_2_0 PShader();  \r\n"
"	}\r\n"
"}\r\n"
"\r\n"
"";

const char g_FXSkyBoxBuffer[] =
"// oi oi\r\n"
"\r\n"
"float4x4	mViewProj;\r\n"
"float4x4	mInvViewProj;\r\n"
"float4x4	mInvView;\r\n"
"float4		view_position;\r\n"
"float		sun_alfa, sun_theta, sun_shininess, sun_strength;\r\n"
"float zfar = 4000;\r\n"
"\r\n"
"struct VS_INPUT\r\n"
"{\r\n"
"    float3  Pos      : POSITION;\r\n"
"    float4  displacement : COLOR0;\r\n"
"};\r\n"
"\r\n"
"struct VS_OUTPUT\r\n"
"{\r\n"
"    float4  Pos     : POSITION;\r\n"
"	float3	v	: TEXCOORD1;\r\n"
"	float3  sun	: TEXCOORD2;\r\n"
"};\r\n"
"\r\n"
"texture EnvironmentMap;\r\n"
"\r\n"
"samplerCUBE skySRGB = sampler_state\r\n"
"{  \r\n"
"    Texture = <EnvironmentMap>; \r\n"
"    MipFilter = LINEAR; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"    AddressV  = CLAMP;\r\n"
"    AddressW  = CLAMP;\r\n"
"    SRGBTexture = true;\r\n"
"};\r\n"
"\r\n"
"samplerCUBE sky = sampler_state\r\n"
"{  \r\n"
"    Texture = <EnvironmentMap>; \r\n"
"    MipFilter = LINEAR; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"    AddressV  = CLAMP;\r\n"
"    AddressW  = CLAMP;\r\n"
"};\r\n"
"\r\n"
"VS_OUTPUT VShader(VS_INPUT i)\r\n"
"{\r\n"
"    VS_OUTPUT   o;\r\n"
"    \r\n"
"    \r\n"
"	o.Pos = mul(float4(zfar*i.Pos,1), mViewProj);\r\n"
"	\r\n"
"	/*float4	direction	= float4(i.Pos.xy,1,1);\r\n"
"	\r\n"
"	direction =  mul(direction , mInvViewProj);	*/\r\n"
"	\r\n"
"	//o.v = direction.xyz/direction.w - view_position.xyz/view_position.w;\r\n"
"	o.v = i.Pos;\r\n"
"    \r\n"
"	o.sun.x = cos(sun_theta)*sin(sun_alfa);\r\n"
"	o.sun.y = sin(sun_theta);\r\n"
"	o.sun.z = cos(sun_theta)*cos(sun_alfa);\r\n"
"\r\n"
"	return o;\r\n"
"}\r\n"
"\r\n"
"float4 PShader(VS_OUTPUT i) : COLOR\r\n"
"{\r\n"
"    float3 sunlight = sun_strength*pow(saturate(dot(normalize(i.v), i.sun)),sun_shininess)*float3(1.2, 0.4, 0.1);\r\n"
"	\r\n"
"	float4 ut;\r\n"
"	ut.a = 1;\r\n"
"	ut.rgb = pow(texCUBE(skySRGB,i.v) + sunlight, 1/2.2);\r\n"
"	//if(i.v.y < 0) ut.rgb = float3(0.090,0.244,0.23);\r\n"
"	//ut.rgb = 0.5+0.5*i.v;\r\n"
"	return ut;\r\n"
"}\r\n"
"\r\n"
"float4 PShader1_1(VS_OUTPUT i) : COLOR\r\n"
"{	\r\n"
"	float4 ut;\r\n"
"	ut.a = 1;\r\n"
"	ut.rgb = texCUBE(sky,i.v);\r\n"
"	return ut;\r\n"
"}\r\n"
"\r\n"
"technique T0\r\n"
"{\r\n"
"    pass P0\r\n"
"    {        \r\n"
"        pixelshader = compile ps_2_0 PShader();\r\n"
"		vertexshader = compile vs_1_1 VShader(); \r\n"
"    }\r\n"
"}\r\n"
"/*\r\n"
"technique T1\r\n"
"{\r\n"
"    pass P0\r\n"
"    {        \r\n"
"        pixelshader = compile ps_1_1 PShader1_1();\r\n"
"		vertexshader = compile vs_1_1 VShader(); \r\n"
"    }\r\n"
"}\r\n"
"*/\r\n"
"";
const char g_FXWaterSoftBuffer[] =
"// oi oi\r\n"
"\r\n"
"float4x4	mViewProj;\r\n"
"float4x4	mView;\r\n"
"float4		view_position;\r\n"
"float3		watercolour;\r\n"
"float		LODbias;\r\n"
"float		sun_shininess, sun_strength;\r\n"
"float3		sun_vec;\r\n"
"float		reflrefr_offset;\r\n"
"bool		diffuseSkyRef;\r\n"
"\r\n"
"texture EnvironmentMap;\r\n"
"\r\n"
"texture FresnelMap;\r\n"
"texture Heightmap;\r\n"
"texture Normalmap;\r\n"
"texture Reflectionmap;\r\n"
"texture Refractionmap;\r\n"
"texture noiseXZ;\r\n"
"\r\n"
"struct VS_INPUT\r\n"
"{\r\n"
"    float3 Pos      : POSITION;\r\n"
"	float3 Normal   : NORMAL;\r\n"
"	float2 tc		: TEXCOORD0;\r\n"
"};\r\n"
"\r\n"
"samplerCUBE sky = sampler_state\r\n"
"{  \r\n"
"    Texture = <EnvironmentMap>; \r\n"
"    MipFilter = NONE; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = WRAP;		\r\n"
"    AddressV  = WRAP;\r\n"
"    AddressW  = WRAP;\r\n"
"	//MipMapLodBias = (LODbias);\r\n"
"	//SRGBTexture = true;\r\n"
"};\r\n"
"\r\n"
"sampler fresnel = sampler_state\r\n"
"{  \r\n"
"    Texture = <FresnelMap>; \r\n"
"    MipFilter = NONE; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"	AddressV  = CLAMP;		\r\n"
"};\r\n"
"\r\n"
"sampler reflmap = sampler_state\r\n"
"{  \r\n"
"    Texture = <Reflectionmap>; \r\n"
"    MipFilter = LINEAR; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"	AddressV  = CLAMP;			\r\n"
"	MipMapLodBias = (LODbias);\r\n"
"};\r\n"
"\r\n"
"sampler refrmap = sampler_state\r\n"
"{  \r\n"
"    Texture = <Refractionmap>; \r\n"
"    MipFilter = LINEAR; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"	AddressV  = CLAMP;			\r\n"
"	MipMapLodBias = (LODbias);\r\n"
"};\r\n"
"\r\n"
"\r\n"
"struct VS_NV20\r\n"
"{\r\n"
"    float4  Pos			: POSITION;    \r\n"
"	float2  dot			: TEXCOORD0;\r\n"
"	float3	R			: TEXCOORD1;\r\n"
"	float2  refr_tc  	: TEXCOORD2;\r\n"
"	float2  refl_tc  	: TEXCOORD3;\r\n"
"	float3  sunlight	: COLOR0;\r\n"
"	\r\n"
"};\r\n"
"\r\n"
"VS_NV20 VShaderNV20(VS_INPUT i)\r\n"
"{\r\n"
"    VS_NV20   o;\r\n"
"   		\r\n"
"    o.Pos = mul(float4(i.Pos.xyz,1), mViewProj);    \r\n"
"	float3 normal = normalize(i.Normal.xyz);\r\n"
"	float3 v = normalize(i.Pos.xyz - view_position.xyz/view_position.w);\r\n"
"\r\n"
"	o.R = reflect(v,normal);		\r\n"
"	o.dot = dot(o.R,normal);	\r\n"
"	float sunlight = pow(saturate(dot(o.R, sun_vec)),sun_shininess);\r\n"
"	o.sunlight = sunlight*float3(1.2, 0.8, 0.6);\r\n"
"		\r\n"
"	float4 tpos = mul(float4(i.Pos.x,0,i.Pos.z,1), mViewProj);\r\n"
"	tpos.xyz = tpos.xyz/tpos.w;\r\n"
"	tpos.xy = 0.5 + 0.5*tpos.xy*float2(1,-1);\r\n"
"	tpos.z = reflrefr_offset/tpos.z;	\r\n"
"	\r\n"
"	o.refr_tc = tpos.xy - tpos.z*normal.xz;\r\n"
"	o.refl_tc = tpos.xy - tpos.z*normal.xz;\r\n"
"	\r\n"
"	return o;\r\n"
"}\r\n"
"\r\n"
"VS_NV20 VShaderNV30(VS_INPUT i)\r\n"
"{\r\n"
"    VS_NV20   o;\r\n"
"   		\r\n"
"    o.Pos = mul(float4(i.Pos.xyz,1), mViewProj);    \r\n"
"	float3 normal = normalize(i.Normal.xyz);\r\n"
"	float3 v = normalize(i.Pos.xyz - view_position.xyz/view_position.w);\r\n"
"\r\n"
"	o.R = reflect(v,normal);		\r\n"
"	o.dot = dot(o.R,normal);	\r\n"
"	float sunlight = pow(saturate(dot(o.R, sun_vec)),sun_shininess);\r\n"
"	o.sunlight = sunlight*float3(1.2, 0.4, 0.1);\r\n"
"		\r\n"
"	float4 tpos = mul(float4(i.Pos.x,0,i.Pos.z,1), mViewProj);\r\n"
"	tpos.xyz = tpos.xyz/tpos.w;\r\n"
"	tpos.xy = 0.5 + 0.5*tpos.xy*float2(1,-1);\r\n"
"	tpos.z = reflrefr_offset/tpos.z;	\r\n"
"	\r\n"
"	o.refr_tc = tpos.xy - tpos.z*normal.xz;\r\n"
"	o.refl_tc = tpos.xy - tpos.z*normal.xz;\r\n"
"	\r\n"
"	return o;\r\n"
"}\r\n"
"\r\n"
"\r\n"
"float4 PShaderNV20(VS_NV20 i) : COLOR\r\n"
"{\r\n"
"    float4 ut;\r\n"
"	ut.a = 1;\r\n"
"	\r\n"
"	float f = tex1D(fresnel,i.dot);			\r\n"
"    float3 global_refl = texCUBE(sky,i.R);	\r\n"
"    float4 local_refl = tex2D(reflmap, i.refl_tc);\r\n"
"    float3 refr = tex2D(refrmap, i.refr_tc);\r\n"
"	float3 refl = lerp( global_refl, local_refl.rgb, local_refl.a);\r\n"
"	ut.rgb = lerp( refr, refl, f) + i.sunlight*sun_strength;\r\n"
"\r\n"
"    return ut;\r\n"
"}\r\n"
"\r\n"
"float4 PShaderNV30(VS_NV20 i) : COLOR\r\n"
"{\r\n"
"    float4 ut;\r\n"
"	ut.a = 1;\r\n"
"	\r\n"
"	float f = tex1D(fresnel,i.dot);			\r\n"
"    float3 global_refl = texCUBE(sky,i.R)  + i.sunlight.rgb*sun_strength;	\r\n"
"    float4 local_refl = tex2D(reflmap, i.refl_tc);\r\n"
"    float3 refr = tex2D(refrmap, i.refr_tc);\r\n"
"	float3 refl = lerp( global_refl, local_refl.rgb, local_refl.a);\r\n"
"	ut.rgb = lerp( refr, refl, f);\r\n"
"\r\n"
"    return ut;\r\n"
"}\r\n"
"\r\n"
"technique T0\r\n"
"{\r\n"
"    pass P0\r\n"
"    {        \r\n"
"		pixelshader = compile ps_2_0 PShaderNV30();\r\n"
"		vertexshader = compile vs_2_0 VShaderNV30();        \r\n"
"    }\r\n"
"}\r\n"
"\r\n"
"technique T1\r\n"
"{\r\n"
"    pass P0\r\n"
"    {        \r\n"
"		pixelshader = compile ps_1_4 PShaderNV20();\r\n"
"		vertexshader = compile vs_1_1 VShaderNV20();        \r\n"
"    }\r\n"
"}\r\n"
"\r\n"
"technique T2\r\n"
"{\r\n"
"    pass P0\r\n"
"    {        \r\n"
"		pixelshader = compile ps_1_1 PShaderNV20();\r\n"
"		vertexshader = compile vs_1_1 VShaderNV20();        \r\n"
"    }\r\n"
"}\r\n"
"\r\n"
"";


const char g_FXWaterR300Buffer[] =
"// oi oi\r\n"
"\r\n"
"float4x4	mViewProj;\r\n"
"float4x4	mView;\r\n"
"float4		view_position;\r\n"
"float3		watercolour;\r\n"
"float		LODbias;\r\n"
"float		sun_shininess, sun_strength;\r\n"
"float3		sun_vec;\r\n"
"float		reflrefr_offset;\r\n"
"bool		diffuseSkyRef;\r\n"
"\r\n"
"texture EnvironmentMap;\r\n"
"\r\n"
"texture FresnelMap;\r\n"
"texture Heightmap;\r\n"
"texture Normalmap;\r\n"
"texture Refractionmap;\r\n"
"texture Reflectionmap;\r\n"
"texture noiseXZ;\r\n"
"\r\n"
"struct VS_INPUT\r\n"
"{\r\n"
"    float3 Pos      : POSITION;\r\n"
"	float3 Normal   : NORMAL;\r\n"
"	float2 tc		: TEXCOORD0;\r\n"
"};\r\n"
"\r\n"
"struct VS_OUTPUT\r\n"
"{\r\n"
"    float4  Pos			: POSITION;    \r\n"
"	float2	tc			: TEXCOORD0;\r\n"
"	float3  normal		: TEXCOORD1;\r\n"
"	float3	viewvec		: TEXCOORD2;\r\n"
"	float3	screenPos	: TEXCOORD3;	\r\n"
"	float3  worldPos	: TEXCOORD4;\r\n"
"	float3	screenPosDis	: TEXCOORD5;\r\n"
"};\r\n"
"\r\n"
"samplerCUBE sky = sampler_state\r\n"
"{  \r\n"
"    Texture = <EnvironmentMap>; \r\n"
"    MipFilter = NONE; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = WRAP;		\r\n"
"    AddressV  = WRAP;\r\n"
"    AddressW  = WRAP;\r\n"
"	//MipMapLodBias = (LODbias);\r\n"
"//	SRGBTexture = true;\r\n"
"};\r\n"
"\r\n"
"sampler fresnel = sampler_state\r\n"
"{  \r\n"
"    Texture = <FresnelMap>; \r\n"
"    MipFilter = NONE; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"	AddressV  = CLAMP;\r\n"
"\r\n"
"};\r\n"
"\r\n"
"sampler hmap = sampler_state\r\n"
"{  \r\n"
"    Texture = <Heightmap>; \r\n"
"    MipFilter = LINEAR; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"	AddressV  = CLAMP;		\r\n"
"};\r\n"
"\r\n"
"sampler nmap = sampler_state\r\n"
"{  \r\n"
"    Texture = <Normalmap>; \r\n"
"    MipFilter = LINEAR; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"	AddressV  = CLAMP;		\r\n"
"};\r\n"
"\r\n"
"sampler refrmap = sampler_state\r\n"
"{  \r\n"
"    Texture = <Refractionmap>; \r\n"
"    MipFilter = LINEAR; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"	AddressV  = CLAMP;	\r\n"
"\r\n"
"};\r\n"
"\r\n"
"sampler reflmap = sampler_state\r\n"
"{  \r\n"
"    Texture = <Reflectionmap>; \r\n"
"    MipFilter = LINEAR; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"	AddressV  = CLAMP;			\r\n"
"	MipMapLodBias = (LODbias);\r\n"
"\r\n"
"};\r\n"
"\r\n"
"sampler noise = sampler_state \r\n"
"{\r\n"
"	texture = <noiseXZ>;\r\n"
"	AddressU  = WRAP;		\r\n"
"	AddressV  = WRAP;\r\n"
"	MIPFILTER = POINT; //LINEAR;\r\n"
"	MINFILTER = LINEAR;\r\n"
"	MAGFILTER = LINEAR;	\r\n"
"};\r\n"
"\r\n"
"/* DX9 class shaders	*/\r\n"
"\r\n"
"VS_OUTPUT VShaderR300(VS_INPUT i)\r\n"
"{\r\n"
"    VS_OUTPUT   o;\r\n"
"	o.worldPos = i.Pos.xyz/4;\r\n"
"	\r\n"
"    o.Pos = mul(float4(i.Pos.xyz,1), mViewProj);    \r\n"
"	o.normal = normalize(i.Normal.xyz);\r\n"
"	o.viewvec = normalize(i.Pos.xyz - view_position.xyz/view_position.w);\r\n"
"	o.tc = i.tc;	\r\n"
"	\r\n"
"	o.screenPosDis = (o.Pos.xyz / o.Pos.w);\r\n"
"	o.screenPosDis.xy = 0.5 + 0.5*o.screenPosDis.xy*float2(1,-1);\r\n"
"	o.screenPosDis.z = reflrefr_offset/o.screenPosDis.z;\r\n"
"	\r\n"
"	// alt screenpos\r\n"
"\r\n"
"	float4 tpos = mul(float4(i.Pos.x,0,i.Pos.z,1), mViewProj);\r\n"
"	o.screenPos = tpos.xyz/tpos.w;\r\n"
"	o.screenPos.xy = 0.5 + 0.5*o.screenPos.xy*float2(1,-1);\r\n"
"	o.screenPos.z = reflrefr_offset/o.screenPos.z;	\r\n"
"	\r\n"
"	return o;\r\n"
"}\r\n"
"\r\n"
"\r\n"
"float4 PShaderR300(VS_OUTPUT i) : COLOR\r\n"
"{\r\n"
"    float4 ut;\r\n"
"	ut.a = 1;\r\n"
"	float3 v = i.viewvec;\r\n"
"	float3 N = 2*tex2D(nmap,i.tc)-1;\r\n"
"		\r\n"
"	float3 R = normalize(reflect(v,N));		\r\n"
"	\r\n"
"	//R.y = max(R.y,0);\r\n"
"	float f = tex1D(fresnel,dot(R,N));		\r\n"
"		\r\n"
"	float3 sunlight = sun_strength*pow(saturate(dot(R, sun_vec)),sun_shininess)*float3(1.2, 0.4, 0.1);\r\n"
"	float4 refl = tex2D(reflmap,i.screenPos.xy-i.screenPos.z*N.xz);\r\n"
"	float3 skyrefl;\r\n"
"	skyrefl = texCUBE(sky,R);\r\n"
"	\r\n"
"	float3 col = lerp(skyrefl+sunlight,refl.rgb,refl.a);\r\n"
"	float3 refr = tex2D(refrmap,i.screenPos.xy-i.screenPos.z*N.xz);\r\n"
"	ut.rgb = lerp( refr, col, f);\r\n"
"			\r\n"
"    return ut;\r\n"
"}\r\n"
"\r\n"
"\r\n"
"technique T0\r\n"
"{\r\n"
"    pass P0\r\n"
"    {        \r\n"
"		pixelshader = compile ps_2_0 PShaderR300();\r\n"
"		vertexshader = compile vs_1_1 VShaderR300();\r\n"
"	}\r\n"
"}\r\n"
"";
const char g_FXUnderWaterSoftBuffer[] =
"// oi oi\r\n"
"\r\n"
"float4x4	mViewProj;\r\n"
"float4		view_position;\r\n"
"float		LODbias;\r\n"
"float		sun_alfa, sun_theta, sun_shininess, sun_strength;\r\n"
"float3		watercolour;\r\n"
"\r\n"
"texture EnvironmentMap;\r\n"
"texture Normalmap;\r\n"
"texture FresnelMap;\r\n"
"\r\n"
"struct VS_INPUT\r\n"
"{\r\n"
"    float3 Pos      : POSITION;\r\n"
"	float3 Normal    : NORMAL;\r\n"
"	float2 tc		: TEXCOORD0;\r\n"
"};\r\n"
"\r\n"
"struct VS_OUTPUT\r\n"
"{\r\n"
"    float4  Pos     : POSITION;    \r\n"
"	float2 tc		: TEXCOORD0;\r\n"
"	float3  normal	: TEXCOORD1;\r\n"
"	float3	viewvec	: TEXCOORD2;\r\n"
"	float3	sun		: TEXCOORD3;\r\n"
"};\r\n"
"\r\n"
"samplerCUBE sky = sampler_state\r\n"
"{  \r\n"
"    Texture = <EnvironmentMap>; \r\n"
"    MipFilter = LINEAR; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = WRAP;		\r\n"
"    AddressV  = WRAP;\r\n"
"    AddressW  = WRAP;\r\n"
"	MipMapLodBias = (LODbias);\r\n"
"	//SRGBTexture = true;\r\n"
"};\r\n"
"\r\n"
"sampler fresnel = sampler_state\r\n"
"{  \r\n"
"    Texture = <FresnelMap>; \r\n"
"    MipFilter = LINEAR; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"	AddressV  = CLAMP;		\r\n"
"};\r\n"
"\r\n"
"sampler nmap = sampler_state\r\n"
"{  \r\n"
"    Texture = <Normalmap>; \r\n"
"    MipFilter = LINEAR; \r\n"
"    MinFilter = LINEAR; \r\n"
"    MagFilter = LINEAR; \r\n"
"	AddressU  = CLAMP;		\r\n"
"	AddressV  = CLAMP;		\r\n"
"};\r\n"
"\r\n"
"/* DX9 class shaders	*/\r\n"
"\r\n"
"VS_OUTPUT VShaderR300(VS_INPUT i)\r\n"
"{\r\n"
"    VS_OUTPUT   o;\r\n"
"   		\r\n"
"    o.Pos = mul(float4(i.Pos.xyz,1), mViewProj);    \r\n"
"	o.normal = normalize(i.Normal.xyz);\r\n"
"	o.viewvec = i.Pos.xyz - view_position.xyz/view_position.w;\r\n"
"	o.tc = i.tc;\r\n"
"	o.sun.x = cos(sun_theta)*sin(sun_alfa);\r\n"
"	o.sun.y = sin(sun_theta);\r\n"
"	o.sun.z = cos(sun_theta)*cos(sun_alfa);\r\n"
"	return o;\r\n"
"}\r\n"
"\r\n"
"\r\n"
"float4 PShaderR300(VS_OUTPUT i) : COLOR\r\n"
"{\r\n"
"    //return float4(1,0,0,1);\r\n"
"    float4 ut;\r\n"
"	ut.a = 1;\r\n"
"	float3 v = normalize(i.viewvec);\r\n"
"	float3 N = 2*tex2D(nmap,i.tc)-1;\r\n"
"	float3 R = refract(v,N,1.33);			\r\n"
"	R.y = - R.y;\r\n"
"	float f = tex1D(fresnel,dot(R,N));	\r\n"
"	float sunlight = sun_strength*pow(saturate(dot(R, i.sun)),sun_shininess);\r\n"
"    float3 col = texCUBE(sky,R) + sunlight*float3(1.2, 0.7, 0.3);	\r\n"
"	float3 reflcol = watercolour + saturate(30*float3(0.4,0.6,0.8)*(1-dot(float3(0,1,0),N)));\r\n"
"	ut.rgb = lerp(col, reflcol, f) ;\r\n"
"\r\n"
"	return ut;\r\n"
"}\r\n"
"\r\n"
"/*	DX8 class shaders	*/\r\n"
"\r\n"
"struct VS_NV20\r\n"
"{\r\n"
"    float4  Pos			: POSITION;    \r\n"
"	float2  dot			: TEXCOORD1;\r\n"
"	float3	R			: TEXCOORD2;\r\n"
"	float3	sun			: TEXCOORD3;\r\n"
"	float3  sunlight	: COLOR0;\r\n"
"};\r\n"
"\r\n"
"VS_NV20 VShaderNV20(VS_INPUT i)\r\n"
"{\r\n"
"    VS_NV20   o;\r\n"
"   		\r\n"
"    o.Pos = mul(float4(i.Pos.xyz,1), mViewProj);    \r\n"
"	float3 normal = normalize(i.Normal.xyz);\r\n"
"	float3 v = normalize(i.Pos.xyz - view_position.xyz/view_position.w);\r\n"
"\r\n"
"	// what am I doing here? ;)\r\n"
"	o.sun.x = cos(sun_theta)*sin(sun_alfa);\r\n"
"	o.sun.y = sin(sun_theta);\r\n"
"	o.sun.z = cos(sun_theta)*cos(sun_alfa);\r\n"
"	\r\n"
"	o.R = reflect(v,normal);		\r\n"
"	o.dot = dot(o.R,normal);\r\n"
"	\r\n"
"	float sunlight = sun_strength*pow(saturate(dot(o.R, o.sun)),sun_shininess);\r\n"
"	o.sunlight = sunlight*float3(1.2, 0.6, 0.1);\r\n"
"	return o;\r\n"
"}\r\n"
"\r\n"
"float4 PShaderNV20(VS_NV20 i) : COLOR\r\n"
"{\r\n"
"    float4 ut;\r\n"
"	ut.a = 1;\r\n"
"	\r\n"
"	float f = tex1D(fresnel,i.dot);			\r\n"
"    float3 col = texCUBE(sky,i.R) + i.sunlight;	\r\n"
"	ut.rgb = lerp(float3(0.05,0.15,0.20), col, f) ;\r\n"
"\r\n"
"    return ut;\r\n"
"}\r\n"
"\r\n"
"technique T0\r\n"
"{\r\n"
"    pass P0\r\n"
"    {        \r\n"
"		pixelshader = compile ps_2_0 PShaderR300();\r\n"
"		vertexshader = compile vs_1_1 VShaderR300();\r\n"
"	}\r\n"
"}\r\n"
"\r\n"
"/*technique T1\r\n"
"{\r\n"
"    pass P0\r\n"
"    {        \r\n"
"		pixelshader = compile ps_1_1 PShaderNV20();\r\n"
"		vertexshader = compile vs_1_1 VShaderNV20();        \r\n"
"    }\r\n"
"}*/\r\n"
"";
#endif